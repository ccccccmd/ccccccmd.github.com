<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[docker-compose 的方式安装 wordpress]]></title>
      <url>http://ccccccmd.rootu.cn/2018/08/04/wordpress-via-docker/</url>
      <content type="html"><![CDATA[<h2 id="安装-wordpress"><a href="#安装-wordpress" class="headerlink" title="安装 wordpress"></a>安装 wordpress</h2><p>配置<code>docker-compose.yml</code>,yml再最后。</p>
<p>nginx配置反向代理，代理到8010端口,</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen        80;</span><br><span class="line">    server_name   xxx.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass         http://127.0.0.1:8010;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header   Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header   Connection keep-alive;</span><br><span class="line">        proxy_set_header   Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>docker-compose up -d</code>启动</p>
<h2 id="解决-docker-wordpress-2M-upload-limit"><a href="#解决-docker-wordpress-2M-upload-limit" class="headerlink" title="解决 docker wordpress 2M upload limit"></a>解决 docker wordpress 2M upload limit</h2><p><a href="https://github.com/docker-library/wordpress/issues/10" target="_blank" rel="noopener">https://github.com/docker-library/wordpress/issues/10</a></p>
<p>新建uploads.ini，并绑定到容器  “./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini”    </p>
<p>uploads.ini里输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file_uploads = On</span><br><span class="line">memory_limit = 64M</span><br><span class="line">upload_max_filesize = 6M</span><br><span class="line">post_max_size = 6M</span><br><span class="line">max_execution_time = 600</span><br></pre></td></tr></table></figure>
<h2 id="忘记做-volumes-bind，但是容器都起来并配置好了怎么办"><a href="#忘记做-volumes-bind，但是容器都起来并配置好了怎么办" class="headerlink" title="忘记做 volumes bind，但是容器都起来并配置好了怎么办"></a>忘记做 volumes bind，但是容器都起来并配置好了怎么办</h2><p>1.把容器内要bind的文件都copy到本地<br>2.<code>docker-compose stop</code><br>3.移除掉容器 <code>docker-compose rm wordpressweb</code><br>4.再次启动，<code>docker-compose up -d</code></p>
<a id="more"></a>
<h2 id="配置wordpress的cdn"><a href="#配置wordpress的cdn" class="headerlink" title="配置wordpress的cdn"></a>配置wordpress的cdn</h2><p>在你本地的主题文件夹找到 <code></code></p>
<p>添加如下代码,<a href="https://www.yuncaioo.com/post-449.html" target="_blank" rel="noopener">方案在这</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !is_admin() ) &#123;</span><br><span class="line">	add_action(<span class="string">'wp_loaded'</span>,<span class="string">'cdn_ob_start'</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">function</span> <span class="function"><span class="title">cdn_ob_start</span></span>() &#123;</span><br><span class="line">		ob_start(<span class="string">'cdn_replace'</span>);</span><br><span class="line">	&#125;	</span><br><span class="line"><span class="keyword">function</span> cdn_replace(<span class="variable">$html</span>)&#123;</span><br><span class="line">	<span class="variable">$local_host</span> = <span class="variable">$_SERVER</span>[<span class="string">'HTTP_HOST'</span>];</span><br><span class="line">	<span class="variable">$qiniu_host</span> = <span class="string">'offical-cdn.baseio.net'</span>; </span><br><span class="line">	<span class="variable">$cdn_exts</span>   = <span class="string">'css|js|png|jpg|jpeg|gif|ico|mp4'</span>; </span><br><span class="line">	<span class="variable">$cdn_dirs</span>   = <span class="string">'wp-content|wp-includes'</span>; </span><br><span class="line">	</span><br><span class="line">	<span class="variable">$cdn_dirs</span>   = str_replace(<span class="string">'-'</span>, <span class="string">'\-'</span>, <span class="variable">$cdn_dirs</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$cdn_dirs</span>) &#123;</span><br><span class="line">		<span class="variable">$regex</span>	=  <span class="string">'/'</span> . str_replace(<span class="string">'/'</span>, <span class="string">'\/'</span>, <span class="variable">$local_host</span>) . <span class="string">'\/(('</span> . <span class="variable">$cdn_dirs</span> . <span class="string">')\/[^\s\?\\\'</span>\<span class="string">"\;\&gt;\&lt;]&#123;1,&#125;.(' . <span class="variable">$cdn_exts</span> . '))([\"\\\'\s\?]&#123;1&#125;)/';</span></span><br><span class="line"><span class="string">		<span class="variable">$html</span> =  preg_replace(<span class="variable">$regex</span>, <span class="variable">$qiniu_host</span> . '/<span class="variable">$1</span><span class="variable">$4</span>', <span class="variable">$html</span>);</span></span><br><span class="line"><span class="string">	&#125; </span></span><br><span class="line"><span class="string">       else &#123;</span></span><br><span class="line"><span class="string">		<span class="variable">$regex</span>	= '/' . str_replace('/', '\/', <span class="variable">$local_host</span>) . '\/([^\s\?\\\'\"\;\&gt;\&lt;]&#123;1,&#125;.(' . <span class="variable">$cdn_exts</span> . '))([\"\\\'\s\?]&#123;1&#125;)/';</span></span><br><span class="line"><span class="string">		<span class="variable">$html</span> =  preg_replace(<span class="variable">$regex</span>, <span class="variable">$qiniu_host</span> . '/<span class="variable">$1</span><span class="variable">$3</span>', <span class="variable">$html</span>);</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	return <span class="variable">$html</span>;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>允许字体跨域,在nginx上加如下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    location ~* \.(eot|ttf|woff|svg|otf|woff2)$ &#123;</span><br><span class="line">                        add_header Access-Control-Allow-Origin *;</span><br><span class="line">                        add_header Access-Control-Allow-Headers X-Requested-With;</span><br><span class="line">                        add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br><span class="line">                &#125;</span><br><span class="line">```              </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## docker-compose.yml 参考，推荐第二种方式</span></span><br><span class="line"></span><br><span class="line">- 第一种</span><br><span class="line">```bash</span><br><span class="line">version: <span class="string">"3.2"</span></span><br><span class="line">services:</span><br><span class="line">   wordpressdb:</span><br><span class="line">     image: mysql:5.7</span><br><span class="line">     volumes:</span><br><span class="line">       - <span class="built_in">type</span>: <span class="built_in">bind</span></span><br><span class="line">         <span class="built_in">source</span>: /data/mysql</span><br><span class="line">         target: /data/mysql </span><br><span class="line">     restart: always</span><br><span class="line">     ports:</span><br><span class="line">       - <span class="string">"33060:3306"</span></span><br><span class="line">     environment:</span><br><span class="line">       MYSQL_ROOT_PASSWORD: xxxx@rootu.cn</span><br><span class="line">       MYSQL_DATABASE: wordpress</span><br><span class="line">       MYSQL_USER: wordpress</span><br><span class="line">       MYSQL_PASSWORD: xxxxxx</span><br><span class="line"></span><br><span class="line">   wordpressweb:</span><br><span class="line">     depends_on:</span><br><span class="line">       - wordpressdb</span><br><span class="line">     image: wordpress:latest</span><br><span class="line">     ports:</span><br><span class="line">       - <span class="string">"8010:80"</span></span><br><span class="line">     restart: always</span><br><span class="line">     <span class="comment">#working_dir: /var/www/officalweb</span></span><br><span class="line">     environment:</span><br><span class="line">       WORDPRESS_DB_HOST: wordpressdb:3306</span><br><span class="line">       WORDPRESS_DB_USER: wordpress</span><br><span class="line">       WORDPRESS_DB_PASSWORD: xxxxx</span><br><span class="line">     volumes:</span><br><span class="line">       - <span class="built_in">type</span> : <span class="built_in">bind</span></span><br><span class="line">         <span class="built_in">source</span>: /var/www/html </span><br><span class="line">         target : /var/www/officalweb</span><br></pre></td></tr></table></figure></p>
<ul>
<li>第二种：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">   wordpressdb:</span><br><span class="line">     image: mysql:5.7</span><br><span class="line">     volumes:       </span><br><span class="line">        - <span class="string">"/data/mysql/db:/var/lib/mysql"</span></span><br><span class="line">     restart: always</span><br><span class="line">     ports:</span><br><span class="line">       - <span class="string">"33060:3306"</span></span><br><span class="line">     environment:</span><br><span class="line">       MYSQL_ROOT_PASSWORD: xxxxxx@rootu.cn</span><br><span class="line">       MYSQL_DATABASE: wordpress</span><br><span class="line">       MYSQL_USER: wordpress</span><br><span class="line">       MYSQL_PASSWORD: xxxxx</span><br><span class="line"></span><br><span class="line">   wordpressweb:</span><br><span class="line">     depends_on:</span><br><span class="line">       - wordpressdb</span><br><span class="line">     image: wordpress:latest</span><br><span class="line">     ports:</span><br><span class="line">       - <span class="string">"8010:80"</span></span><br><span class="line">     restart: always     </span><br><span class="line">     environment:</span><br><span class="line">       WORDPRESS_DB_HOST: wordpressdb:3306</span><br><span class="line">       WORDPRESS_DB_USER: wordpress</span><br><span class="line">       WORDPRESS_DB_PASSWORD: xxxxx</span><br><span class="line">     volumes:</span><br><span class="line">        - <span class="string">"/var/www/officalweb:/var/www/html"</span></span><br><span class="line">        - <span class="string">"./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini"</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> wordpress </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在asp.net core 中使用Cachemanger、MassTransit和Foundatio分布式锁]]></title>
      <url>http://ccccccmd.rootu.cn/2018/06/09/Cachemanager-and-MassTransit-in-asp-net-core/</url>
      <content type="html"><![CDATA[<h2 id="在asp-net-core-中使用CacheManager"><a href="#在asp-net-core-中使用CacheManager" class="headerlink" title="在asp.net core 中使用CacheManager"></a>在asp.net core 中使用CacheManager</h2><ul>
<li><p>以使用reids为例：</p>
</li>
<li><p>安装以下package: <code>CacheManager.Microsoft.Extensions.Configuration</code>和<code>CacheManager.StackExchange.Redis</code> 和<code>CacheManager.Serialization.Json</code></p>
</li>
<li><p>Startup 中增加如下配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">services.AddCacheManagerConfiguration(</span><br><span class="line">          builder =&gt;</span><br><span class="line">              builder.WithJsonSerializer().WithRedisConfiguration(<span class="string">"lottery"</span>, Configuration.GetConnectionString(<span class="string">"RedisConnStr"</span>))</span><br><span class="line">                  .WithMaxRetries(100) // 尝试次数</span><br><span class="line">                  .WithRetryTimeout(100) // 尝试超时时间</span><br><span class="line">                  .WithRedisBackplane(<span class="string">"lottery"</span>) // redis 使用 Back Plate</span><br><span class="line">                  .WithRedisCacheHandle(<span class="string">"lottery"</span>, <span class="literal">true</span>)</span><br><span class="line">                  ); //redis 缓存 handle);</span><br><span class="line">services.AddCacheManager();</span><br><span class="line">services.AddSingleton&lt;ICacheProvider&gt;(provider =&gt; new CacheManagerProvider(provider.GetRequiredService&lt;ICacheManager&lt;object&gt;&gt;())</span><br><span class="line">      );</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>建议封装一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public interface ICacheProvider</span><br><span class="line"> &#123;</span><br><span class="line">       bool SetCache(string key, object value);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public class CacheManagerProvider : ICacheProvider</span><br><span class="line"> &#123;</span><br><span class="line">     private <span class="built_in">readonly</span> ICacheManager&lt;object&gt; _cacheManger;</span><br><span class="line"></span><br><span class="line">     public CacheManagerProvider(ICacheManager&lt;object&gt; cacheManager)</span><br><span class="line">     &#123;           </span><br><span class="line">         _cacheManger = cacheManager;</span><br><span class="line">     &#125;  </span><br><span class="line">         public bool SetCache(string key, object value)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">return</span> _cacheManger.AddOrUpdate(key, value, v =&gt; value) != null;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用cachemanager:</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private <span class="built_in">readonly</span> ICacheProvider _provider;</span><br><span class="line">public ValuesController(ICacheProvider provider)</span><br><span class="line">&#123;</span><br><span class="line">    _provider = provider;</span><br><span class="line">&#125;    </span><br><span class="line">_provider.SetCache(<span class="string">"aaaa"</span>, <span class="string">"hellll"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="使用asp-net-core-的redis"><a href="#使用asp-net-core-的redis" class="headerlink" title="使用asp.net core 的redis"></a>使用asp.net core 的redis</h2><ul>
<li><p>安装package <code>Microsoft.Extensions.Caching.Redis</code> </p>
</li>
<li><p>startup中做如下配置</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddDistributedRedisCache(option =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    option.Configuration = Configuration.GetConnectionString(<span class="string">"RedisConnStr"</span>);</span><br><span class="line">    option.InstanceName = <span class="string">"lottery"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>使用的时候，DI获取 <code>IDistributedCache</code>就可以了，当然了，还可以做个扩展</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static class DistributedCacheExtension</span><br><span class="line">&#123;</span><br><span class="line">    public static Task SetAsync&lt;T&gt;(this IDistributedCache cache, string key, T entity, DistributedCacheEntryOptions options, CancellationToken token)</span><br><span class="line">    &#123;</span><br><span class="line">        using (MemoryStream ms = new MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            IFormatter iFormatter = new BinaryFormatter();</span><br><span class="line">            iFormatter.Serialize(ms, entity);</span><br><span class="line">            var buff = ms.GetBuffer();</span><br><span class="line">            <span class="built_in">return</span> cache.SetAsync(key, buff, options, token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在asp-net-core-中使用MassTransit"><a href="#在asp-net-core-中使用MassTransit" class="headerlink" title="在asp.net core 中使用MassTransit"></a>在asp.net core 中使用MassTransit</h2><ul>
<li><p>安装一下package <code>MassTransit.RabbitMQ</code>和<code>MassTransit.Extensions.DependencyInjection</code></p>
</li>
<li><p>在startup中<code>ConfigureServices()</code>里做如下配置</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void RegisterBus(IServiceCollection services)</span><br><span class="line">      &#123;</span><br><span class="line">          services.AddScoped&lt;LotteryCompletedHandler&gt;();</span><br><span class="line"></span><br><span class="line">          services.AddMassTransit(x =&gt; &#123; x.AddConsumer&lt;LotteryCompletedHandler&gt;(); &#125;);</span><br><span class="line"></span><br><span class="line">          services.AddSingleton(provider =&gt; Bus.Factory.CreateUsingRabbitMq(cfg =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">              var host = cfg.Host(new Uri(Configuration[<span class="string">"Rabbitmq:Connstr"</span>]), <span class="string">"LotteryMq"</span>, h =&gt;</span><br><span class="line">              &#123;</span><br><span class="line">                  h.Username(Configuration[<span class="string">"Rabbitmq:Username"</span>]);</span><br><span class="line">                  h.Password(Configuration[<span class="string">"Rabbitmq:Pass"</span>]);</span><br><span class="line">              &#125;);</span><br><span class="line"></span><br><span class="line">              var config = provider.GetRequiredService&lt;IOptions&lt;SysConfig&gt;&gt;().Value;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (config.IsMaster)</span><br><span class="line">              &#123;</span><br><span class="line">                  cfg.ReceiveEndpoint(host, <span class="string">"lottery-completed-queue"</span>,</span><br><span class="line">                      c =&gt; &#123; c.Consumer(() =&gt; new LotteryCompletedHandler()); &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;));</span><br><span class="line">          services.AddSingleton&lt;IPublishEndpoint&gt;(provider =&gt; provider.GetRequiredService&lt;IBusControl&gt;());</span><br><span class="line">          services.AddSingleton&lt;ISendEndpointProvider&gt;(provider =&gt; provider.GetRequiredService&lt;IBusControl&gt;());</span><br><span class="line">          services.AddSingleton&lt;IBus&gt;(provider =&gt; provider.GetRequiredService&lt;IBusControl&gt;());</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>在 <code>Configure()</code>中开启bus</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void Configure(IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime,</span><br><span class="line">            IBusControl bus)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line">            app.UseMvc();</span><br><span class="line">            lifetime.ApplicationStarted.Register(() =&gt; &#123; bus.StartAsync(); &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用bus</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private <span class="built_in">readonly</span> IBus _bus;</span><br><span class="line">public ValuesController(IBus bus)</span><br><span class="line">&#123;</span><br><span class="line">    _bus = bus;</span><br><span class="line">&#125;</span><br><span class="line">var x=_bus.Publish(new <span class="function"><span class="title">LotteryCompleted</span></span>() &#123; Openid = <span class="string">"dddddd"</span> &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="aps-net-core-中使用-Foundatio-Redis分布式锁"><a href="#aps-net-core-中使用-Foundatio-Redis分布式锁" class="headerlink" title="aps.net core 中使用 Foundatio.Redis分布式锁"></a>aps.net core 中使用 Foundatio.Redis分布式锁</h2><ul>
<li><p>安装package <code>Foundatio.Redis</code></p>
</li>
<li><p>startup中配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton(sp =&gt;</span><br><span class="line">    new LockProviderInit(Configuration.GetConnectionString(<span class="string">"RedisConnStr"</span>)).InitProvider());</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化LockProvider</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class LockProviderInit</span><br><span class="line">    &#123;</span><br><span class="line">        private <span class="built_in">readonly</span> string _redisStr;</span><br><span class="line">        public LockProviderInit(string redisStr)</span><br><span class="line">        &#123;</span><br><span class="line">            _redisStr = redisStr;</span><br><span class="line">        &#125;</span><br><span class="line">        public ILockProvider InitProvider()</span><br><span class="line">        &#123;</span><br><span class="line">            var muxer = ConnectionMultiplexer.Connect(_redisStr);</span><br><span class="line">            var rediscco = new <span class="function"><span class="title">RedisCacheClientOptions</span></span>() &#123; ConnectionMultiplexer = muxer &#125;;</span><br><span class="line">            var lockProvider = new CacheLockProvider(new RedisCacheClient(rediscco), new RedisMessageBus(new <span class="function"><span class="title">RedisMessageBusOptions</span></span>() &#123; Subscriber = rediscco.ConnectionMultiplexer.GetSubscriber() &#125;));</span><br><span class="line">            <span class="built_in">return</span> lockProvider;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>封装个helper<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class LockHelper</span><br><span class="line">   &#123;</span><br><span class="line">       private <span class="built_in">readonly</span> ILockProvider _lockProvider;</span><br><span class="line"></span><br><span class="line">       public LockHelper(ILockProvider lockProvider)</span><br><span class="line">       &#123;</span><br><span class="line">           _lockProvider = lockProvider;</span><br><span class="line">       &#125;</span><br><span class="line">       public  async Task&lt;ILock&gt; AcquireAsync(string name,</span><br><span class="line">           TimeSpan? lockTimeout = null,</span><br><span class="line">           CancellationToken cancellationToken = default(CancellationToken),</span><br><span class="line">           bool continueOnCapturedContext = <span class="literal">false</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           var @lock = await _lockProvider.AcquireAsync(name, lockTimeout, cancellationToken)</span><br><span class="line">               .ConfigureAwait(continueOnCapturedContext);</span><br><span class="line">           <span class="built_in">return</span> @lock;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public  Task&lt;bool&gt; IsLockedAsync(string name)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">return</span> _lockProvider.IsLockedAsync(name);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public  Task ReleaseAsync(string name)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">return</span> _lockProvider.ReleaseAsync(name);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public  Task RenewAsync(string name, TimeSpan? lockExtension = null)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">return</span> _lockProvider.RenewAsync(name, lockExtension);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Asp.net Core </category>
            
            <category> Cachemanger </category>
            
            <category> MassTransit </category>
            
            <category> Foundatio </category>
            
            <category> 分布式锁 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Asp.net Core </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[abp core on centos]]></title>
      <url>http://ccccccmd.rootu.cn/2018/04/20/abp-on-linux/</url>
      <content type="html"><![CDATA[<h2 id="centos下安装-net-core-环境"><a href="#centos下安装-net-core-环境" class="headerlink" title="centos下安装.net core 环境"></a>centos下安装.net core 环境</h2><ul>
<li>配置环境<ul>
<li>sudo rpm -Uvh <a href="https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm" target="_blank" rel="noopener">https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm</a></li>
<li>sudo yum update</li>
<li>sudo yum install libunwind libicu</li>
<li>sudo yum install dotnet-sdk-2.1.200</li>
<li>dotnet –version</li>
</ul>
</li>
</ul>
<p><a href="https://www.microsoft.com/net/learn/get-started/linux/centos" target="_blank" rel="noopener">https://www.microsoft.com/net/learn/get-started/linux/centos</a></p>
<h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen        80;</span><br><span class="line">   <span class="comment"># server_name   example.com *.example.com;</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass         http://localhost:5000;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header   Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header   Connection keep-alive;</span><br><span class="line">        proxy_set_header   Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h2><p><code>yum install supervisor</code></p>
<ul>
<li>config</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[program:wechatapp]</span><br><span class="line"><span class="built_in">command</span>=dotnet WechatApp.Web.Mvc.dll  </span><br><span class="line">directory=/home/web/wechat </span><br><span class="line">environment=ASPNETCORE__ENVIRONMENT=Production </span><br><span class="line">user=root </span><br><span class="line">stopsignal=INT</span><br><span class="line">autostart=<span class="literal">true</span> </span><br><span class="line">autorestart=<span class="literal">true</span> </span><br><span class="line">startsecs=1 </span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/wechatapp.err.log </span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/wechatapp.out.log </span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file = /etc/supervisord.d/data/supervisor.sock</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile = /etc/supervisord.d/data/supervisord.log</span><br><span class="line">logfile_maxbytes = 50MB</span><br><span class="line">logfile_backups=10</span><br><span class="line">loglevel = info</span><br><span class="line">pidfile = /etc/supervisord.d/data/supervisord.pid</span><br><span class="line">nodaemon = <span class="literal">false</span></span><br><span class="line">minfds = 1024</span><br><span class="line">minprocs = 200</span><br><span class="line"><span class="built_in">umask</span> = 022</span><br><span class="line">user = root</span><br><span class="line">identifier = supervisor</span><br><span class="line">directory = /tmp</span><br><span class="line">nocleanup = <span class="literal">true</span></span><br><span class="line">childlogdir = /tmp</span><br><span class="line">strip_ansi = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl = unix:///etc/supervisord.d/data/supervisor.sock</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br></pre></td></tr></table></figure>
<p><code>supervisord -c /etc/supervisord.conf</code></p>
<p><code>ps -efH|grep python</code></p>
<ul>
<li>设置开机自启动</li>
</ul>
<p><code>vim /usr/lib/systemd/system/supervisord.service</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]                                                              </span><br><span class="line"> Description=supervisord - Supervisor process control system <span class="keyword">for</span> UNIX</span><br><span class="line"> Documentation=http://supervisord.org                                </span><br><span class="line"> After=network.target                                                </span><br><span class="line"> [Service]</span><br><span class="line"> User=root                                                           </span><br><span class="line"> Type=forking                                                        </span><br><span class="line"> ExecStart=/usr/bin/supervisord -c /etc/supervisord.conf             </span><br><span class="line"> ExecReload=/usr/bin/supervisorctl reload                            </span><br><span class="line"> ExecStop=/usr/bin/supervisorctl shutdown                            </span><br><span class="line"> [Install]                                                           </span><br><span class="line"> WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<ul>
<li><p>添加开机启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> supervisord</span><br><span class="line"></span><br><span class="line">systemctl start supervisord.service</span><br><span class="line"></span><br><span class="line">systemctl status supervisord.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否开机启动<br><code>systemctl is-enabled supervisord</code></p>
</li>
</ul>
<h2 id="abp-中启用session"><a href="#abp-中启用session" class="headerlink" title="abp 中启用session"></a>abp 中启用<code>session</code></h2><ul>
<li>nuget 安装 <code>Microsoft.AspNetCore.Session</code></li>
</ul>
<p><code>ConfigureService()</code> 中启用,要在add mvc之前：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">services.AddSession(config =&gt;</span><br><span class="line">   &#123;</span><br><span class="line">       config.IdleTimeout = TimeSpan.FromMinutes(30);</span><br><span class="line">       config.Cookie.HttpOnly = <span class="literal">true</span>;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   // MVC</span><br><span class="line">   services.AddMvc(</span><br><span class="line">       options =&gt; options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute())</span><br><span class="line">   );</span><br></pre></td></tr></table></figure>
<p><code>Configure()</code>中 <code>app.UseSession();</code></p>
<p>可以通过构造函数的方式 得到 <code>ISession</code>,在静态方法中可以 通过  <code>IHttpContextAccessor</code> 得方式获取到 Isession<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var http = IocManager.Instance.Resolve&lt;IHttpContextAccessor&gt;();</span><br><span class="line"><span class="built_in">return</span> http.HttpContext.Session.Get&lt;WxFans&gt;(sessionkey);</span><br></pre></td></tr></table></figure></p>
<h2 id="abp中使用mysql"><a href="#abp中使用mysql" class="headerlink" title="abp中使用mysql"></a>abp中使用mysql</h2><ul>
<li><p>MySQL驱动：<code>Pomelo.EntityFrameworkCore.MySql</code> 可以成功映射 guid</p>
</li>
<li><p><a href="https://dev.mysql.com/downloads/windows/visualstudio/" target="_blank" rel="noopener">mysql db first  VS</a></p>
</li>
<li><p><a href="https://blog.csdn.net/cainong2005/article/details/79626550" target="_blank" rel="noopener">mysql 闪退</a></p>
</li>
<li><p>生成迁移脚本 </p>
<ul>
<li>Enable-Migrations </li>
<li>Add-Migrations  </li>
<li>Script-Migration</li>
</ul>
</li>
</ul>
<h2 id="关于id-返回-2147482647-的问题"><a href="#关于id-返回-2147482647-的问题" class="headerlink" title="关于id 返回 -2147482647 的问题"></a>关于id 返回 -2147482647 的问题</h2><p><a href="https://github.com/aspnet/EntityFrameworkCore/issues/10167" target="_blank" rel="noopener">issues/10167</a><br><a href="https://github.com/aspnet/EntityFrameworkCore/issues/6147" target="_blank" rel="noopener">issues/6147</a><br><a href="https://github.com/aspnetboilerplate/aspnet-core-template/issues/5" target="_blank" rel="noopener">土牛的办法</a></p>
]]></content>
      
        <categories>
            
            <category> ABP </category>
            
            <category> Asp.net Core </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ABP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Asp.net core on IIS]]></title>
      <url>http://ccccccmd.rootu.cn/2018/04/14/iis-net-core/</url>
      <content type="html"><![CDATA[<ol>
<li><p>在<a href="https://www.microsoft.com/net/download/Windows/run" target="_blank" rel="noopener">这里</a> 下载安装<code>.net core runtime</code> 和 <code>asp.net core runtime</code> </p>
</li>
<li><p>在<a href="https://www.microsoft.com/net/download/dotnet-core/runtime-2.0.6" target="_blank" rel="noopener">这里</a>下载安装<code>Hosting Bundle Installer</code></p>
</li>
<li><p>cmd执行 <code>net stop was /y</code>，然后从命令提示符处启动<code>net start w3svc</code>。重新启动IIS会对安装程序所做的系统PATH进行更改。</p>
</li>
<li><p>发布好你的aps.net core 站点，程序池选择无托管代码</p>
</li>
<li><p>如果网站没有运行起来，修改web.config，<code>stdoutLogEnabled=&quot;false&quot;</code>把日志打开,里面会有些日志</p>
</li>
<li><p>Mvc.ExceptionHandling.AbpExceptionFilter - ‘OFFSET’ 附近有语法错误。<br>在 FETCH 语句中选项 NEXT 的用法无效。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void Configure(DbContextOptionsBuilder&lt;RedEnvelopesManagementDbContext&gt; builder, string connectionString)</span><br><span class="line">       &#123;</span><br><span class="line">           builder.UseSqlServer(connectionString, b =&gt; b.UseRowNumberForPaging());</span><br><span class="line">          // builder.UseSqlServer(connectionString);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> IIS </category>
            
            <category> Asp.net Core </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IIS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[await和async]]></title>
      <url>http://ccccccmd.rootu.cn/2018/04/07/await-and-async/</url>
      <content type="html"><![CDATA[<p><code>await</code>和<code>async</code>很令人头大，感觉会了，但是用来还没底，到底有没有新线程创建，什么时<code>IO</code>绑定什么事<code>CPU</code>绑定，什么时候用<code>async</code>，为什么现在的controller里都是<code>async</code>,什么时候会造成上下文被死锁？</p>
<p>越探究越没底，说法乱的不行，还很会误导人，msdn也模棱两可的</p>
<p>下面是一些比较靠谱的，也许看完之后，你可以重新认识async</p>
<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/async" target="_blank" rel="noopener">msdn</a></p>
<p>By default, tasks execute on the current thread and delegate work to the Operating System, as appropriate</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public async Task&lt;string&gt; GetFirstCharactersCountAsync(string url, int count)</span><br><span class="line">&#123;</span><br><span class="line">    // Execution is synchronous here</span><br><span class="line">    var client = new HttpClient();</span><br><span class="line"></span><br><span class="line">    // Execution of GetFirstCharactersCountAsync() is yielded to the <span class="built_in">caller</span> here</span><br><span class="line">    // GetStringAsync returns a Task&lt;string&gt;, <span class="built_in">which</span> is *awaited*</span><br><span class="line">    var page = await client.GetStringAsync(<span class="string">"http://www.dotnetfoundation.org"</span>);</span><br><span class="line"></span><br><span class="line">    // Execution resumes when the client.GetStringAsync task completes,</span><br><span class="line">    // becoming synchronous again.</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt; page.Length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> page.Substring(0, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的第二个例子中，一个任务对象将从GetStringAsync返回。<br>等待关键字的使用使方法返回一个新创建的任务对象。<br>在getfirstStringscountasync方法中，控制从这个位置返回给调用者。<br>任务对象的方法和属性使调用者能够监视任务的进度，当getfirstStringscountasync中的剩余代码执行时，该任务将完成。<br>在系统API调用之后，请求现在在内核空间中，进入到操作系统的网络子系统（例如Linux内核中的/net）。<br>在这里，操作系统将异步处理网络请求。<br>细节可能会有所不同取决于所使用的操作系统(设备驱动程序调用可以将一个信号发送回运行时,或者一个设备驱动程序调用了然后一个信号发回),但最终运行时将正在进行的网络请求。<br>在这个时候，设备驱动程序的工作要么是计划的，要么是正在进行的，要么已经完成了（请求已经在“通过”了）——但是因为这一切都是异步发生的，所以设备驱动程序能够立即处理其他的事情！<br>例如，在Windows中，操作系统线程对网络设备驱动程序进行调用，并要求它通过代表操作的中断请求数据包（IRP）执行网络操作。<br>设备驱动程序接收IRP，对网络进行调用，将IRP标记为“未决”，并返回到操作系统。<br>因为操作系统线程现在知道IRP是“未决的”，所以它没有更多的工作要做这个工作，并且“返回”，这样它就可以用来执行其他的工作了。<br>当请求被满足，数据通过设备驱动程序返回时，它会通知CPU通过中断接收到的新数据。<br>如何处理这个中断将随操作系统,但最终数据将通过操作系统,直到达到电话系统互操作(例如,在Linux中一个中断处理程序将安排IRQ的下半部分通过数据通过异步操作系统)。<br>注意，这也是异步发生的！<br>结果将排队等候，直到下一个可用线程能够执行async方法并“解开”完成任务的结果。<br>在整个过程中，一个关键的要点是没有专门用于运行这项任务的线程。<br>尽管工作是在某些上下文中执行的（也就是说，操作系统必须将数据传递给设备驱动程序并对中断作出响应），但是没有专门的线程来等待来自请求的数据返回。<br>这使得系统能够处理更大的工作量，而不是等待一些输入/输出调用完成。</p>
<p>更重要的是，因为i/o绑定的工作几乎没有在CPU上花费时间，所以将整个CPU线程用于执行几乎没有任何有用的工作将是对资源的糟糕使用。</p>
<p><a href="https://www.zhihu.com/question/30601778/answer/48749326" target="_blank" rel="noopener">作者：王迅</a><br>async、迭代器都是语法糖，编译器会帮你实现成一个状态机匿名类，实例里面hold住一些临时变量，记录一下当前状态。根据你写的yield/await，把一个异步方法拆成几个同步block，根据一定规则定期的去MoveNext一下，Current是Task那我就根据你配置的线程上下文决定把这个Task跑在哪个线程上。</p>
<p>回过头来看我们讲的主题：异步编程。在学习使用async/await的时候，很多文档包括msdn都刻意提到async/await关键字不会创建新的线程，用async关键字写的函数中的代码都在调用线程中执行。这里是最容易混淆的地方，严格意义上这个说法不准确，异步编程必然是多线程的。msdn文档里提到的不会创建新线程是指async函数本身不会直接在新线程中运行。通过上面的分析，我们知道本质上是await调用的异步函数执行完成后回调状态机的MoveNext来执行余下未执行完成的代码，await调用的异步函数必然在某个地方——也许是嵌套了很深的一个地方——启动了一个新的工作线程来完成导致我们要使用异步调用的耗时比较长的工作，比如网络内容读取。</p>
<p><a href="https://www.zhihu.com/question/30601778/answer/48717575" target="_blank" rel="noopener">作者：贾纯</a></p>
<p>来源：知乎</p>
<p>异步并非必然是多线程的，譬如 yield 。</p>
<p>我举个例子，我显示一串文字，等用户按一下按钮再显示下一串，在第一次显示文字跟用户按下按钮之间，可以做很多事情，这里就是异步的，但不是多线程的。</p>
<p>有没有办法把两次显示字符串的操作，写在同一个函数里？可以，最简单的方法就是用yield。按钮按下去时候就调用IEnumerator.MoveNext()</p>
<p>await 本身也不会创造线程，导致出现线程的是后面的那个执行Task 的函数。Task 概念上也不是多线程的，它只是把任务放到了线程池，但是如果任务还没执行，马上需求结果，它就会在当前线程执行，而非在另一个线程来执行。<br>所以异步和多线程之间，概念是要分清楚的。</p>
<p>另外，在F#里面，会有更多的异步模型，只是C#里暂时只能使用Task这个自动挡，让人模糊了概念，只差了一个转身。</p>
<p><a href="https://www.zhihu.com/question/30601778/answer/66431986" target="_blank" rel="noopener">作者：油面筋塞肉</a></p>
<p>来源：知乎</p>
<p>你首先要知道async await这是一个基于Task的异步 尽量不阻塞当前线程，内部是否占用线程是不确定的（取决于内部实现使用的异步方式），当然从约定来说用await去等待的方法内部一定有IO异步，而有用到await方法的本生一定有async标识，也就是不占用任何线程的无阻塞等待。意思就是不阻塞任何线程的等待执行结束，当然不需要开线程了。核心思想就是用了async await 以后，代码和同步的代码非常相似，代码结构，异常处理等都比以往异步便捷的多，因为几乎和同步一样。基本用法就是方法上加上async ，然后调用TAP版本通常以Async结尾的方法，然后用await去等待他。这个方法其实就是个基于Task异步写的，这个方法内部可能是对AMP异步模型进行了一次封装。此语法糖的主要目的还是为了让你不要写同步代码，让他很简单的就改成IO异步的代码。 他在什么时候开始异步呢？ （以AMP异步模型来说）其实是在Async结尾的方法内部调用Begin异步时才开始异步，在此之前还是同步执行的。所以他能让GUI程序大幅度减少阻塞，但不是最大可能减少阻塞。初级用法就是按同步的代码写，顺便加上async await 改成调用Async结尾的方法，减少线程阻塞，最适合web这种多请求并发的情况。进阶点就是可以多个异步并发，等待他们同时完成。再高阶点就是配合高级的同步写法，无CPU阻塞的完成异步中的同步操作，这个就最好自己多研究了，大部分情况用不到，需要大量的异步以及同步知识。</p>
<hr>
<p><a href="https://www.zhihu.com/question/30601778/answer/48717630" target="_blank" rel="noopener">作者：Ivony</a></p>
<p>await修饰的方法返回的是一个Task，而这个Task其实就是一个异步句柄，如果我来取名字的话多半就叫做IAsyncHandler。一个IAsyncHandler你可以想象成是这么一个东西：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface IAsyncHandler</span><br><span class="line">&#123;</span><br><span class="line">  Register( Action continuation );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是伪代码，事实上不存在这么个东西。注册一个回调方法在异步操作完成后继续，所以事实上这段代码的原理像是这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private async void btnDoStuff_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">  btnDoStuff.IsEnabled = <span class="literal">false</span>;</span><br><span class="line">  lblStatus.Content = <span class="string">"Doing Stuff"</span>;</span><br><span class="line"></span><br><span class="line">  var handler = Task.Delay(4000) as IAsyncHandler</span><br><span class="line">  handler.Register( () =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    lblStatus.Content = <span class="string">"Not Doing Anything"</span>;</span><br><span class="line">    btnDoStuff.IsEnabled = <span class="literal">true</span>;</span><br><span class="line">  &#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然上面全是伪代码，但是如果你能看懂这段代码在干什么，那么async基本就可以懂了，剩下的只是一些实现细节上的问题。通常情况下，Task.Delay会立即返回一个Task对象，这个Task对象会在指定时间之后被标记为Completed，而被标记Completed就会立即开一个线程来进行延续的操作。但是这里有个问题就是你这个方法是写在UI线程里面的，控件的事件会被UI线程触发，而UI线程上有个SynchronizationContext对象，这个对象的存在就会使得系统在异步回调的时候去捕获源线程。在原来的线程（UI线程）去执行延续的任务。而我们知道WinForm里面有个方法叫做Control.Invoke，可以把一个方法封送到UI线程去执行，而上面的工作和这个方法底层的原理其实是一样的，所以，其实这段代码用传统的思维来理解的话像是这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private async void btnDoStuff_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">  btnDoStuff.IsEnabled = <span class="literal">false</span>;</span><br><span class="line">  lblStatus.Content = <span class="string">"Doing Stuff"</span>;</span><br><span class="line"></span><br><span class="line">  Action continuation = () =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    lblStatus.Content = <span class="string">"Not Doing Anything"</span>;</span><br><span class="line">    btnDoStuff.IsEnabled = <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Thread.Start( () =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    Thread.Sleep( 4000 );</span><br><span class="line">    Control.Invoke( continuation );</span><br><span class="line">  &#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>回调（callback）/后继（continuation）会被注入回UI线程。</p>
<p>非同步上下文的情况也不一定是新线程，而是线程池随机。</p>
<p>一切取决于调用那个await的线程有没有synchronization context，有的话默认就会切回该线程（比如UI线程就有），没有的话系统开一个新线程。你也可以强行改变该行为，调用Task.ConfigureAwait(false)</p>
<p><a href="">轮子哥</a><br>因为btnDoStuff_Click函数在await刚开始执行的那一刻就已经返回了。await后面的代码是这些事情做完了之后，重新射进GUI线程里面跑的。</p>
<p>为什么开一个异步Task之后, 从任务管理器看进程的线程数增加了1呢, 说好的异步不会开新线程呢</p>
<p>说的是异步【可以做到】不浪费线程来等待锁，不是异步绝对不会开线程。如果你所有的一部操作都是异步IO，而不是你自己写的Task的话，那的确是有可能不需要开线程的。</p>
<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/async" target="_blank" rel="noopener">msdn</a></p>
<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth" target="_blank" rel="noopener">async-in-depth</a></p>
<p><a href="https://www.zhihu.com/question/30601778" target="_blank" rel="noopener">zhihu</a></p>
<p><a href="https://www.zhihu.com/question/56651792" target="_blank" rel="noopener">zhihu</a></p>
<p><a href="https://blog.csdn.net/dyllove98/article/details/9371839" target="_blank" rel="noopener">Async和Await异步编程的原理</a></p>
]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> async </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EF中的批量插入]]></title>
      <url>http://ccccccmd.rootu.cn/2018/04/06/EFBulkInsert/</url>
      <content type="html"><![CDATA[<p>EF中AddRange方法是批量插入集合，但是该方法最终生成N条insert语句，大批量插入的时候，很慢。<br>我封装了一个类，用<code>SqlBulkCopy</code>完成集合的插入</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">namespace AOWEN.BLL</span><br><span class="line">&#123;</span><br><span class="line">    public class BaseBll&lt;T&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 批量插入</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=<span class="string">"list"</span>&gt;&lt;/param&gt;</span><br><span class="line">        public void BulkAdd(List&lt;T&gt; list)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!list.Any())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            var dt = GetTableSchema(list);</span><br><span class="line">            BulkToDB(dt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void BulkToDB(DataTable dt)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            var l = typeof(LogRun);</span><br><span class="line">            var attr = l.GetCustomAttribute(typeof(TableAttribute), <span class="literal">false</span>);</span><br><span class="line">            var tablename = ((TableAttribute)attr).Name;</span><br><span class="line">            var connstr = ConfigurationManager.ConnectionStrings[<span class="string">"DefaultConnection"</span>].ConnectionString;</span><br><span class="line">            using (SqlConnection sqlConn = new SqlConnection(connstr))</span><br><span class="line">            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(sqlConn))</span><br><span class="line">            &#123;</span><br><span class="line">                bulkCopy.DestinationTableName = tablename;</span><br><span class="line">                bulkCopy.BatchSize = dt.Rows.Count;</span><br><span class="line">                sqlConn.Open();</span><br><span class="line">                bulkCopy.BulkCopyTimeout = 600;</span><br><span class="line">                <span class="keyword">for</span> (int i = 0; i &lt; dt.Columns.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    bulkCopy.ColumnMappings.Add(dt.Columns[i].ColumnName, dt.Columns[i].ColumnName);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bulkCopy.WriteToServer(dt);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        private void SetColumns(Type <span class="built_in">type</span>, DataTable dt)</span><br><span class="line">        &#123;</span><br><span class="line">            var fields = type.GetProperties();</span><br><span class="line">            foreach (var f <span class="keyword">in</span> fields)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (f.GetCustomAttributes(typeof(ForeignKeyAttribute), <span class="literal">false</span>).Any())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dt.Columns.Add(f.Name, f.PropertyType);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private DataTable GetTableSchema(List&lt;T&gt; list)</span><br><span class="line">        &#123;</span><br><span class="line">            DataTable dt = new DataTable();</span><br><span class="line"></span><br><span class="line">            var <span class="built_in">type</span> = typeof(T);</span><br><span class="line">            SetColumns(<span class="built_in">type</span>, dt);</span><br><span class="line">            var fields = type.GetProperties();</span><br><span class="line">            foreach (var l <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                var row = dt.NewRow();</span><br><span class="line">                foreach (var f <span class="keyword">in</span> fields)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (f.GetCustomAttributes(typeof(ForeignKeyAttribute), <span class="literal">false</span>).Any())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    row[f.Name] = f.GetValue(l);</span><br><span class="line">                &#125;</span><br><span class="line">                dt.Rows.Add(row);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> dt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> EntityFramework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> EF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb]]></title>
      <url>http://ccccccmd.rootu.cn/2018/04/06/mongodb/</url>
      <content type="html"><![CDATA[<p>本文将介绍 C#下操作mongodb.它的安装我会在docker的那篇中描述。</p>
<p><code>mongodb</code>安装好后，最后有一个图形话的客户端，这里向大家推荐 <a href="https://studio3t.com" target="_blank" rel="noopener">studio3t</a> 的两款客户端，进去下载安装就好，非常优秀。</p>
<p>nuget 安装好mongodb的官方驱动，接下来，就是api的封装了，我这里仅写了我本次项目中用到的api<br><a id="more"></a></p>
<h3 id="mongodb的上下文："><a href="#mongodb的上下文：" class="headerlink" title="mongodb的上下文："></a>mongodb的上下文：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MongoContext</span><br><span class="line">  &#123;</span><br><span class="line">      private static <span class="built_in">readonly</span> string MongoConStr = ConfigurationManager.AppSettings[<span class="string">"mongodbconstr"</span>];</span><br><span class="line">      public static IMongoClient MongoClient</span><br><span class="line">      &#123;</span><br><span class="line">          get</span><br><span class="line">          &#123;</span><br><span class="line">              var client = System.Runtime.Remoting.Messaging.CallContext.GetData(<span class="string">"MongoContext"</span>) as IMongoClient;</span><br><span class="line">              <span class="keyword">if</span> (client == null)</span><br><span class="line">              &#123;</span><br><span class="line">                  client = new MongoClient(MongoConStr);</span><br><span class="line">                  System.Runtime.Remoting.Messaging.CallContext.SetData(<span class="string">"MongoContext"</span>, client);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="built_in">return</span> client;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个base仓储"><a href="#定义一个base仓储" class="headerlink" title="定义一个base仓储"></a>定义一个base仓储</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public class BaseRepository&lt;T&gt; <span class="built_in">where</span> T : class</span><br><span class="line">  &#123;</span><br><span class="line">      protected <span class="built_in">readonly</span> IMongoCollection&lt;T&gt; _collection;</span><br><span class="line"></span><br><span class="line">      protected <span class="built_in">readonly</span> IMongoDatabase _database;</span><br><span class="line"></span><br><span class="line">      protected <span class="built_in">readonly</span> string _collectionName;</span><br><span class="line"></span><br><span class="line">      protected <span class="built_in">readonly</span> string _databaseName;</span><br><span class="line">      public BaseRepository(string collectionName, string databaseName)</span><br><span class="line">      &#123;</span><br><span class="line">          _databaseName = databaseName;</span><br><span class="line">          _collectionName = collectionName;</span><br><span class="line">          _database = MongoContext.MongoClient.GetDatabase(databaseName);</span><br><span class="line">          _collection = _database.GetCollection&lt;T&gt;(collectionName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// 批量插入</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;param name=<span class="string">"list"</span>&gt;&lt;/param&gt;</span><br><span class="line">      /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">      public async Task InsertMany(IList&lt;T&gt; list)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          await _collection.InsertManyAsync(list);</span><br><span class="line">      &#125;</span><br><span class="line">      public async Task DropCollection()</span><br><span class="line">      &#123;</span><br><span class="line">          var exists = await CollectionExists(_collectionName);</span><br><span class="line">          <span class="keyword">if</span> (exists)</span><br><span class="line">          &#123;</span><br><span class="line">              await _database.DropCollectionAsync(_collectionName);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      private async Task&lt;bool&gt; CollectionExists(string collectionName)</span><br><span class="line">      &#123;</span><br><span class="line">          var options = new ListCollectionsOptions</span><br><span class="line">          &#123;</span><br><span class="line">              Filter = Builders&lt;BsonDocument&gt;.Filter.Eq(<span class="string">"name"</span>, collectionName)</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          var l = await _database.ListCollectionsAsync(options);</span><br><span class="line">          <span class="built_in">return</span> l.ToEnumerable().Any();</span><br><span class="line">      &#125;</span><br><span class="line">      public async Task&lt;string&gt; CreateIndex(string key)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">return</span> await _collection.Indexes.CreateOneAsync(key);</span><br><span class="line">      &#125;</span><br><span class="line">      public async Task&lt;List&lt;T&gt;&gt; Find(string query)</span><br><span class="line">      &#123;</span><br><span class="line">          BsonDocument myfilter = BsonDocument.Parse(query);</span><br><span class="line">          <span class="built_in">return</span> await _collection.FindSync(myfilter).ToListAsync();</span><br><span class="line">      &#125;</span><br><span class="line">      public async Task&lt;long&gt; GetCount(string query)</span><br><span class="line">      &#123;</span><br><span class="line">          BsonDocument myfilter = BsonDocument.Parse(query);</span><br><span class="line">          <span class="built_in">return</span> await _collection.CountAsync(myfilter);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="集合的私有方法实现"><a href="#集合的私有方法实现" class="headerlink" title="集合的私有方法实现"></a>集合的私有方法实现</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class TGCustomerAttrCollection : BaseRepository&lt;TGCustomerAttrDto&gt;</span><br><span class="line"> &#123;</span><br><span class="line">     public TGCustomerAttrCollection() : base(<span class="string">"TGCustomerAttr"</span>, <span class="string">"sandbox"</span>)</span><br><span class="line">     &#123;</span><br><span class="line">     &#125;</span><br><span class="line">     /// &lt;summary&gt;</span><br><span class="line">     /// 获得匹配规则的openids集合</span><br><span class="line">     /// &lt;/summary&gt;</span><br><span class="line">     /// &lt;param name=<span class="string">"query"</span>&gt;&lt;/param&gt;</span><br><span class="line">     /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">     public async Task&lt;List&lt;string&gt;&gt; GetMatchedOpenids(string query)</span><br><span class="line">     &#123;</span><br><span class="line">         BsonDocument myfilter = BsonDocument.Parse(query);</span><br><span class="line">         var x = await _collection.FindSync(myfilter).ToListAsync();</span><br><span class="line">         <span class="built_in">return</span> x.Select(c =&gt; c.OpenId).ToList();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="执行调用"><a href="#执行调用" class="headerlink" title="执行调用"></a>执行调用</h3><pre><code class="bash">public List&lt;string&gt; GetMatchedOpenids(string rules)
{
    TGCustomerAttrCollection conCollection = new TGCustomerAttrCollection();
    var mongoQuery = CalculateRules(rules);
    <span class="built_in">return</span> conCollection.GetMatchedOpenids(mongoQuery).Result;
}
</code></pre>
<p>也可以参考这个<a href="https://github.com/girlw/MongoDBHelper/blob/master/MongoDbHelper/MongoDBHelper.cs" target="_blank" rel="noopener">helper</a></p>
]]></content>
      
        <categories>
            
            <category> mongodb </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hangfire]]></title>
      <url>http://ccccccmd.rootu.cn/2018/04/06/hangfire/</url>
      <content type="html"><![CDATA[<p>web 中有很多大大小小的任务，好多都是定时触发的，调度起来很烦，这时候，迫切需要一个任务调度框架去处理这个事情，不然，每次都要写一大堆的task去判断时间跑那段代码。</p>
<p><code>hangfire</code>和之前说过的<code>quartz.net</code>都是很优秀的调度框架，不过hangfire自己带了一个dashboard,它和quartz相比，不能进行秒级别的任务调度。</p>
<p>我的web业务中，没有秒级的限制，这次我选择了hangfire来做任务调度。</p>
<p>根据作业的不同，你可以用redis，sqlserver，mongo等做它的持久化，具体参考<a href="https://www.hangfire.io/extensions.html#storages" target="_blank" rel="noopener">这里</a>.</p>
<a id="more"></a>
<p>用法很简单，nuget装好对应的包。我这里采用sqlserver做其storage,在startup中启用 hangfire</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void Configuration(IAppBuilder app)</span><br><span class="line">       &#123;          </span><br><span class="line">               GlobalConfiguration.Configuration.UseSqlServerStorage(<span class="string">"DefaultConnection"</span>);</span><br><span class="line">               app.UseHangfireDashboard(<span class="string">"/hangfire"</span>);</span><br><span class="line">               app.UseHangfireServer();      </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>web启动后，会在数据库中建好它需要的表。</p>
<p>你可以给hangfire添加一次性任务<br><code>BackgroundJob.Enqueue(() =&gt; Console.WriteLine(&quot;Hello, world!&quot;));</code></p>
<p>延迟执行的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BackgroundJob.Schedule(</span><br><span class="line">    () =&gt; Console.WriteLine(<span class="string">"Hello, world"</span>),</span><br><span class="line">    TimeSpan.FromDays(1));</span><br></pre></td></tr></table></figure></p>
<p>还有循环调度的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RecurringJob.AddOrUpdate(() =&gt; JobManager.SendReportEmail(), Cron.Daily(6), TimeZoneInfo.Local);</span><br><span class="line"></span><br><span class="line">RecurringJob.AddOrUpdate(() =&gt; JobManager.SendTempMsgInQue(), <span class="string">"*/5 9-22 * * *"</span>, TimeZoneInfo.Local);</span><br></pre></td></tr></table></figure></p>
<p>当然了，你可以用<code>DisplayName</code>这个属性定义任务的名字<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[DisplayName(<span class="string">"报告"</span>)]</span><br><span class="line">public static void SendReportEmail()</span><br><span class="line">&#123;</span><br><span class="line">    EmailRemind er = new EmailRemind();</span><br><span class="line">    er.ReportEmailTask();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是，有没有方法避免循环任务中重复被执行呢?<a href="https://github.com/HangfireIO/Hangfire/issues/1040" target="_blank" rel="noopener">这里</a>有相关的讨论。<br>以下是给出的一种解决方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[DisableConcurrentExecution(70)]</span><br><span class="line">[AutomaticRetry(Attempts = 0, LogEvents = <span class="literal">false</span>, OnAttemptsExceeded = AttemptsExceededAction.Delete)]</span><br><span class="line">public static void Test(string method)</span><br><span class="line">&#123;</span><br><span class="line">    some code costs much more time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>还有一种方式是直接在hangfire的表中查询任务的情况</p>
<h3 id="用hangfire-完成批量处理任务"><a href="#用hangfire-完成批量处理任务" class="headerlink" title="用hangfire 完成批量处理任务"></a>用hangfire 完成批量处理任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class TaskHelper</span><br><span class="line">  &#123;</span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// 分块执行任务</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;typeparam name=<span class="string">"T"</span>&gt;&lt;/typeparam&gt;</span><br><span class="line">      /// &lt;param name=<span class="string">"list"</span>&gt;&lt;/param&gt;</span><br><span class="line">      /// &lt;param name=<span class="string">"action"</span>&gt;&lt;/param&gt;</span><br><span class="line">      /// &lt;param name=<span class="string">"workerNum"</span>&gt;&lt;/param&gt;</span><br><span class="line"></span><br><span class="line">      public static void Start&lt;T&gt;(List&lt;T&gt; list, Action&lt;List&lt;T&gt;&gt; action, int workerNum)</span><br><span class="line">      &#123;</span><br><span class="line">          var listnum = list.Count;</span><br><span class="line">          int parts = (int)Math.Ceiling(listnum * 1.0 / workerNum);</span><br><span class="line">          var num = 0;</span><br><span class="line">          <span class="keyword">while</span> (num &lt; listnum)</span><br><span class="line">          &#123;</span><br><span class="line">              var tmplist = list.Skip(num).Take(parts).ToList();</span><br><span class="line">              BackgroundJob.Enqueue(() =&gt; action.Invoke(tmplist));</span><br><span class="line">              num += tmplist.Count;</span><br><span class="line">              Thread.Sleep(50);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hangfire </tag>
            
            <tag> 任务调度 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式锁Foundatio.Lock]]></title>
      <url>http://ccccccmd.rootu.cn/2018/04/06/distributed-lock/</url>
      <content type="html"><![CDATA[<p>Web 项目，部署了集群之后，缓存可以通过redis实现共享，但单机lock就出问题了。</p>
<p>实现分布式锁，有好几种途径，还要考虑死锁，重入等各种问题，</p>
<p>一种是通过数据库实现，好处很明显，处理控制由数据库完成，代码无需调整。但是，数据库要单点，并且会给数据库造成性能瓶颈</p>
<p>一种是通过redis memcached缓存实现，如<a href="https://github.com/samcook/RedLock.net" target="_blank" rel="noopener">RedLock</a>,本次也是要介绍基于redis实现的分布式锁</p>
<p>还有一种是通过 <code>consul</code>  <code>zookeeper</code>实现的分布式锁。</p>
<p>各有优略，具体分析可以看<a href="https://toutiao.io/posts/7d0q4t" target="_blank" rel="noopener">这里</a></p>
<p>这次的一个场景是摇一摇抽奖，我用的是<a href="https://github.com/FoundatioFx/Foundatio" target="_blank" rel="noopener">Foundatio</a>的lock组件，Foundatio 是一个非常优秀的分布式框架.</p>
<p>Nuget 安装好 Foundatio 和 Foundatio.Lock ,部署好redis;<br><a id="more"></a></p>
<h3 id="第一步要拿到-lockprovider-单例的形式注入到容器中"><a href="#第一步要拿到-lockprovider-单例的形式注入到容器中" class="headerlink" title="第一步要拿到 lockprovider , 单例的形式注入到容器中"></a>第一步要拿到 lockprovider , 单例的形式注入到容器中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class LockProviderInitHelper</span><br><span class="line">&#123;</span><br><span class="line">    private static <span class="built_in">readonly</span> string Reidsip = ConfigurationManager.AppSettings[<span class="string">"redis"</span>];</span><br><span class="line">    private static <span class="built_in">readonly</span> string RedisPass = ConfigurationManager.AppSettings[<span class="string">"redispass"</span>];</span><br><span class="line">    public static ILockProvider InitProvider()</span><br><span class="line">    &#123;</span><br><span class="line">        var muxer = ConnectionMultiplexer.Connect(new ConfigurationOptions()</span><br><span class="line">        &#123;</span><br><span class="line">            Password = RedisPass,</span><br><span class="line">            EndPoints =</span><br><span class="line">            &#123;</span><br><span class="line">                &#123; Reidsip, 6379 &#125;,</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            DefaultDatabase = 2</span><br><span class="line">        &#125;);</span><br><span class="line">        var rediscco = new <span class="function"><span class="title">RedisCacheClientOptions</span></span>() &#123; ConnectionMultiplexer = muxer &#125;;</span><br><span class="line">        var lockProvider = new CacheLockProvider(new RedisCacheClient(rediscco), new RedisMessageBus(new <span class="function"><span class="title">RedisMessageBusOptions</span></span>() &#123; Subscriber = rediscco.ConnectionMultiplexer.GetSubscriber() &#125;));</span><br><span class="line">        <span class="built_in">return</span> lockProvider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   private static void RegisterLockProvider(ContainerBuilder cb)</span><br><span class="line">    &#123;</span><br><span class="line">        cb.RegisterInstance(LockProviderInitHelper.InitProvider()).As&lt;ILockProvider&gt;().SingleInstance();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="封装一个-lockhelper里面有加锁，释放锁，重置锁的方法。"><a href="#封装一个-lockhelper里面有加锁，释放锁，重置锁的方法。" class="headerlink" title="封装一个 lockhelper里面有加锁，释放锁，重置锁的方法。"></a>封装一个 lockhelper里面有加锁，释放锁，重置锁的方法。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class LockHelper</span><br><span class="line">  &#123;</span><br><span class="line">      private static  ILockProvider LockProvider =&gt; IocHelper.Resolve&lt;ILockProvider&gt;();</span><br><span class="line">      public static async Task&lt;ILock&gt; AcquireAsync(string name,</span><br><span class="line">          TimeSpan? lockTimeout = null,</span><br><span class="line">          CancellationToken cancellationToken = default(CancellationToken),</span><br><span class="line">          bool continueOnCapturedContext = <span class="literal">false</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          var @lock = await LockProvider.AcquireAsync(name, lockTimeout, cancellationToken)</span><br><span class="line">              .ConfigureAwait(continueOnCapturedContext);</span><br><span class="line">          <span class="built_in">return</span> @lock;</span><br><span class="line">      &#125;</span><br><span class="line">      public static Task&lt;bool&gt; IsLockedAsync(string name)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">return</span> LockProvider.IsLockedAsync(name);</span><br><span class="line">      &#125;</span><br><span class="line">      public static Task ReleaseAsync(string name)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">return</span> LockProvider.ReleaseAsync(name);</span><br><span class="line">      &#125;</span><br><span class="line">      public static Task RenewAsync(string name, TimeSpan? lockExtension = null)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">return</span> LockProvider.RenewAsync(name, lockExtension);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用-根据情况指定超时时间"><a href="#使用-根据情况指定超时时间" class="headerlink" title="使用,根据情况指定超时时间"></a>使用,根据情况指定超时时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string key = <span class="string">"dislock_key"</span>;</span><br><span class="line">var l = LockHelper.AcquireAsync(key, TimeSpan.FromSeconds(5)).Result;</span><br><span class="line">try&#123;</span><br><span class="line">    ...some code</span><br><span class="line">  l.ReleaseAsync();</span><br><span class="line">&#125;</span><br><span class="line">catch&#123;</span><br><span class="line">  l.ReleaseAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用下来，简单可靠，自动超时，不用担心死锁。</p>
]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> distributed lock </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用消息总线 masstransit]]></title>
      <url>http://ccccccmd.rootu.cn/2018/04/06/cqrs/</url>
      <content type="html"><![CDATA[<p>本文将介绍消息总线 <a href="http://masstransit-project.com/MassTransit/quickstart.html" target="_blank" rel="noopener">masstransit</a> 的具体使用</p>
<p><code>消息总线</code>和<code>Cqrs</code>，<code>DDD</code>总是出现在各种架构文章中，Cqrs的处理模式确实能帮助我们解决很多问题，并发场景，分步任务等等。</p>
<p>masstransit 是一款轻量级的消息总线，结合<code>rabbitmq</code>实现<code>message</code>的持久化。</p>
<p>但是有一点，他是异步consumer，能保证同一queue里的消息被顺序消费，但是不能保证他们顺序的被执行完。</p>
<a id="more"></a>
<h3 id="它的使用很简单，配置好mq，定义好consumer"><a href="#它的使用很简单，配置好mq，定义好consumer" class="headerlink" title="它的使用很简单，配置好mq，定义好consumer"></a>它的使用很简单，配置好mq，定义好consumer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">    /// 注入bus</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=<span class="string">"builder"</span>&gt;&lt;/param&gt;</span><br><span class="line">    public static void RegisterBus(ContainerBuilder builder)</span><br><span class="line">    &#123;</span><br><span class="line">        builder.RegisterConsumers(Assembly.GetExecutingAssembly());</span><br><span class="line"></span><br><span class="line">        builder.Register(context =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                var busControl = Bus.Factory.CreateUsingRabbitMq(cfg =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    var host = cfg.Host(new Uri(RabbitMqConfig.Connstr), h =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        h.Username(RabbitMqConfig.Username);</span><br><span class="line">                        h.Password(RabbitMqConfig.Pass);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    cfg.ReceiveEndpoint(host, <span class="string">"AllGroupMatchingCompleted_Queue"</span>,</span><br><span class="line">                        c =&gt; &#123; c.Consumer(() =&gt; new AllGroupMatchingCompletedConsumer()); &#125;);</span><br><span class="line">                    cfg.ReceiveEndpoint(host, <span class="string">"GroupMatching_Queue"</span>,</span><br><span class="line">                        c =&gt; &#123; c.Consumer(() =&gt; new GroupMatchingConsumer()); &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">return</span> busControl;</span><br><span class="line">            &#125;)</span><br><span class="line">            .SingleInstance()</span><br><span class="line">            .As&lt;IBusControl&gt;()</span><br><span class="line">            .As&lt;IBus&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void StartBus()</span><br><span class="line">    &#123;</span><br><span class="line">        IocHelper.Resolve&lt;IBusControl&gt;().StartAsync();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="定义好自己的message"><a href="#定义好自己的message" class="headerlink" title="定义好自己的message"></a>定义好自己的message</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AllGroupMatchingCompleted</span><br><span class="line">   &#123;</span><br><span class="line">       public int PlandId &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">       public DateTime Time &#123; get; <span class="built_in">set</span>; &#125; = DateTime.Now;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="定义对应的consumer"><a href="#定义对应的consumer" class="headerlink" title="定义对应的consumer"></a>定义对应的consumer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class AllGroupMatchingCompletedConsumer : IConsumer&lt;AllGroupMatchingCompleted&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      public Task Consume(ConsumeContext&lt;AllGroupMatchingCompleted&gt; context)</span><br><span class="line">      &#123;</span><br><span class="line">          var planid = context.Message.PlandId;</span><br><span class="line">          TGPlanMan man = new TGPlanMan();</span><br><span class="line">          var plan = man.GetEntity(planid);</span><br><span class="line">          plan.State = StateEnum.已执行;</span><br><span class="line">          plan.EndTime = context.Message.Time;</span><br><span class="line">          plan.UpdateId = 888;</span><br><span class="line">          man.Update(plan);</span><br><span class="line">          <span class="built_in">return</span> null;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>在注入bus完毕后，web 程序启动后 <code>MessageBusConfig.StartBus()</code>启动bus</p>
<p>怎么保证同一种message能被顺序消费，并且是顺序执行的呢。只能是该消息的消费者是一个，并且自己发布自己,像下面这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class GroupMatchingConsumer : IConsumer&lt;GroupMatching&gt;</span><br><span class="line">   &#123;</span><br><span class="line">       public Task Consume(ConsumeContext&lt;GroupMatching&gt; context)</span><br><span class="line">       &#123;</span><br><span class="line">           var message = context.Message;</span><br><span class="line"></span><br><span class="line">           var list = message.Groups.OrderBy(c =&gt; c.GroupSortId).ToList();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (!list.Any())</span><br><span class="line">           &#123;</span><br><span class="line">               //处理完毕</span><br><span class="line">               <span class="built_in">return</span> context.Publish(new AllGroupMatchingCompleted &#123; PlandId = message.PlanId &#125;);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               LogRunMan.AddLog(<span class="string">"处理分组"</span>, EnumListLog.LogLevel.INFO, DateTime.Now, <span class="string">"GroupMatchingConsumer"</span>, context.Message.Nostr, dataId: list[0].GroupId);</span><br><span class="line">               TagGroupManager manager = new TagGroupManager();</span><br><span class="line"></span><br><span class="line">               manager.ProcessGroupMatching(list[0].GroupId);</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line">               LogExceptionMan.AddLog(<span class="string">"GroupMatchingConsumer"</span>, EnumListLog.LogLevel.ERROR, ex, context.Message.Nostr, dataId: list[0].GroupId);</span><br><span class="line"></span><br><span class="line">               //发布异常处理事件</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (list.Count &gt;= 2)</span><br><span class="line">           &#123;</span><br><span class="line">               list.RemoveAt(0);</span><br><span class="line">               <span class="built_in">return</span> context.Publish(new GroupMatching</span><br><span class="line">               &#123;</span><br><span class="line">                   PlanId = message.PlanId,</span><br><span class="line">                   Groups = list,</span><br><span class="line">                   Nostr = message.Nostr</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">return</span> context.Publish(new AllGroupMatchingCompleted</span><br><span class="line">           &#123;</span><br><span class="line">               PlandId = message.PlanId</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>在controller里pulish的时候，只要从容器中拿到bus即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 开始群发</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public void StartToSendMessge(List&lt;int&gt; groupNewsIds)</span><br><span class="line">&#123;</span><br><span class="line">    lock (SendMsgLock)</span><br><span class="line">    &#123;</span><br><span class="line">        var bus = IocHelper.Resolve&lt;IBus&gt;();</span><br><span class="line">        bus.Publish(new <span class="function"><span class="title">NewsSending</span></span>() &#123; GroupNewsId = groupNewsIds, Nostr = Guid.NewGuid().ToString(<span class="string">"N"</span>) &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>masstransit</code>还有很多高级功能，熔断，限流，重试都可以实现。另外，它还有一套sagas帮助其实现状态机,具体可以参看<a href="http://masstransit-project.com/MassTransit/advanced/sagas/persistence.html" target="_blank" rel="noopener">这里</a></p>
<p>masstransit 必须要和<code>rebbitmq</code>或者<code>azure services bus</code>配合才能工作，<br>其实还有一款内存级的消息总线 <a href="https://github.com/jbogard/MediatR" target="_blank" rel="noopener">MediatR</a>,更轻量，使用起来和masstransit差不多，有兴趣可以了解下</p>
]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cqrs </tag>
            
            <tag> Event Bus </tag>
            
            <tag> masstransit </tag>
            
            <tag> MediatR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Vue.js]]></title>
      <url>http://ccccccmd.rootu.cn/2018/04/06/vue/</url>
      <content type="html"><![CDATA[<h2 id="使用Vue-js"><a href="#使用Vue-js" class="headerlink" title="使用Vue.js"></a>使用Vue.js</h2><p>看了太多得<code>vue.js</code>,<code>angular</code>,<code>react.js</code>得比较,有一点是比较明确的，<code>vue.js</code>是上手最快的。正好这次碰到一个逻辑结构很复杂的页面要应付，加上以前了解的angular忘得一干二净，决定试试vue.js。</p>
<p>这个页面是一个多级联动，左右互动的标签选择场景，有些场景方法会使用js类的继承来实现多态，怕es6的语法在有些浏览器不能跑利索，所以并没有按照官方文档的建议，而是直接用<code>vue cli</code>构建的项目，主要就是有webpack babel来帮我们处理es，可以放心的使用es新语法。</p>
<a id="more"></a>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>vue 有<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">中文文档</a>,就很舒服了。按步骤安装好<code>node.js</code>  <code>cnpm</code>  <code>vue cli</code>,然后用脚手架init一个webpack的项目，很简单。<br>对了，最好还在google浏览器上安装一个<code>Vue Devtools</code> 的插件，方便调试，文档上也有说。</p>
<p>编辑器我用的是vscode,装的是<code>vetur</code>这个扩展，项目初始化好后，<br>依次执行<code>cnpm install</code>和 <code>npm run dev</code>查看demo项目，后面就开发你自己的业务逻辑了。</p>
<h2 id="几点细节"><a href="#几点细节" class="headerlink" title="几点细节"></a>几点细节</h2><p>1.组件里元素绑定class的方式,数组的形式指定多个，对象的形式指定一个。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class=<span class="string">"&#123;'hide':showTree&#125;"</span>&gt;</span><br><span class="line">&lt;div  :class=<span class="string">"[className,fold?'org-left-height':'']"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>2.计算属性不能传参数，如果一定要有参数，换<code>methods</code>去实现</p>
<p>3.怎么全局共享数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const TGGlobal = &#123;</span><br><span class="line">    rootData: loadSubNodes(),</span><br><span class="line">    apiurl: apiurl</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">export</span> default TGGlobal;</span><br></pre></td></tr></table></figure></p>
<p>或者采用vue 插件的方式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var TGGlobal = &#123;&#125;;</span><br><span class="line">TGGlobal.install = <span class="keyword">function</span> (Vue, options) &#123;</span><br><span class="line">    Vue.prototype.rootData = loadSubNodes();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default TGGlobal;</span><br><span class="line"></span><br><span class="line">Vue.use(TGGlobal)</span><br></pre></td></tr></table></figure>
<p>4.父子组件之间的交互</p>
<p>这个功能页面不涉及很负责的组件通信，没有用Vuex。很简单，子组件发射事件，父组件监听<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父：</span><br><span class="line">&lt;TgTree :treeData=<span class="string">"level1Nodes"</span> v-on:clickTreeNode=<span class="string">"processClickTreeNode"</span> :showTree=<span class="string">"false"</span>  :className=<span class="string">"'org-left-first'"</span>/&gt;</span><br><span class="line"></span><br><span class="line">processClickTreeNode: <span class="keyword">function</span>(payload) &#123;</span><br><span class="line">      var node = payload.node;</span><br><span class="line">      node.onClick(payload.clickType);&#125;</span><br><span class="line"></span><br><span class="line">子：</span><br><span class="line"> clickTreeNode: <span class="keyword">function</span>(node, clickType) &#123;</span><br><span class="line">      this.<span class="variable">$emit</span>(<span class="string">"clickTreeNode"</span>, &#123; node: node, clickType: clickType &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ajax跨域请求和ajax的同步请求"><a href="#ajax跨域请求和ajax的同步请求" class="headerlink" title="ajax跨域请求和ajax的同步请求"></a>ajax跨域请求和ajax的同步请求</h2><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>vue官方推荐用<code>axios</code>来完成请求，axios天生是异步的，但是有时候我们就想要一个同步请求怎么办？用promise包一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">             axios.post(<span class="string">'GroupManage/NodesTree/LoadData'</span>, &#123;</span><br><span class="line">                 level: level,</span><br><span class="line">                 parentid: parentid</span><br><span class="line">             &#125;)</span><br><span class="line">                 .<span class="keyword">then</span>(response =&gt; resolve(response))</span><br><span class="line">                 .catch(() =&gt; reject)</span><br><span class="line">           &#125;)</span><br><span class="line">调用的时候</span><br><span class="line">var r = ns.initLevelNodes(1, 0, null);</span><br><span class="line">    r.then(response =&gt; &#123;</span><br><span class="line">      Vue.set(this, <span class="string">"level1Nodes"</span>, response.data.data);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>axios跨域请求调试处理：在 webpack.base.conf.js里加入下面这段配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">      <span class="string">'/TgGroupManage'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://localhost:47211'</span>, </span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/TgGroupManage'</span>: <span class="string">'/TgGroupManage'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p>
<h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><p>在vue种用jquery完成ajax 的请求：<br>全局安装 <code>cnpm install jquery</code>, <code>import $ from &quot;jquery&quot;</code><br>完成同步和跨域请求</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">loadRootData</span></span>() &#123;</span><br><span class="line">    <span class="built_in">let</span> nodes;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: apiurl + <span class="string">'/TgGroupManage/nodestree/NodesJson'</span>,</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'POST'</span>,</span><br><span class="line">        async: <span class="literal">false</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;, crossDomain: <span class="literal">true</span>,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="keyword">function</span> (data) &#123;</span><br><span class="line">            nodes = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">return</span> nodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，服务端还要配置一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;add name=<span class="string">"Access-Control-Allow-Headers"</span> value=<span class="string">"Content-Type,soapaction,crossDomain, Accept, Authorization, X-Requested-With, Origin"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.由于我们不是真的前后端分离，造成 build后的页面还要手动粘紧razor视图中，每次修改都做这一步操作，很麻烦。<br>2.js的class继承也很舒服<br>3.vue上手很快，大部分时间都是在写js的业务逻辑<br>4.vue,小程序,wepy,mpvue,weex都很有关联，可以举一反三</p>
<p>后面会用vue尝试更复杂的功能页面</p>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rabbitmq]]></title>
      <url>http://ccccccmd.rootu.cn/2017/06/25/rabbitmq/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y erlang</span><br><span class="line"></span><br><span class="line">yum install -y  socat</span><br><span class="line"></span><br><span class="line">wget https://bintray.com/rabbitmq/rabbitmq-server-rpm/download_file?file_path=rabbitmq-server-3.6.10-1.el6.noarch.rpm rabbitmq.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh rabbitmq.rpm</span><br></pre></td></tr></table></figure>
<ul>
<li><p>启用插件：</p>
<blockquote>
<p>rabbitmq-plugins enable rabbitmq_management</p>
</blockquote>
</li>
<li><p>启动：</p>
<blockquote>
<p>rabbmitmq-server</p>
</blockquote>
</li>
<li><p>由于后台管理的guest账户只能localhost登陆，在新增一个账户：</p>
</li>
</ul>
<blockquote>
<p>rabbitmqctl  add_user rootu pwd</p>
</blockquote>
<ul>
<li><p>设置角色：</p>
<blockquote>
<p>rabbitmqctl set_user_tags rootu administrator</p>
</blockquote>
</li>
<li><p>设置权限：</p>
<blockquote>
<p>rabbitmqctl set_permissions -p “/“ admin “.” “.” “.*“</p>
</blockquote>
</li>
</ul>
<p>登陆后台：</p>
<p>ip：15672</p>
<a id="more"></a>
<h2 id="功能理解"><a href="#功能理解" class="headerlink" title="功能理解"></a>功能理解</h2><p>Rabbitmq 中的几个核心概念都被介绍碎了，参考：</p>
<p><a href="http://www.rabbitmq.com/documentation.html" target="_blank" rel="noopener">官方文档</a></p>
<p><a href="http://blog.csdn.net/whycold/article/details/41119807" target="_blank" rel="noopener">RabbitMQ基础概念详细介绍</a></p>
<p><a href="http://blog.csdn.net/column/details/rabbitmq.html" target="_blank" rel="noopener">RabbitMQ从入门到精通</a></p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/37607165" target="_blank" rel="noopener">RabbitMQ文档翻译</a></p>
<p><a href="https://my.oschina.net/moooofly/blog?catalog=261476" target="_blank" rel="noopener">RabbitMQ系列</a></p>
<p>书籍：</p>
<p>《RabbitMQ实战++高效部署分布式消息队列》</p>
<p>细节补充：</p>
<ul>
<li><p>建立tcp链接的代价是高昂的，所以，rabbitmq中出现了channel</p>
</li>
<li><p>用basic.consumer命令订阅，这样信道会置为接收模式，直到取消订阅为止。</p>
</li>
<li><p>如果只想获取单条，而不是持续的订阅，可以用basc.get，但是不能把它放到循环中代替basic.consumer,会影响rabbit的性能。</p>
</li>
<li><p>消费者接收到的每一条消息都必须进行确认。可以用basic.ack手动确认，也可以auto_ack自动确认。确认后，消息就会从队列中删除</p>
</li>
<li><p>rabbitmq有一个死信队列，basic.reject，来拒绝接受（丢弃）</p>
</li>
</ul>
<p>交换器</p>
<ul>
<li><p>direct ,如果routekey匹配的话，消息就会进队列。basic.publish(msg,””,”queuename”),这样，他会使用默认的交换器，并且以 队列名字作为rootkey。</p>
</li>
<li><p>fanout  当发送 一条消息到fanout交换器上，它会把消息投递到所有附加在此交换器上的所有队列</p>
</li>
<li><p>topic   对key进行模式匹配，比如ab<em>可以传递到所有ab</em>的queue</p>
</li>
<li><p>header</p>
</li>
</ul>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><blockquote>
<p>RabbitMQ 支持消息的持久化，也就是数据写在磁盘上，为了数据安全考虑，我想大多数用户都会选择持久化。消息队列持久化包括3个部分：<br>（1）exchange 持久化，在声明时指定 durable =&gt; 1<br>（2）queue 持久化，在声明时指定 durable =&gt; 1<br>（3）消息持久化，在投递时指定 delivery_mode =&gt; 2（1 是非持久化）</p>
</blockquote>
<p>如果 exchange 和 queue 都是持久化的，那么它们之间的 binding 也是持久化的。如果exchange 和 queue 两者之间有一个持久化，一个非持久化，就不允许建立绑定（这句话说的有问题，实际情况中经常出现非持久化的 queue 绑定到持久化 exchange 上的情况。个人觉得其意思应该是：当两者并非都是持久化时，其对应的 binding 就无法得到恢复）</p>
<p><a href="https://my.oschina.net/moooofly/blog/94113" target="_blank" rel="noopener">Highly Available Queue</a></p>
<h2 id="lovely-codes"><a href="#lovely-codes" class="headerlink" title="lovely codes"></a>lovely codes</h2><p><code>direct方式</code></p>
<p><strong>producer</strong>端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static void S1()</span><br><span class="line">      &#123;</span><br><span class="line">          string queueName = <span class="string">"workqueue4"</span>;</span><br><span class="line">          // string rootkey = <span class="string">"workqueue_rootkey"</span>;</span><br><span class="line">          //此时的rootkey就是queuename</span><br><span class="line">          ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">          factory.Uri = <span class="string">"amqp://rootu:ccccccmd@es.rootu.cn"</span>;</span><br><span class="line">          using (IConnection conn = factory.CreateConnection())</span><br><span class="line">          &#123;</span><br><span class="line">              using (var channel = conn.CreateModel())</span><br><span class="line">              &#123;</span><br><span class="line">                  channel.QueueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, null);</span><br><span class="line">                  IBasicProperties props = channel.CreateBasicProperties();</span><br><span class="line">                  string input;</span><br><span class="line">                  Console.WriteLine(<span class="string">"please enter the Message,enter  'quit'  close the window."</span>);</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">while</span> ((input = Console.ReadLine()) != <span class="string">"quit"</span>)</span><br><span class="line">                  &#123;</span><br><span class="line">                      var body = Encoding.UTF8.GetBytes(input);</span><br><span class="line">                      channel.BasicPublish(<span class="string">""</span>, queueName, props, body);//exchangename是空的</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p><strong>consumer</strong>端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">static void C1()</span><br><span class="line">     &#123;</span><br><span class="line">         string queueName = <span class="string">"workqueue"</span>;           </span><br><span class="line">         ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">         factory.Uri = <span class="string">"amqp://rootu:ccccccmd@es.rootu.cn"</span>;</span><br><span class="line">         using (IConnection conn = factory.CreateConnection())</span><br><span class="line">         &#123;</span><br><span class="line">             using (var channel = conn.CreateModel())</span><br><span class="line">             &#123;</span><br><span class="line">                 channel.QueueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, null);</span><br><span class="line">                 var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                 consumer.Received += (model, ea) =&gt;</span><br><span class="line">                 &#123;</span><br><span class="line">                     var body = ea.Body;</span><br><span class="line">                     var message = Encoding.UTF8.GetString(body);</span><br><span class="line">                     Console.WriteLine(<span class="string">"get message:"</span>, message);</span><br><span class="line">                 &#125;;</span><br><span class="line">                 <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                     channel.BasicConsume(queueName, <span class="literal">true</span>, consumer);</span><br><span class="line">                     Thread.Sleep(2000);</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<p>此时，会产生一个默认的exchange，名字是AMQP default,type是<code>direct</code></p>
<p><code>fanout</code>方式</p>
<p><strong>producer</strong>端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">static void S2()</span><br><span class="line">        &#123;</span><br><span class="line">            string rootkey = <span class="string">"workqueue_rootkey5"</span>;</span><br><span class="line">            string exchangename = <span class="string">"myexchange5"</span>;</span><br><span class="line">            ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">            factory.Uri = <span class="string">"amqp://rootu:ccccccmd@es.rootu.cn"</span>;</span><br><span class="line">            using (IConnection conn = factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel = conn.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    channel.ExchangeDeclare(exchangename, <span class="string">"fanout"</span>);</span><br><span class="line">                    IBasicProperties props = channel.CreateBasicProperties();</span><br><span class="line">                    string input;</span><br><span class="line">                    Console.WriteLine(<span class="string">"please enter the Message,enter  'quit'  close the window."</span>);</span><br><span class="line">                    <span class="keyword">while</span> ((input = Console.ReadLine()) != <span class="string">"quit"</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body = Encoding.UTF8.GetBytes(input);</span><br><span class="line">                        channel.BasicPublish(exchangename, rootkey, props, body);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p><strong>consumer</strong>端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">static void C2()</span><br><span class="line">        &#123;</span><br><span class="line">            string rootkey = <span class="string">"workqueue_rootkey5"</span>;</span><br><span class="line">            string exchangename = <span class="string">"myexchange5"</span>;</span><br><span class="line">            ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">            factory.Uri = <span class="string">"amqp://rootu:ccccccmd@es.rootu.cn"</span>;</span><br><span class="line">            using (IConnection conn = factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel = conn.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    channel.ExchangeDeclare(exchangename, <span class="string">"fanout"</span>);</span><br><span class="line">                    var queueName = channel.QueueDeclare().QueueName;//临时的queue</span><br><span class="line">                    var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                    consumer.Received += (model, ea) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body = ea.Body;</span><br><span class="line">                        var message = Encoding.UTF8.GetString(body);</span><br><span class="line">                        Console.WriteLine(<span class="string">"get message:"</span> + message);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    channel .QueueBind(queueName ,exchangename ,rootkey);</span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        channel.BasicConsume(queueName, <span class="literal">false</span>, consumer);</span><br><span class="line">                        Thread.Sleep(2000);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p><code>topic</code>方式：</p>
<p><strong>producer</strong>端：    </p>
<pre><code class="bash">static void S3()
      {
          string rootkey = <span class="string">"workqueue_rootkey8"</span>;
          string exchangename = <span class="string">"myexchange8"</span>;
          ConnectionFactory factory = new ConnectionFactory();
          factory.Uri = <span class="string">"amqp://rootu:ccccccmd@es.rootu.cn"</span>;
          using (IConnection conn = factory.CreateConnection())
          {
              using (var channel = conn.CreateModel())
              {
                  channel.ExchangeDeclare(exchangename, <span class="string">"topic"</span>, <span class="literal">true</span>);

                  IBasicProperties props = channel.CreateBasicProperties();
                  string input;
                  Console.WriteLine(<span class="string">"please enter the Message,enter  'quit'  close the window."</span>);
                  channel.QueueDeclare(<span class="string">"r1"</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, null);
                  channel.QueueBind(<span class="string">"r1"</span>, exchangename, <span class="string">"*.r1"</span>);
                  channel.QueueDeclare(<span class="string">"r2"</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, null);
                  channel.QueueBind(<span class="string">"r2"</span>, exchangename, <span class="string">"*.r2"</span>);
                  channel.QueueDeclare(<span class="string">"r0"</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, null);
                  channel.QueueBind(<span class="string">"r0"</span>, exchangename, <span class="string">"*.r0"</span>);
                  <span class="keyword">while</span> ((input = Console.ReadLine()) != <span class="string">"quit"</span>)
                  {
                      var k = DateTime.Now.Second % 3;

                      var body = Encoding.UTF8.GetBytes(input);
                      channel.BasicPublish(exchangename, <span class="string">"xx.r"</span>+k, props, body);
                      Console .WriteLine(<span class="string">"r"</span>+k);
                  }
              }
          }
      }


</code></pre>
<p><strong>consumer</strong>端：</p>
<pre><code class="bash">static void C3()
       {
           string rootkey = <span class="string">"workqueue_rootkey8"</span>;
           string exchangename = <span class="string">"myexchange8"</span>;
           ConnectionFactory factory = new ConnectionFactory();
           factory.Uri = <span class="string">"amqp://rootu:ccccccmd@es.rootu.cn"</span>;
           using (IConnection conn = factory.CreateConnection())
           {
               using (var channel = conn.CreateModel())
               {
                   channel.ExchangeDeclare(exchangename, <span class="string">"topic"</span>,<span class="literal">true</span>);

                   var consumer = new EventingBasicConsumer(channel);

                   consumer.Received += (model, ea) =&gt;
                   {
                       var body = ea.Body;
                       var message = Encoding.UTF8.GetString(body);
                       Console.WriteLine(<span class="string">"get message:"</span> + message);
                   };
                   channel.QueueDeclare(<span class="string">"r1"</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, null);
                   channel.QueueBind(<span class="string">"r1"</span>, exchangename, <span class="string">"*.r1"</span>);

                   channel.QueueDeclare(<span class="string">"r2"</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, null);
                   channel.QueueBind(<span class="string">"r2"</span>, exchangename, <span class="string">"*.r2"</span>);

                   channel.QueueDeclare(<span class="string">"r0"</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, null);
                   channel.QueueBind(<span class="string">"r0"</span>, exchangename, <span class="string">"*.r0"</span>);
                   <span class="keyword">while</span> (<span class="literal">true</span>)
                   {
                       var k = DateTime.Now.Second % 3;
                       channel.BasicConsume(<span class="string">"r"</span>+k, <span class="literal">false</span>, consumer);
                       Thread.Sleep(2000);
                   }

               }
           }
       }    
</code></pre>
<ul>
<li>如果consumer端没有开启，即  exchange 没有和queue进行bind的时候，producer端 pulish的message 测试下来是被丢弃掉的。<br>只有bind关系确定了，message才会被扔到已知的queue中。所以有了topic中producer的代码。        </li>
</ul>
]]></content>
      
        <categories>
            
            <category> rabbitmq </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ELK]]></title>
      <url>http://ccccccmd.rootu.cn/2017/06/24/ELK/</url>
      <content type="html"><![CDATA[<h2 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h2><p>首先要安装java</p>
<blockquote>
<p>yum install -y java</p>
</blockquote>
<p>下载rpm包</p>
<blockquote>
<p>wget <a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.4.2.rpm" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.4.2.rpm</a></p>
</blockquote>
<p>安装</p>
<blockquote>
<p>rpm -ivh elasticsearch-5.4.2.rpm</p>
</blockquote>
<blockquote>
<p>grep ‘^[a-z]’ elasticsearch.yml</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: rootu.cn</span><br><span class="line">node.name: roout.cn-node1</span><br><span class="line">path.data: /data/es-data</span><br><span class="line">path.logs: /var/<span class="built_in">log</span>/elasticsearch</span><br><span class="line">bootstrap.memory_lock: <span class="literal">true</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br></pre></td></tr></table></figure>
<blockquote>
<p>vim /etc/security/limits.conf</p>
</blockquote>
<p>systemctl status -l elasticsearch</p>
<p>chown -R elasticsearch:elasticsearch /data/es-data/</p>
<p>查看日志：</p>
<p>less rootu.cn.log</p>
<p>tail -n 500 rootu.cn.log</p>
<p>ulimit -a</p>
<p>如果没有日志，启动不起来，尝试修改：<br>jvm.options</p>
<p>-Xms512m<br>-Xmx512m</p>
<a id="more"></a>
<p>用这个测试：<br>curl <a href="http://localhost:9200/_nodes/process?pretty" target="_blank" rel="noopener">http://localhost:9200/_nodes/process?pretty</a></p>
<p>或者：</p>
<p>netstat -an |grep 9200</p>
<h2 id="安装-es-head插件"><a href="#安装-es-head插件" class="headerlink" title="安装 es-head插件"></a>安装 es-head插件</h2><p>安装git</p>
<p>yum install -y git</p>
<p>git clone <a href="https://github.com/mobz/elasticsearch-head.git" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head.git</a></p>
<p>安装node.js</p>
<p>wget <a href="https://nodejs.org/dist/v6.11.0/node-v6.11.0-linux-x64.tar.xz" target="_blank" rel="noopener">https://nodejs.org/dist/v6.11.0/node-v6.11.0-linux-x64.tar.xz</a></p>
<p>xz -d node-v6.11.0-linux-x64.tar.xz </p>
<p>ln -s /usr/local/src/node-v6.11.0-linux-x64/bin/node /usr/local/bin/node<br>ln -s /usr/local/src/node-v6.11.0-linux-x64/bin/npm /usr/local/bin/npm</p>
<p>加入环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/usr/<span class="built_in">local</span>/node-v6.11.0-linux-x64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NODE_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> NODE_PATH=<span class="variable">$NODE_HOME</span>/lib/node_modules</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/proifle</span><br></pre></td></tr></table></figure>
<p>修改npm源：</p>
<p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>
<p>npm install -g grunt</p>
<p>修改 _site/app.js中的localhost:9200</p>
<blockquote>
<p>:s/localhost:9200/es.rootu.cn:9200/g</p>
</blockquote>
<p>修改 grountfile.js</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">connect: &#123;</span><br><span class="line">			server: &#123;</span><br><span class="line">				options: &#123;</span><br><span class="line">					port: 9100,</span><br><span class="line">					base: <span class="string">'.'</span>,</span><br><span class="line">                                        hostname:<span class="string">'0.0.0.0'</span>,</span><br><span class="line">					keepalive: <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p>启动插件<br>grunt server &amp;</p>
<p>端口是9100</p>
<p>后台启动grunt server命令；</p>
<p>nohup grunt server &amp;exit</p>
<h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h2><p>rpm 或yum 安装</p>
<p>chkconfig –add kibana</p>
<p>修改配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.host: <span class="string">"0.0.0.0"</span></span><br><span class="line">server.port: 5601</span><br><span class="line">elasticsearch.url: <span class="string">"http://localhost:9200"</span></span><br></pre></td></tr></table></figure>
<p>启动：</p>
<p>systemctl start kibana</p>
]]></content>
      
        <categories>
            
            <category> ELK </category>
            
        </categories>
        
        
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> kibana </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.Net Core On Linux]]></title>
      <url>http://ccccccmd.rootu.cn/2017/05/29/Net%20Core%20On%20Linux/</url>
      <content type="html"><![CDATA[<p>在 <code>ubuntu</code> 上跑 <code>Asp.net Mvc</code>,体验很棒。nginx + 守候程序跑.net core很麻烦，但是 mono+jexus 的方式，就很方便了，类似windows上 IIS + Kestrel server方式。</p>
<p>打开体验下：<a href="http://blog.rootu.cn" target="_blank" rel="noopener">http://blog.rootu.cn</a></p>
<p>这台 <code>ubuntu</code> 是AWS 东京节点的一台EC2实例，速度还可以。</p>
<h2 id="NET-Core-SDK"><a href="#NET-Core-SDK" class="headerlink" title=".NET Core SDK"></a>.NET Core SDK</h2><p>安装准备工作：</p>
<p>查看自己 ubuntu 版本，和Mint版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line"></span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>
<p><strong>xenial</strong>对应的就是Linux Mint 18</p>
<p>在<code>https://www.microsoft.com/net/core#linuxubuntu</code> 找到对应的.net core.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">'echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893sudo </span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<p>Install .NET Core SDK<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dotnet-dev-1.0.4</span><br></pre></td></tr></table></figure></p>
<p>执行完毕后，输入 <code>dotnet --version</code> 验证SDK是否安装成功。</p>
<h2 id="安装mono-和-jexus"><a href="#安装mono-和-jexus" class="headerlink" title="安装mono 和 jexus"></a>安装mono 和 jexus</h2><p>在Mono官网找到对应系统的安装方式，<a href="http://www.mono-project.com/download/#download-lin-ubuntu" target="_blank" rel="noopener">http://www.mono-project.com/download/#download-lin-ubuntu</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF <span class="built_in">echo</span> <span class="string">"deb http://download.mono-project.com/repo/ubuntu xenial main"</span> | sudo tee /etc/apt/sources.list.d/mono-official.list</span><br><span class="line">sudoapt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install mono-devel</span><br></pre></td></tr></table></figure>
<p>执行完毕后，输入<code>mono -V</code>验证mono是否安装成功。</p>
<a id="more"></a>
<p>安装Jexus</p>
<p>curl <a href="https://jexus.org/release/install" target="_blank" rel="noopener">https://jexus.org/release/install</a> | sh</p>
<p>这些命令都要root的方式执行，可以直接wget下来，执行<code>sudo sh install</code>.</p>
<p>如果提示创建目录失败，要手动创建<code>/usr/jexus</code></p>
<h2 id="publish-asp-net-core-blog"><a href="#publish-asp-net-core-blog" class="headerlink" title="publish asp.net core blog"></a>publish asp.net core blog</h2><p>到github clone下郑大神的 <a href="https://github.com/PomeloFoundation/YuukoBlog" target="_blank" rel="noopener">YuukoBlog</a></p>
<p>这个是 sqlit 版本的，这个好备份。</p>
<p>我装的是vs 2017,打开的时候需要调整下<code>YuukoBlog.sln</code>,将<code>.xproj</code>调整为<code>.csproj</code></p>
<p>里面还有一个小bug,在 admin 控制器的 CatalogEdit 方法上，把pid 改成 order，否则保存不了排序。<br>其余的就自己去探索吧。 </p>
<p>然后就是publish，自己的电脑上也要安装<code>.net core sdk</code></p>
<p>在项目里执行 <code>dotnet publish -c Release -o ./bin/Release/PublishOutput</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">@<span class="built_in">echo</span> -----------------------------------------------------------------------------</span><br><span class="line">@<span class="built_in">echo</span> -----------------------------------------------------------------------------</span><br><span class="line">@<span class="built_in">echo</span> 有关于.Net Core应用程序的安装部署，请查看 Microsoft Docs</span><br><span class="line">@<span class="built_in">echo</span> .NET Core 应用程序部署</span><br><span class="line">@<span class="built_in">echo</span> https://docs.microsoft.com/zh-cn/dotnet/articles/core/deploying</span><br><span class="line">@<span class="built_in">echo</span> .NET Core 运行时标识符 (RID) 目录</span><br><span class="line">@<span class="built_in">echo</span> https://docs.microsoft.com/zh-cn/dotnet/articles/core/rid-catalog</span><br><span class="line">@<span class="built_in">echo</span> -----------------------------------------------------------------------------</span><br><span class="line">@pause</span><br><span class="line"><span class="built_in">cd</span> src/YuukoBlog</span><br><span class="line">dotnet publish -c Release -o ./bin/Release/PublishOutput</span><br></pre></td></tr></table></figure>
<p>发布好的跨平台程序就在<code>PublishOutput</code>里了。</p>
<h2 id="部署web"><a href="#部署web" class="headerlink" title="部署web"></a>部署web</h2><p>用<code>winscp</code>把文件传输到ubuntu 的/var/www/blog的目录下。</p>
<p>AWS的ec2都是通过<code>pem</code>证书的方式登陆的，但是<code>winscp</code>只能用putty的<code>ppk</code>文件，需要用<code>puttygen</code>转换下。<br>具体可以看 <a href="http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html#putty-private-key" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html#putty-private-key</a> </p>
<p>转换完毕后，winscp 登陆 ubuntu，注意aws的用户名不是root,是ubuntu。</p>
<p>配置 jexus 文件：</p>
<p><code>cp /usr/jexus/siteconf/default blog</code></p>
<p>修改其中的一段配置：</p>
<pre><code class="bash">port=80
root=/ /var/www/blog
hosts=13.112.xx.xx,blog.rootu.cn  <span class="comment">#OR your.com,*.your.com</span>

AppHost={
cmd=dotnet /var/www/blog/YuukoBlog.dll;
root=/var/www/blog;
port=0;
}

</code></pre>
<p>最后，启动 jexus </p>
<blockquote>
<p>sh /usr/jexus/jws start</p>
</blockquote>
<p>可能外网还会访问不通，ec2的安全组上要把80端口放行。</p>
]]></content>
      
        <categories>
            
            <category> .Net Core </category>
            
        </categories>
        
        
        <tags>
            
            <tag> .Net Core </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo迁移]]></title>
      <url>http://ccccccmd.rootu.cn/2017/05/29/Hexo/</url>
      <content type="html"><![CDATA[<p>有两台电脑，但不限定在一台电脑上记录东西。下面说说重装电脑时怎么部署这个hexo环境。<br>我的 Hexo 配置文件，主题文件和.md 都存储在 <code>开源中国</code> 的私有仓储里。</p>
<p>blog的静态文件部署在 <code>github</code> 和 <code>coding.net</code> 的pages 里。为什么要部署两份呢，<br>因为在国内 github的速度有时候确实不稳定。恰好，阿里云的域名可以做国内和海外双路解析。</p>
<p>这样，国内的流量直接走<code>coding.net</code>很快。虽说几乎没有流量，但是，该有的还是要有的。</p>
<p>下面就是重新部署的过程：</p>
<p>1.安装node.js</p>
<p>2.安装hexo  <code>npm install hexo-cli -g</code></p>
<p>3.新建文件及 A   <code>hexo init</code> </p>
<p>4.去开源中国，git clone your blog </p>
<p>5.把A中关于node 的modules 等复制进blog,删掉A</p>
<p>6.blog中<code>hexo g</code>，<code>hexo s</code>验证</p>
<p>7.生成ssh key 添加到github 和coding.net</p>
<p>8.hexo d部署</p>
<p>如果出现：</p>
<blockquote>
<p>ERROR Deployer not found: git ERROR Deployer not found: git</p>
</blockquote>
<p>在装下：</p>
<p><code>npm install hexo-deployer-git --save</code></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tyk-gateway]]></title>
      <url>http://ccccccmd.rootu.cn/2017/05/29/tyk/</url>
      <content type="html"><![CDATA[<p>注意，yum源的配置文件前面不要有空格<br><a href="http://dl.fedoraproject.org/pub/epel/7/x86_64/e/" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/7/x86_64/e/</a></p>
<ul>
<li>wget <a href="http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm</a></li>
<li><p>rpm -ivh epel-release-7-9.noarch.rpm</p>
<p>yum -q makecache -y –disablerepo=’*’ –enablerepo=’tyk_tyk-gateway’ –enablerepo=epel info zabbix</p>
</li>
</ul>
<p>  yum install -y redis tyk-gateway</p>
<p>  service redis start</p>
<p>  /opt/tyk-gateway/install/setup.sh –listenport=8080 –redishost=localhost –redisport=6379 –domain=””</p>
<p>  <a href="https://packagecloud.io/tyk/tyk-gateway" target="_blank" rel="noopener">https://packagecloud.io/tyk/tyk-gateway</a></p>
<p>  /opt/tyk-dashboard/install/setup.sh –listenport=3000 –redishost=localhost –redisport=6379 –mongo=mongodb://127.0.0.1/tyk_analytics –tyk_api_hostname=$HOSTNAME –tyk_node_hostname=<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a><br>  –tyk_node_port=8080 –portal_root=/portal –domain=”tyk.rootu.cn”</p>
<p>  sudo service mongod start</p>
<p>  service tyk-dashboard start</p>
<p>  ./tyk-analytics –newuser –neworg</p>
<p>用logrotate分割日志：</p>
<p>在<code>logrotate.d</code> 中加入tky配置文件</p>
<pre><code class="bash">/var/<span class="built_in">log</span>/tyk-gateway.stderr {
    daily 
    rotate 10
    copytruncate
    notifempty
    missingok
    create 664 root root
}

/var/<span class="built_in">log</span>/tyk-dashboard.stderr {
    daily
    rotate 10
    copytruncate
    notifempty
    missingok
    create 664 root root
}

</code></pre>
<p><code>sudo logrotate -f /etc/logrotate.conf</code> 及时分割</p>
<p>/usr/sbin/logrotate -d -f /etc/logrotate.d/tyk-gateway </p>
<p>sudo systemctl enable tyk-gateway //加入开机启动项</p>
<p>– 查看开机启动项所在位置 </p>
<p>/etc/systemd/system/multi-user.target.wants</p>
]]></content>
      
        <categories>
            
            <category> Gateway </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TYK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.Net Core 中间件]]></title>
      <url>http://ccccccmd.rootu.cn/2017/05/29/NetCore/</url>
      <content type="html"><![CDATA[<p><code>Startup</code>中的<code>Configure</code>方法和<code>ConfigureServices</code>方法</p>
<p> Configure方法最重要的作用就是向管道中添加中间件。该方法必须有一个<code>IApplicationBuilder</code>参数，而该接口中有一个<code>Use</code>方法，他就是用来注册中间件的。<br>   // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</p>
<p> UseStaticFiles、UseIdentity、UseMvc都是IApplicationBuilder上的扩展方法，在扩展方法中，都会通过调用扩展方法app.UseMiddleware方法，最终再调用app.Use方法来注册新的Middleware</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface IApplicationBuilder</span><br><span class="line">&#123;</span><br><span class="line">    //...</span><br><span class="line">    IApplicationBuilder Use(Func&lt;RequestDelegate, RequestDelegate&gt; middleware);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ConfigureServices 在Setup中是用来配置这些应用程序所需要的服务的，如配置连接字符串等。所以，该方法要在Configure之前调用。</p>
<p>  // This method gets called by the runtime. Use this method to add services to the container.</p>
<p>在ASP.NET5中的各种默认的Middleware中，都使用了依赖注入的功能，所以在使用Middleware中的功能时，需要提前将依赖注入所需要的类型及映射关系都注册到依赖注入管理系统中，即IServiceCollection集合，而ConfigureServices方法接收的就一个IServiceCollection类型的参数，该参数就是所有注册过类型的集合，通过原生的依赖注入组件进行管理（关于ASP.NET5中的依赖注入，我们会在单独章节中进行讲解），在该方法内，我们可以向该集合中添加新的类型和类型映射关系</p>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>middleware是Func&lt;RequestDelegate, RequestDelegate&gt;的一个实例，该Func接收一个RequestDelegate的参数，并返回一个RequestDelegate类型的值</p>
<p>RequestDelegate的源码如下：<br>public delegate Task RequestDelegate(HttpContext context);</p>
<p>RequestDelegate是一个委托函数，其接收HttpContext类型的实例，并返回一个Task类型的异步对象。也就是说RequestDelegate是一个<strong>可以返回自身RequestDelegate</strong>类型函数的函数，整个ASP.NET也就是利用这种方式构建了管线（Pipelien）的组成，在这里，每个middleware都链式到下一个middleware上，并在整个过程中可以对HttpConext对象进行修改或维护</p>
<h3 id="Middleware的注册有很多种方式，如下是实例型注册代码："><a href="#Middleware的注册有很多种方式，如下是实例型注册代码：" class="headerlink" title="Middleware的注册有很多种方式，如下是实例型注册代码："></a>Middleware的注册有很多种方式，如下是实例型注册代码：</h3><p>app.Use(next =&gt; new TimeRecorderMiddleware(next).Invoke);<br>或者，你也可以使用UseMiddleware扩展方法进行注册，示例如下：</p>
<p>app.UseMiddleware<timerecordermiddleware>();<br>app.UseMiddleware(typeof(TimeRecorderMiddleware)); 两种方式都可以<br>当然，你也可以定义一个自己的扩展方法用于注册该Middleware，代码如下：</timerecordermiddleware></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static IApplicationBuilder UseTimeRecorderMiddleware(this IApplicationBuilder app)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> app.UseMiddleware&lt;TimeRecorderMiddleware&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 抽象基类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public abstract class AbstractMiddleware</span><br><span class="line">&#123;</span><br><span class="line">    protected RequestDelegate Next &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">    protected AbstractMiddleware(RequestDelegate next)</span><br><span class="line">    &#123;</span><br><span class="line">        this.Next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract Task Invoke(HttpContext context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 示例Middleware</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class DemoMiddleware : AbstractMiddleware</span><br><span class="line">&#123;</span><br><span class="line">    public DemoMiddleware(RequestDelegate next) : base(next)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public async override Task Invoke(HttpContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"DemoMiddleware Start."</span>);</span><br><span class="line">        await Next.Invoke(context);</span><br><span class="line">        Console.WriteLine(<span class="string">"DemoMiddleware End."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中间件使用的配置项有两种添加方法，一种是添加到 AddMiddleware(Action<xxxoptions> option) 另外一种是 UseMiddleware&lt;&gt;(Action<xxxoptions> option)，那么这两种有什么区别呢？<br>那么，前者Add中的配置项一般情况下是中间执行之前就需要的一些信息，也就是说中间件的启动就依赖于这些配置项，他放置于容器配置（Add DI Service）的时候添加进去更加方便或者合适的时候使用它，另外一种（后者）是容器已经构建完毕，不需要依赖于容器提供的配置项可以使用此种方式。</xxxoptions></xxxoptions></p>
<p><a href="http://www.cnblogs.com/TomXu/p/4496435.html" target="_blank" rel="noopener">汤姆大叔</a></p>
<p><a href="http://www.cnblogs.com/savorboard/p/aspnetcore-http-pipeline.html" target="_blank" rel="noopener">savorboard</a></p>
]]></content>
      
        <categories>
            
            <category> .Net Core </category>
            
        </categories>
        
        
        <tags>
            
            <tag> .Net Core </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Autofac(二)]]></title>
      <url>http://ccccccmd.rootu.cn/2017/04/04/Autofac-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="在注册的过程中提供参数"><a href="#在注册的过程中提供参数" class="headerlink" title="在注册的过程中提供参数"></a>在注册的过程中提供参数</h2><p><a href="http://docs.autofac.org/en/latest/register/parameters.html" target="_blank" rel="noopener">doc</a></p>
<ul>
<li>可用的参数类型</li>
</ul>
<p><code>NamedParameter</code> - match target parameters by name<br><code>TypedParameter</code>- match target parameters by type (exact type match required)<br><code>ResolvedParameter</code> - 灵活</p>
<p><code>NamedParameter</code> and <code>TypedParameter</code> 只支持不变的值</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">builder.Register(c =&gt; new ConfigReader(<span class="string">"sectionName"</span>)).As&lt;IConfigReader&gt;();</span><br><span class="line"></span><br><span class="line">// Using a NAMED parameter:</span><br><span class="line">builder.RegisterType&lt;ConfigReader&gt;()</span><br><span class="line">       .As&lt;IConfigReader&gt;()</span><br><span class="line">       .WithParameter(<span class="string">"configSectionName"</span>, <span class="string">"sectionName"</span>);</span><br><span class="line"></span><br><span class="line">// Using a TYPED parameter:</span><br><span class="line">builder.RegisterType&lt;ConfigReader&gt;()</span><br><span class="line">       .As&lt;IConfigReader&gt;()</span><br><span class="line">       .WithParameter(new TypedParameter(typeof(string), <span class="string">"sectionName"</span>));</span><br><span class="line"></span><br><span class="line">// Using a RESOLVED parameter:</span><br><span class="line">builder.RegisterType&lt;ConfigReader&gt;()</span><br><span class="line">       .As&lt;IConfigReader&gt;()</span><br><span class="line">       .WithParameter(</span><br><span class="line">         new ResolvedParameter(</span><br><span class="line">           (pi, ctx) =&gt; pi.ParameterType == typeof(string) &amp;&amp; pi.Name == <span class="string">"configSectionName"</span>,</span><br><span class="line">           (pi, ctx) =&gt; <span class="string">"sectionName"</span>));</span><br><span class="line">		   </span><br><span class="line">```		   </span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">可以在注册的时候传入参数，在Resolve的时候给参数赋值：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">// Use TWO parameters to the registration delegate:</span><br><span class="line">// c = The current IComponentContext to dynamically resolve dependencies</span><br><span class="line">// p = An IEnumerable&lt;Parameter&gt; with the incoming parameter <span class="built_in">set</span></span><br><span class="line">builder.Register((c, p) =&gt;</span><br><span class="line">                 new ConfigReader(p.Named&lt;string&gt;(<span class="string">"configSectionName"</span>)))</span><br><span class="line">       .As&lt;IConfigReader&gt;();</span><br><span class="line">	   </span><br><span class="line">var reader = scope.Resolve&lt;IConfigReader&gt;(new NamedParameter(<span class="string">"configSectionName"</span>, <span class="string">"sectionName"</span>));</span><br></pre></td></tr></table></figure>
<h2 id="程序集扫描"><a href="#程序集扫描" class="headerlink" title="程序集扫描"></a>程序集扫描</h2><p>Autofac会根据特定的规则查找个注册组件，也可以扫描自定义的类型，或者特别的指出扫描特定的<code>Autofac modules</code></p>
<p>如果注册一组活多个组件，<code>RegisterAssemblyTypes</code>是很有用的了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var dataAccess = Assembly.GetExecutingAssembly();</span><br><span class="line"></span><br><span class="line">builder.RegisterAssemblyTypes(dataAccess)</span><br><span class="line">       .Where(t =&gt; t.Name.EndsWith(<span class="string">"Repository"</span>))</span><br><span class="line">       .AsImplementedInterfaces();</span><br></pre></td></tr></table></figure>
<p>默认的，程序集中所有的<code>public</code>的实例类型都会被注册。<br>相应的，可以做<code>type</code>过滤：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterAssemblyTypes(asm)</span><br><span class="line">       .Where(t =&gt; t.Name.EndsWith(<span class="string">"Repository"</span>));</span><br><span class="line">	   </span><br><span class="line">builder.RegisterAssemblyTypes(asm)</span><br><span class="line">       .Except&lt;MyUnwantedType&gt;();</span><br><span class="line"></span><br><span class="line">builder.RegisterAssemblyTypes(asm)</span><br><span class="line">       .Except&lt;MyCustomisedType&gt;(ct =&gt;</span><br><span class="line">          ct.As&lt;ISpecial&gt;().SingleInstance());</span><br></pre></td></tr></table></figure></p>
<ul>
<li>指定其实现的服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//Register the <span class="built_in">type</span> as providing all of its public interfaces as services (excluding IDisposable).</span><br><span class="line">builder.RegisterAssemblyTypes(asm)</span><br><span class="line">       .Where(t =&gt; t.Name.EndsWith(<span class="string">"Repository"</span>))</span><br><span class="line">       .AsImplementedInterfaces();</span><br><span class="line">//Register types that are assignable to a closed instance of the open generic <span class="built_in">type</span>.	   </span><br><span class="line">builder.RegisterAssemblyTypes(asm)</span><br><span class="line">       .AsClosedTypesOf(typeof(IRepository&lt;&gt;));</span><br><span class="line"></span><br><span class="line">builder.RegisterAssemblyTypes(asm)</span><br><span class="line">       .AsImplementedInterfaces()</span><br><span class="line">       .AsSelf();</span><br></pre></td></tr></table></figure>
<ul>
<li><p>扫描指定的Module</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var assembly = typeof(AComponent).Assembly;</span><br><span class="line">var builder = new ContainerBuilder();</span><br><span class="line"></span><br><span class="line">// Registers AModule but not BModule</span><br><span class="line">builder.RegisterAssemblyModules(typeof(AModule), assembly);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Registers AModule but not BModule</span><br><span class="line">builder.RegisterAssemblyModules&lt;AModule&gt;(assembly);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Registers both modules</span><br><span class="line">builder.RegisterAssemblyModules(assembly);</span><br></pre></td></tr></table></figure>
</li>
<li><p>IIS Hosted Web Applications</p>
</li>
</ul>
<p>寄宿在IIS的web 的程序集在第一次load的时候是在<code>Appdomain</code>的，但是IIS定期回收，这样程序集会按需加载了，为了避免这个问题，<br>用下面的方法获取程序集：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var assemblies = BuildManager.GetReferencedAssemblies().Cast&lt;Assembly&gt;();</span><br></pre></td></tr></table></figure></p>
<h2 id="Resolving"><a href="#Resolving" class="headerlink" title="Resolving"></a>Resolving</h2><p>在前面注册好了这一堆组件，后面就要开始用了</p>
<p><a href="http://docs.autofac.org/en/latest/resolve/index.html" target="_blank" rel="noopener">Resolve</a></p>
<p><a href="http://docs.autofac.org/en/latest/resolve/relationships.html" target="_blank" rel="noopener">relationships</a></p>
]]></content>
      
        <categories>
            
            <category> Autofac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Autofac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CLR 总结]]></title>
      <url>http://ccccccmd.rootu.cn/2017/03/30/CLR/</url>
      <content type="html"><![CDATA[<p>实际在CLR中有3个堆(GC堆，Load堆，大对象堆）<br>Load堆用来存放类型而不是类型的实例</p>
<p>每一个类型在元数据的Typedef表中,会分配一个MdToken(类型标记),当你写的方法需要访问这个类型时,也是使用MdToken到相关Dll的元数据表去加载它到Load Heap,</p>
<p>CLR加载一个类型，是通过类型元数据中的标识在TypeDef的元数据表中查找类型，在加载类型的时候一定需要加载字段，不管是静态还是实例的字段.原因是当你的类型被实例化的时候，需要一份已有的实例字段的描述，来布局你的实例的内存。</p>
<p>我们探索了类型的第一种成员：字段。字段在IL编译时，会生成MdToken和偏移量，因为对于类型来说，一个类型在编译时就已经确定了字段的个数，所以偏移量对于编译器来说是已知的，字段和偏移量分别由元数据表(Field和ClassLayout)来记录。</p>
<pre><code>在类型的CLR内存布局中，有一个FieldDesList，它指向类型的字段描述(主要是字段签名和偏移量).当CLR首次加载类型时，会根据元数据表来生成 FieldDesList，包括实例和静态字段，其中静态字段的偏移量是相对于方法表中最后一项方法地址而言，所以静态字段在类型方法列表的后面进行布局，也就是说你的静态字段就存储在这个空间,它是属于类型的,也就是说所有这个类型的实例共享这个静态字段。而实例字段则是和实例在一起，属于每一个实例,它的偏移量是以实例的类型指针为基址而计算的。

子类从父类派生时,所有字段全部被派生,与可访问性无关,但对于静态字段来说,子类和父类都指向相同地址,即逻辑继承,物理上则共享.     
</code></pre><p><a href="http://www.cnblogs.com/xugao918/archive/2011/10/08/2189514.html" target="_blank" rel="noopener">参考</a></p>
]]></content>
      
        <categories>
            
            <category> CLR </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[AWS RDS]]></title>
      <url>http://ccccccmd.rootu.cn/2017/02/21/AWS-RDS/</url>
      <content type="html"><![CDATA[<h2 id="RDS"><a href="#RDS" class="headerlink" title="RDS"></a>RDS</h2><ul>
<li><a href="https://aws.amazon.com/cn/rds/getting-started/" target="_blank" rel="noopener">简介</a><br>Amazon Relational Database Service (Amazon RDS) 让您能够在云中轻松设置、操作和扩展关系数据库。它在管理耗时的数据库管理任务的同时，可提供经济实用的可调容量，使您能够腾出时间专注于应用程序和业务。Amazon RDS 提供六种常用的数据库引擎供您选择，即 Amazon Aurora、PostgreSQL、MySQL、MariaDB、Oracle 和 Microsoft SQL Server。</li>
</ul>
<h2 id="Amazon-RDS-for-SQL-Server"><a href="#Amazon-RDS-for-SQL-Server" class="headerlink" title="Amazon RDS for SQL Server"></a>Amazon RDS for SQL Server</h2><p><a href="https://aws.amazon.com/cn/rds/sqlserver/" target="_blank" rel="noopener">https://aws.amazon.com/cn/rds/sqlserver/</a></p>
<ul>
<li>备份和灾难恢复(针对实例)</li>
</ul>
<p>自动备份 – Amazon RDS 的自动备份功能在默认情况下打开，实现数据库实例的时间点恢复。Amazon RDS 以 5 分钟为间隔备份您的数据库和事务日志，并且按您指定的保留期进行存储。这样，您就能够将数据库实例恢复到保留期内任何一秒钟的状态，最多可恢复到前五分钟的状态。自动备份保留期可配置为最长 35 天。</p>
<p>数据库快照 – 数据库快照是用户启动的数据库实例备份。Amazon RDS 将存储这些完整数据库备份，直至您明确删除它们。您可以在需要时随时从数据库快照创建新数据库实例。</p>
<p>适用于 Microsoft SQL Server 的 Amazon RDS 不支持将数据导入 msdb 数据库。</p>
<a id="more"></a>
<ul>
<li>将数据库实例还原至指定时间<br>Amazon RDS 自动备份功能将自动为数据库实例创建存储卷快照，并备份整个数据库实例而不仅仅是单个数据库。</li>
</ul>
<blockquote>
<p>从某个时间点进行还原时，Amazon RDS 使用的多种数据库引擎有一些特殊的注意事项。将 Oracle 数据库实例还原到某个时间点时，可指定不同的 Oracle 数据库引擎、许可模式和 DBName (SID) 供新数据库实例使用。将 SQL Server 数据库实例还原到某个时间点时，该实例中的<strong>每个数据库均还原</strong>到与实例中每个其他数据库相差 1 秒以内的时间点。对于实例内跨多个数据库的事务，还原时可能会发生不一致的情况。</p>
</blockquote>
<h2 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h2><p>亚马逊RDS计费分为两个主要的部分，一个是“实例费用”(CPU和内存)，另一个是“存储费用”(磁盘容量和IOPS)。这两类资源的费用，又细分为单可用区和多可用区，另外，还可以选择“按小时计费”、又或者是“包年计费”的方式购买，这些对价格都有很大影响。本文分多个部分细致介绍了亚马逊如何计算一个RDS实例的价格。<br><a href="https://aws.amazon.com/cn/rds/faqs/#20" target="_blank" rel="noopener">https://aws.amazon.com/cn/rds/faqs/#20</a><br><a href="https://aws.amazon.com/cn/rds/sqlserver/pricing/" target="_blank" rel="noopener">https://aws.amazon.com/cn/rds/sqlserver/pricing/</a></p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/CHAP_GettingStarted.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/CHAP_GettingStarted.html</a></p>
<h2 id="针对单独的数据库"><a href="#针对单独的数据库" class="headerlink" title="针对单独的数据库"></a>针对单独的数据库</h2><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/SQLServer.Procedural.Importing.html#SQLServer.Procedural.Importing.Native.Using.Restore" target="_blank" rel="noopener">DOC</a></p>
<ul>
<li>备份<br>调用 rds_backup_database 存储过程。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> msdb.dbo.rds_backup_database </span><br><span class="line">        @source_db_name=<span class="string">'database_name'</span>, </span><br><span class="line">        @s3_arn_to_backup_to=<span class="string">'arn:aws:s3:::bucket_name/file_name_and_extension'</span>,</span><br><span class="line">        @overwrite_S3_backup_file=1;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>如果实例的选项组 是  <code>SQLSERVER_BACKUP_RESTORE</code> ， 上述命令应该可以执行成功；会返回一个任务ID的。</p>
<ul>
<li>取消任务</li>
</ul>
<p>要取消备份或还原任务，可调用 rds_cancel_task 存储过程。</p>
<ul>
<li>@task_id – 要取消的任务的 ID。可以通过调用 rds_task_status 获取任务 ID。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> msdb.dbo.rds_cancel_task @task_id=1234;</span><br></pre></td></tr></table></figure>
<ul>
<li>还原</li>
</ul>
<p>要还原数据库，可调用 rds_restore_database 存储过程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> msdb.dbo.rds_restore_database </span><br><span class="line">        @restore_db_name=<span class="string">'database_name'</span>, </span><br><span class="line">        @s3_arn_to_restore_from=<span class="string">'arn:aws:s3:::bucket_name/file_name_and_extension'</span>;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>跟踪任务的状态</li>
</ul>
<p>要跟踪备份和还原任务的状态，可调用 rds_task_status 存储过程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> msdb.dbo.rds_task_status @db_name=<span class="string">'database_name'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>所以，要对数据库进行还原和备份，还要借助  <code>S3</code> 的。</li>
</ul>
<p><strong>TIPS</strong></p>
<blockquote>
<p>您无法将一个备份文件还原到已用于创建该备份文件的同一数据库实例。而是应将该备份文件还原到新的数据库实例。对数据库进行重命名不是消除此限制的办法。</p>
</blockquote>
<blockquote>
<p>您无法将同一备份文件多次还原到一个数据库实例。也就是说，您无法将备份文件还原到已包含您正在还原的数据库的数据库实例。对数据库进行重命名不是消除此限制的办法。 </p>
</blockquote>
<h2 id="DownloadCompleteDBLogFile"><a href="#DownloadCompleteDBLogFile" class="headerlink" title="DownloadCompleteDBLogFile"></a>DownloadCompleteDBLogFile</h2><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/RESTReference.DownloadCompleteDBLogFile.html" target="_blank" rel="noopener">DOC</a><br>由于数据库日志文件可能为任意大小，因此提供了 DownloadCompleteDBLogFile REST API 以实现对日志文件内容的流式传输。</p>
<ul>
<li>用RDS 备份数据库文件  还原到RDS 上，要删除掉原来 的 database 才可以还原成功 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Amazon RDS 当前不支持以下 SQL Server 功能：</span><br><span class="line">维护计划</span><br><span class="line">数据库邮件</span><br><span class="line">分布式查询（即，链接服务器）</span><br><span class="line">数据库日志传输</span><br><span class="line">变更数据捕获 (CDC) – 考虑使用变更跟踪来替代 CDC。</span><br><span class="line">复制</span><br><span class="line">在该数据库实例所在的同一个服务器上运行“Reporting”、“Analysis”、“Integration”或“Master Data Services”的能力。. 如果需要执行此操作，建议在 EC2 实例上安装 SQL Server，或使用本地 SQL Server 实例作为“Reporting”、“Analysis”、“Integration”或“Master Data Services”的服务器。</span><br><span class="line">性能数据收集器</span><br><span class="line">服务代理或其他 T-SQL 终端节点（使用 CREATE ENDPOINT 的所有操作不可用）</span><br><span class="line">Distribution Transaction Coordinator (MSDTC)</span><br><span class="line">WCF Data Services</span><br><span class="line">FILESTREAM 支持</span><br><span class="line">基于策略的管理</span><br><span class="line">SQL Server Audit</span><br><span class="line">BULK INSERT 和 OPENROWSET(BULK...) 功能</span><br><span class="line">数据质量服务</span><br><span class="line">即时文件初始化</span><br><span class="line">始终开启（2012 企业版）</span><br><span class="line">文件表</span><br><span class="line">服务器级别触发器</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> AWS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RDS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AWS 其他产品]]></title>
      <url>http://ccccccmd.rootu.cn/2017/02/21/AWS-Others/</url>
      <content type="html"><![CDATA[<h2 id="Elastic-Load-Balancing"><a href="#Elastic-Load-Balancing" class="headerlink" title="Elastic Load Balancing"></a>Elastic Load Balancing</h2><p><a href="http://docs.aws.amazon.com/zh_cn/elasticloadbalancing/latest/userguide/what-is-load-balancing.html" target="_blank" rel="noopener">简介</a></p>
<p><a href="http://docs.aws.amazon.com/zh_cn/elasticloadbalancing/latest/userguide/load-balancer-getting-started.html" target="_blank" rel="noopener">入门</a></p>
<h2 id="Amazon-SQS"><a href="#Amazon-SQS" class="headerlink" title="Amazon SQS"></a>Amazon SQS</h2><p><a href="https://aws.amazon.com/cn/sqs/details/" target="_blank" rel="noopener">简介</a></p>
<ul>
<li>标准队列</li>
</ul>
<p>标准队列使您能够每秒处理近乎无限数量的事务。标准队列可确保每条消息至少被传送一次。</p>
<ul>
<li>FIFO 队列</li>
</ul>
<p>这种队列类型最重要的功能是 FIFO (先进先出) 传送和一次性处理：让消息的发送顺序和接收顺序严格保持一致，且消息只传送一次并保留到用户将其处理和删除；重复的消息不会被引入队列。FIFO 队列还支持消息组，即允许在单个队列中传送多个有序流。FIFO 队列仅限 300 笔交易/秒 (TPS)，但具有标准队列的所有功能。</p>
<ul>
<li>特点</li>
</ul>
<p>消息可以在队列中最多保留 14 天。</p>
<p>开发人员可以创建任意数量的 Amazon SQS 队列，队列可包含无限数量的消息。</p>
<a id="more"></a>
<ul>
<li>价格</li>
</ul>
<p><a href="https://aws.amazon.com/cn/sqs/pricing/" target="_blank" rel="noopener">计费</a></p>
<p>Amazon SQS 请求定价<br>    标准队列<br>    0.40 USD (每个请求 0.00000040 USD)<br>    FIFO 队列<br>    0.50 USD (每个请求 0.00000050 USD)</p>
<p>Amazon SQS 数据传输定价</p>
<ul>
<li>开发</li>
</ul>
<p><a href="http://docs.aws.amazon.com/zh_cn/AWSSimpleQueueService/latest/SQSDeveloperGuide/Welcome.html" target="_blank" rel="noopener">DOC</a></p>
<p><a href="https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/sqs-apis-intro.html" target="_blank" rel="noopener">Code Examples</a></p>
<h2 id="Amazon-CloudFront"><a href="#Amazon-CloudFront" class="headerlink" title="Amazon CloudFront"></a>Amazon CloudFront</h2><ul>
<li>CDN</li>
</ul>
<h2 id="Amazon-ElastiCache-分布式缓存"><a href="#Amazon-ElastiCache-分布式缓存" class="headerlink" title="Amazon ElastiCache  分布式缓存"></a>Amazon ElastiCache  分布式缓存</h2><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/UserGuide/WhatIs.html" target="_blank" rel="noopener">文档</a></p>
<h2 id="VPC"><a href="#VPC" class="headerlink" title="VPC"></a>VPC</h2><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonVPC/latest/UserGuide/VPC_Introduction.html?shortFooter=true" target="_blank" rel="noopener">什么是VPC</a></p>
<p><a href="http://docs.aws.amazon.com/zh_cn/AmazonVPC/latest/GettingStartedGuide/ExerciseOverview.html" target="_blank" rel="noopener">vpc 文档</a></p>
<ul>
<li>它在逻辑上与 AWS 云中的其他虚拟网络隔绝。可在 VPC 中启动 AWS 资源</li>
</ul>
<p><a href="http://docs.aws.amazon.com/zh_cn/AmazonVPC/latest/UserGuide/VPC_Subnets.html?shortFooter=true#vpc-subnet-basics" target="_blank" rel="noopener">VPC和子网</a></p>
<ul>
<li>每个子网都必须关联一个路由表，这个路由表可指定允许出站流量离开子网的可用路由。您创建的每个子网都会自动关联 VPC 的主路由表。</li>
</ul>
<p><a href="http://docs.aws.amazon.com/zh_cn/AmazonVPC/latest/UserGuide/VPC_Internet_Gateway.html?shortFooter=true#Add_IGW_Attach_Gateway" target="_blank" rel="noopener">Internet 网关</a></p>
<p><a href="http://docs.aws.amazon.com/zh_cn/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html?shortFooter=true" target="_blank" rel="noopener">路由表</a></p>
<ul>
<li>在您的 VPC 中的每个子网必须与一个路由表关联；路由表控制子网的路由。一个子网一次只能与一个路由表关联，但您可以将多个子网与同一路由表关联。</li>
</ul>
<p><a href="http://docs.aws.amazon.com/zh_cn/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html?shortFooter=true" target="_blank" rel="noopener">安全组</a></p>
<h2 id="Amazon-CloudWatch"><a href="#Amazon-CloudWatch" class="headerlink" title="Amazon CloudWatch"></a>Amazon CloudWatch</h2><p><a href="https://docs.amazonaws.cn/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html" target="_blank" rel="noopener">创建报警</a></p>
]]></content>
      
        <categories>
            
            <category> AWS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RDS Others </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AWS S3]]></title>
      <url>http://ccccccmd.rootu.cn/2017/02/21/AWS-S3/</url>
      <content type="html"><![CDATA[<h2 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h2><p>Amazon Simple Storage Service (Amazon S3) 是一种面向 Internet 的存储服务。您可以通过 Amazon S3 随时在 Web 上的任何位置存储和检索的任意大小的数据。您可以使用 AWS 管理控制台简单而直观的 web 界面来完成这些任务。</p>
<ul>
<li>价格<ul>
<li>存储定价 (因区域而不同)</li>
<li>请求定价</li>
<li>Amazon S3 存储管理定价</li>
<li>数据传输定价</li>
<li>Amazon S3 Transfer Acceleration 定价<br><a href="https://aws.amazon.com/cn/s3/pricing/" target="_blank" rel="noopener">https://aws.amazon.com/cn/s3/pricing/</a></li>
</ul>
</li>
</ul>
<p><a href="http://calculator.s3.amazonaws.com/index.html?lng=zh_CN#" target="_blank" rel="noopener">http://calculator.s3.amazonaws.com/index.html?lng=zh_CN#</a></p>
<ul>
<li>开发文档<br><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/MakingRequests.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/MakingRequests.html</a></li>
</ul>
<p><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/Welcome.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/Welcome.html</a></p>
<ul>
<li>SDK<br><a href="https://aws.amazon.com/cn/sdk-for-net/" target="_blank" rel="noopener">https://aws.amazon.com/cn/sdk-for-net/</a></li>
</ul>
<ul>
<li>存储类型：</li>
</ul>
<p><a href="https://aws.amazon.com/cn/s3/storage-classes/" target="_blank" rel="noopener">https://aws.amazon.com/cn/s3/storage-classes/</a></p>
<ul>
<li><p>通用 Amazon S3 Standard<br>针对频繁访问数据，Amazon S3 Standard 提供较高的持久性、可用性和性能对象存储。由于它带来较低的延迟和较高的吞吐量，Standard 非常适合各种用例，包括云应用程序、动态网站、内容分配、移动和游戏应用程序，以及大数据分析。生命周期管理提供可配置的政策，可将对象自动迁移到最合适的存储类别。</p>
</li>
<li><p>Amazon S3 Standard – Infrequent Access<br>Amazon S3 Standard – Infrequent Access (Standard – IA) 是 Amazon S3 存储类别，用于不频繁访问但在需要时也要求快速访问的数据。Standard – IA 提供较高的持久性、吞吐量和较低的 Amazon S3 Standard 延迟，并且每 GB 的存储价格和检索费用都较低。成本较低且性能出色使得 Standard – IA 成为长期存储和备份的理想选择，也非常适用于灾难恢复的数据存储。Standard – IA 存储类别被设置在对象级别，并可在相同的存储桶中作为 Standard 数据存在，从而让您可以使用生命周期政策在存储类别间自动转移对象，无需更改任何应用程序。</p>
</li>
<li><p>存档 Amazon Glacier<br>Amazon Glacier 是一种安全、持久且成本极低的存储服务，适用于数据存档。您可以放心存储任何量的数据 – 成本与本地解决方案相当，甚至更低。为了保持成本低廉，同时满足各种数据取回需求，Amazon Glacier 提供三种访问存档的选项，各自的取回时间从数分钟到数小时不等。</p>
</li>
</ul>
<a id="more"></a>
<h2 id="Amazon-S3-主要概念"><a href="#Amazon-S3-主要概念" class="headerlink" title="Amazon S3 主要概念"></a>Amazon S3 主要概念</h2><ul>
<li>存储桶</li>
</ul>
<p>存储桶是 Amazon S3 中用于存储对象的容器。每个对象都储存在一个存储桶中。例如，如果名为 photos/puppy.jpg 的对象存储在 johnsmith 存储桶中，则可使用 URL <a href="http://johnsmith.s3.amazonaws.com/photos/puppy.jpg" target="_blank" rel="noopener">http://johnsmith.s3.amazonaws.com/photos/puppy.jpg</a> 对该对象进行寻址.</p>
<p><strong>在存储桶中存储无限量的数据,每个对象可包含最多 5 TB 的数据</strong></p>
<ul>
<li>键</li>
</ul>
<p>密钥是指存储桶中对象的唯一标识符。存储桶内的每个对象都只能有一个密钥。</p>
<p>在URL <a href="http://doc.s3.amazonaws.com/2006-03-01/AmazonS3.wsdl" target="_blank" rel="noopener">http://doc.s3.amazonaws.com/2006-03-01/AmazonS3.wsdl</a> 中，“doc”是存储桶的名称，而“2006-03-01/AmazonS3.wsdl”是密钥。</p>
<ul>
<li>区域</li>
</ul>
<p>在某一区域存储的对象将一直留在该区域，除非您特意将其传输到另一区域。</p>
<h2 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h2><ul>
<li><p>使用分段上传 API 上传对象<br><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/uploadobjusingmpu.html" target="_blank" rel="noopener">DOC</a></p>
</li>
<li><p>使用 适用于 .NET 的 AWS 开发工具包 上传单个对象<br><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/UploadObjSingleOpNET.html" target="_blank" rel="noopener">DOC</a></p>
</li>
<li><p>使用预签名 URL 上传对象<br><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/UploadObjectPreSignedURLDotNetSDK.html" target="_blank" rel="noopener">DOC</a></p>
</li>
<li><p>使用 适用于 .NET 的 AWS 开发工具包 获取对象<br><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/RetrievingObjectUsingNetSDK.html" target="_blank" rel="noopener">DOC</a></p>
</li>
</ul>
<h2 id="Develope"><a href="#Develope" class="headerlink" title="Develope"></a>Develope</h2><ul>
<li>Configuring Your AWS SDK for .NET Application<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;appSettings&gt;</span><br><span class="line">    &lt;add key=<span class="string">"AWSRegion"</span> value=<span class="string">"ap-northeast-1"</span>/&gt;</span><br><span class="line">    &lt;add key=<span class="string">"AWSLogging"</span> value=<span class="string">"log4net"</span>/&gt;</span><br><span class="line">    &lt;add key=<span class="string">"AWSProfilesLocation"</span> value=<span class="string">"E:\credentials"</span> /&gt;</span><br><span class="line">  &lt;/appSettings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>E:\credentials</code> 记录的就是 一个IAM 用户的 安全证书</p>
<p>里面记录这 访问密钥ID和key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id=your id</span><br><span class="line">aws_secret_access_key=your key</span><br></pre></td></tr></table></figure></p>
<h2 id="使用-ACL-管理访问"><a href="#使用-ACL-管理访问" class="headerlink" title="使用 ACL 管理访问"></a>使用 ACL 管理访问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PutObjectRequest putRequest2 = new PutObjectRequest</span><br><span class="line">&#123;</span><br><span class="line">	BucketName = bucketName,</span><br><span class="line">	Key = keyName,</span><br><span class="line">	FilePath = filePath,</span><br><span class="line">   CannedACL = S3CannedACL.PublicRead</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上传的文件可以直接用外部RUL访问到了。</p>
<h2 id="传输加速-Amazon-S3-Transfer-Acceleration"><a href="#传输加速-Amazon-S3-Transfer-Acceleration" class="headerlink" title="传输加速  Amazon S3 Transfer Acceleration"></a>传输加速  Amazon S3 Transfer Acceleration</h2><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/transfer-acceleration.html" target="_blank" rel="noopener">说明文档</a></p>
<p>Amazon S3 Transfer Acceleration 可在客户与 S3 存储桶之间实现快速、轻松、安全的远距离文件传输。传输加速 利用 Amazon CloudFront 的全球分布式边缘站点。当数据到达某个边缘站点时，会被经过优化的网络路径路由至 Amazon S3。</p>
<p>在使用 传输加速 时，可能会收取额外的数据传输费</p>
<h2 id="使用加密保护数据"><a href="#使用加密保护数据" class="headerlink" title="使用加密保护数据"></a>使用加密保护数据</h2><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/UsingEncryption.html" target="_blank" rel="noopener">文档</a></p>
<ul>
<li><p>使用服务器端加密</p>
</li>
<li><p>使用客户端加密</p>
</li>
</ul>
<h2 id="跨源资源共享-CORS"><a href="#跨源资源共享-CORS" class="headerlink" title="跨源资源共享 (CORS)"></a>跨源资源共享 (CORS)</h2><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/cors.html" target="_blank" rel="noopener">文档</a></p>
<p><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/ManageCorsUsingDotNet.html" target="_blank" rel="noopener">Code</a></p>
<h2 id="对象标签"><a href="#对象标签" class="headerlink" title="对象标签"></a>对象标签</h2><p><a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/object-tagging.html" target="_blank" rel="noopener">文档</a></p>
<h2 id="访问策略语言"><a href="#访问策略语言" class="headerlink" title="访问策略语言"></a>访问策略语言</h2><p><a href="https://docs.amazonaws.cn/AmazonS3/latest/dev/access-policy-language-overview.html" target="_blank" rel="noopener">访问策略语言</a></p>
<p><code>aws s3 ls s3://mybucket --recursive</code></p>
]]></content>
      
        <categories>
            
            <category> AWS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> S3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Autofac(一)]]></title>
      <url>http://ccccccmd.rootu.cn/2017/02/13/autofac/</url>
      <content type="html"><![CDATA[<h2 id="什么是注册"><a href="#什么是注册" class="headerlink" title="什么是注册"></a>什么是注册</h2><p>Autofac 通过创建一个 <code>ContainerBuilder</code> 来注册你的组件。它的目的是告诉你的组件要实现那个服务。</p>
<p><code>ContainerBuilder</code>里有很多 <code>Register</code>方法来完成。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 创建注册组件/服务的builder.</span><br><span class="line">var builder = new ContainerBuilder();</span><br><span class="line"></span><br><span class="line">// 注册暴露指定接口的类型</span><br><span class="line">builder.RegisterType&lt;ConsoleLogger&gt;().As&lt;ILogger&gt;();</span><br><span class="line"></span><br><span class="line">// 注册创建的对象实例</span><br><span class="line">var output = new StringWriter();</span><br><span class="line">builder.RegisterInstance(output).As&lt;TextWriter&gt;();</span><br><span class="line"></span><br><span class="line">// 注册创建对象的匿名函数</span><br><span class="line">builder.Register(c =&gt; new ConfigReader(<span class="string">"mysection"</span>)).As&lt;IConfigReader&gt;();</span><br></pre></td></tr></table></figure>
<h2 id="反射组件"><a href="#反射组件" class="headerlink" title="反射组件"></a>反射组件</h2><ul>
<li>通过类型注册：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var builder = new ContainerBuilder();</span><br><span class="line">builder.RegisterType&lt;ConsoleLogger&gt;();</span><br><span class="line">builder.RegisterType(typeof(ConfigReader));</span><br></pre></td></tr></table></figure>
<p>Autofac automatically uses the constructor for your class with the most parameters that are able to be obtained from the container.</p>
<ul>
<li>指定构造函数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterType&lt;MyComponent&gt;()</span><br><span class="line">       .UsingConstructor(typeof(ILogger), typeof(IConfigReader));</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>实例组件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var output = new StringWriter();</span><br><span class="line">builder.RegisterInstance(output).As&lt;TextWriter&gt;();</span><br></pre></td></tr></table></figure>
<ul>
<li>Lambda表达式组件</li>
</ul>
<p>适合复杂的注册逻辑</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.Register(c =&gt; new A(c.Resolve&lt;B&gt;()));</span><br></pre></td></tr></table></figure>
<ul>
<li>复杂的参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.Register(c =&gt; new UserSession(DateTime.Now.AddMinutes(25)));</span><br></pre></td></tr></table></figure>
<ul>
<li><p>属性注入</p>
<p>如果是表达式组件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.Register(c =&gt; new A &#123; B = c.Resolve&lt;B&gt;() &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>为了支持循环依赖检测，可以用下面这种更灵活的方式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.Register(c =&gt; new A()).OnActivated(e =&gt; e.Instance.B = e.Context.Resolve&lt;B&gt;());</span><br></pre></td></tr></table></figure>
<p>其余情况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//If the component is a reflection component, use the PropertiesAutowired() modifier to inject properties:</span><br><span class="line"></span><br><span class="line">builder.RegisterType&lt;A&gt;().PropertiesAutowired();</span><br><span class="line"></span><br><span class="line">//If you have one specific property and value to wire up, you can use the WithProperty() modifier:</span><br><span class="line"></span><br><span class="line">builder.RegisterType&lt;A&gt;().WithProperty(<span class="string">"PropertyName"</span>, propertyValue);</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">builder.Register&lt;CreditCard&gt;(</span><br><span class="line">  (c, p) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">      var accountId = p.Named&lt;string&gt;(<span class="string">"accountId"</span>);</span><br><span class="line">      <span class="keyword">if</span> (accountId.StartsWith(<span class="string">"9"</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">return</span> new GoldCard(accountId);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">return</span> new StandardCard(accountId);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">    var card = container.Resolve&lt;CreditCard&gt;(new NamedParameter(<span class="string">"accountId"</span>, <span class="string">"12345"</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>方法注入</li>
</ul>
<p>使用方法给某个组件设置注入值的最简单方法就是使用Lambda表达式组件并且在注册时调用这个方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">builder.Register(c =&gt; &#123;</span><br><span class="line">  var result = new MyObjectType();</span><br><span class="line">  var dep = c.Resolve&lt;TheDependency&gt;();</span><br><span class="line">  result.SetTheDependency(dep);</span><br><span class="line">  <span class="built_in">return</span> result;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>如果不能使用Lambda注册的话，可以添加一个激活事件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">builder</span><br><span class="line">  .Register&lt;MyObjectType&gt;()</span><br><span class="line">  .OnActivating(e =&gt; &#123;</span><br><span class="line">    var dep = e.Context.Resolve&lt;TheDependency&gt;();</span><br><span class="line">    e.Instance.SetTheDependency(dep);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>泛型组件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterGeneric(typeof(NHibernateRepository&lt;&gt;))</span><br><span class="line">       .As(typeof(IRepository&lt;&gt;))</span><br><span class="line">       .InstancePerLifetimeScope();</span><br><span class="line"></span><br><span class="line">// Autofac will <span class="built_in">return</span> an NHibernateRepository&lt;Task&gt;</span><br><span class="line">var tasks = container.Resolve&lt;IRepository&lt;Task&gt;&gt;();</span><br><span class="line">```       </span><br><span class="line"></span><br><span class="line"><span class="comment">## Services vs. Components</span></span><br><span class="line"></span><br><span class="line">你注册了一个组件，就要告诉autofac，这个组件是给谁实现的。默认是给自己</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">// This exposes the service <span class="string">"CallLogger"</span></span><br><span class="line">builder.RegisterType&lt;CallLogger&gt;();</span><br><span class="line"></span><br><span class="line">// This will work because the component</span><br><span class="line">// exposes the <span class="built_in">type</span> by default:</span><br><span class="line"></span><br><span class="line">scope.Resolve&lt;CallLogger&gt;();</span><br><span class="line"></span><br><span class="line">// This will NOT work because we didn<span class="string">'t</span></span><br><span class="line"><span class="string">// tell the registration to also expose</span></span><br><span class="line"><span class="string">// the ILogger interface on CallLogger:</span></span><br><span class="line"><span class="string">scope.Resolve&lt;ILogger&gt;();</span></span><br></pre></td></tr></table></figure>
<p>我们可以将这个组件暴露给多个服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterType&lt;CallLogger&gt;()</span><br><span class="line">       .As&lt;ILogger&gt;()</span><br><span class="line">       .As&lt;ICallInterceptor&gt;();</span><br></pre></td></tr></table></figure></p>
<p>如果你的组件暴露给了一个服务，那么默认的服务就被覆盖了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// These will both work because we exposed</span><br><span class="line">// the appropriate services <span class="keyword">in</span> the registration:</span><br><span class="line">scope.Resolve&lt;ILogger&gt;();</span><br><span class="line">scope.Resolve&lt;ICallInterceptor&gt;();</span><br><span class="line"></span><br><span class="line">// This WON<span class="string">'T WORK anymore because we specified</span></span><br><span class="line"><span class="string">// service overrides on the component:</span></span><br><span class="line"><span class="string">scope.Resolve&lt;CallLogger&gt;();</span></span><br></pre></td></tr></table></figure>
<p>也能用默认的服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterType&lt;CallLogger&gt;()</span><br><span class="line">       .AsSelf()</span><br><span class="line">       .As&lt;ILogger&gt;()</span><br><span class="line">       .As&lt;ICallInterceptor&gt;();</span><br><span class="line">Now all of these will work:</span><br><span class="line"></span><br><span class="line">// These will all work because we exposed</span><br><span class="line">// the appropriate services <span class="keyword">in</span> the registration:</span><br><span class="line">scope.Resolve&lt;ILogger&gt;();</span><br><span class="line">scope.Resolve&lt;ICallInterceptor&gt;();</span><br><span class="line">scope.Resolve&lt;CallLogger&gt;();</span><br></pre></td></tr></table></figure>
<ul>
<li>默认注册</li>
</ul>
<p>如果多个组件暴露了统一服务，那个，最后一个作为该服务的默认实现</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builder.Register&lt;ConsoleLogger&gt;().As&lt;ILogger&gt;();</span><br><span class="line">builder.Register&lt;FileLogger&gt;().As&lt;ILogger&gt;();</span><br></pre></td></tr></table></figure>
<p>使用PreserveExistingDefaults()可以改变：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builder.Register&lt;ConsoleLogger&gt;().As&lt;ILogger&gt;();</span><br><span class="line">builder.Register&lt;FileLogger&gt;().As&lt;ILogger&gt;().PreserveExistingDefaults();</span><br></pre></td></tr></table></figure></p>
<ul>
<li>带条件注册</li>
</ul>
<p>上面提到的集中注册方式已经可以满足大部分的注册情况。但是针对一些特定情况的条件注册，autofac提供了两个扩展方法：</p>
<p><code>OnlyIf()</code> - Provide a lambda that uses an IComponentRegistry to determine if a registration should happen.</p>
<p><code>IfNotRegistered()</code>- Shortcut to stop a registration from happening if some other service is already registered.</p>
<p>这两个扩展都在<code>ContainerBuilder.Build()</code>时候执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">var builder = new ContainerBuilder();</span><br><span class="line"></span><br><span class="line">// Only ServiceA will be registered.</span><br><span class="line">// Note the IfNotRegistered takes the SERVICE TYPE to</span><br><span class="line">// check <span class="keyword">for</span> (the As&lt;T&gt;), NOT the COMPONENT TYPE</span><br><span class="line">// (the RegisterType&lt;T&gt;).</span><br><span class="line">builder.RegisterType&lt;ServiceA&gt;()</span><br><span class="line">       .As&lt;IService&gt;();</span><br><span class="line">builder.RegisterType&lt;ServiceB&gt;()</span><br><span class="line">       .As&lt;IService&gt;()</span><br><span class="line">       .IfNotRegistered(typeof(IService));</span><br><span class="line"></span><br><span class="line">// HandlerA WILL be registered - it<span class="string">'s running</span></span><br><span class="line"><span class="string">// BEFORE HandlerB has a chance to be registered</span></span><br><span class="line"><span class="string">// so the IfNotRegistered check won'</span>t find it.</span><br><span class="line">//</span><br><span class="line">// HandlerC will NOT be registered because it</span><br><span class="line">// runs AFTER HandlerB. Note it can check <span class="keyword">for</span></span><br><span class="line">// the <span class="built_in">type</span> <span class="string">"HandlerB"</span> because HandlerB registered</span><br><span class="line">// AsSelf() not just As&lt;IHandler&gt;(). Again,</span><br><span class="line">// IfNotRegistered can only check <span class="keyword">for</span> <span class="string">"As"</span></span><br><span class="line">// types.</span><br><span class="line">builder.RegisterType&lt;HandlerA&gt;()</span><br><span class="line">       .AsSelf()</span><br><span class="line">       .As&lt;IHandler&gt;()</span><br><span class="line">       .IfNotRegistered(typeof(HandlerB));</span><br><span class="line">builder.RegisterType&lt;HandlerB&gt;()</span><br><span class="line">       .AsSelf()</span><br><span class="line">       .As&lt;IHandler&gt;();</span><br><span class="line">builder.RegisterType&lt;HandlerC&gt;()</span><br><span class="line">       .AsSelf()</span><br><span class="line">       .As&lt;IHandler&gt;()</span><br><span class="line">       .IfNotRegistered(typeof(HandlerB));</span><br><span class="line"></span><br><span class="line">// Manager will be registered because both an IService</span><br><span class="line">// and HandlerB are registered. The OnlyIf predicate</span><br><span class="line">// can allow a lot more flexibility.</span><br><span class="line">builder.RegisterType&lt;Manager&gt;()</span><br><span class="line">       .As&lt;IManager&gt;()</span><br><span class="line">       .OnlyIf(reg =&gt;</span><br><span class="line">         reg.IsRegistered(new TypedService(typeof(IService))) &amp;&amp;</span><br><span class="line">         reg.IsRegistered(new TypedService(typeof(HandlerB))));</span><br><span class="line"></span><br><span class="line">// This is when the conditionals actually run. Again,</span><br><span class="line">// they run <span class="keyword">in</span> the order the registrations were added</span><br><span class="line">// to the ContainerBuilder.</span><br><span class="line">var container = builder.Build();</span><br></pre></td></tr></table></figure>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><a href="http://autofac.readthedocs.io/en/latest/lifetime/disposal.html" target="_blank" rel="noopener">disposal</a></p>
]]></content>
      
        <categories>
            
            <category> Autofac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Autofac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java-review]]></title>
      <url>http://ccccccmd.rootu.cn/2017/01/16/java-review/</url>
      <content type="html"><![CDATA[<h2 id="4类8种类型"><a href="#4类8种类型" class="headerlink" title="4类8种类型"></a>4类8种类型</h2><ul>
<li><p>整性 byte   short  int  long</p>
</li>
<li><p>浮点  float  double</p>
</li>
<li><p>字符型 char</p>
</li>
<li><p>布尔型 boolean</p>
</li>
</ul>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><ul>
<li>public </li>
<li>protected （本包内和外部包<strong>子类</strong>可用，不是子类实例，是子类<strong>里面</strong>）</li>
<li>default （只在本包内和自己能用，包括继承也不行）</li>
<li>private</li>
</ul>
<a id="more"></a>
<h2 id="接口也是数据类型"><a href="#接口也是数据类型" class="headerlink" title="接口也是数据类型"></a>接口也是数据类型</h2><p><code>implements</code> 实现<br><code>extends</code>  继承</p>
<h2 id="多态中成员特点："><a href="#多态中成员特点：" class="headerlink" title="多态中成员特点："></a>多态中成员特点：</h2><p> 编译的时候，参考父类中的有没有这个变量和方法，如果有，编译通过，没有编译失败</p>
<p> 运行的时候，运行的是父类中的变量值。</p>
<p> 静态方法，运行父类中的静态方法。<br> 非静态方法，运行子类的重写方法。</p>
<h2 id="子类的构造函数一定要调用父类的构造函数。-super-在子类的构造函数的第一行。"><a href="#子类的构造函数一定要调用父类的构造函数。-super-在子类的构造函数的第一行。" class="headerlink" title="子类的构造函数一定要调用父类的构造函数。 super(); 在子类的构造函数的第一行。"></a>子类的构造函数一定要调用父类的构造函数。 super(); 在子类的构造函数的第一行。</h2><h2 id="final-最终的，不可变。"><a href="#final-最终的，不可变。" class="headerlink" title="final 最终的，不可变。"></a>final 最终的，不可变。</h2><ul>
<li>修饰的方法不能被子类重写；</li>
<li>修饰的类不能被继承；</li>
<li>修饰变量，一次赋值，不能改变了。引用类型也是一样的，地址不会变；和C#的 <code>const</code>差不多<br>保证变量被<strong>赋值一次</strong>，可以手动赋值，也可以用构造器赋值。</li>
</ul>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>   被static修饰的成员，是类的共享数据。可以用类直接调用和C#一样，也可以用实例去调用，效果一样。</p>
<h2 id="内部类-，也可以定义到方法中。"><a href="#内部类-，也可以定义到方法中。" class="headerlink" title="内部类 ，也可以定义到方法中。"></a>内部类 ，也可以定义到方法中。</h2><h2 id="代码块，限制变量作用域"><a href="#代码块，限制变量作用域" class="headerlink" title="代码块，限制变量作用域"></a>代码块，限制变量作用域</h2><ul>
<li>静态代码块》构造代码块》构造函数</li>
</ul>
<h2 id="java-lang-包是不用导入的。直接用"><a href="#java-lang-包是不用导入的。直接用" class="headerlink" title="java.lang 包是不用导入的。直接用"></a>java.lang 包是不用导入的。直接用</h2><h2 id="classpath的环境变量。-build-path"><a href="#classpath的环境变量。-build-path" class="headerlink" title="classpath的环境变量。 build path"></a>classpath的环境变量。 build path</h2><h2 id="StringBuffer-线程安全"><a href="#StringBuffer-线程安全" class="headerlink" title="StringBuffer 线程安全"></a>StringBuffer 线程安全</h2><h2 id="StringBuilder-是线程不安全的，api和StringBuffer-完全一样"><a href="#StringBuilder-是线程不安全的，api和StringBuffer-完全一样" class="headerlink" title="StringBuilder 是线程不安全的，api和StringBuffer 完全一样"></a>StringBuilder 是线程不安全的，api和StringBuffer 完全一样</h2><h2 id="DateFormat-抽象"><a href="#DateFormat-抽象" class="headerlink" title="DateFormat 抽象"></a>DateFormat 抽象</h2><h2 id="各类型的包装类"><a href="#各类型的包装类" class="headerlink" title="各类型的包装类"></a>各类型的包装类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a=127;</span><br><span class="line">Integer b=127;</span><br><span class="line">a==b    ture;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a=127;</span><br><span class="line">Integer b=127;</span><br><span class="line">a==b    <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>数据在byte范围内，JVM不会从新new对象的。</p>
</blockquote>
<h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><ul>
<li>处理浮点数</li>
</ul>
<h2 id="Collection-集合的根接口"><a href="#Collection-集合的根接口" class="headerlink" title="Collection  集合的根接口"></a>Collection  集合的根接口</h2><ul>
<li>List 有序，有索引，元素可重复</li>
<li>实现类 ArrayList,LinkedList</li>
</ul>
<h2 id="Iterable-增强for循环。foreach"><a href="#Iterable-增强for循环。foreach" class="headerlink" title="Iterable 增强for循环。foreach"></a>Iterable 增强for循环。foreach</h2><ul>
<li>迭代器工作的时候，数组的长度不能变</li>
</ul>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul>
<li>java中的泛型是伪泛型；只是编译的时候用的，运行的时候根本没有泛型的的概念</li>
<li><p>安全机制</p>
</li>
<li><p>通配符是 <code>?</code></p>
</li>
</ul>
<h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul>
<li>被ArrayList取代，但是线程安全</li>
</ul>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul>
<li><p>无序，不重复，无索引</p>
</li>
<li><p>实现类 HashSet(根据hashcode，equals判重复的)</p>
<p>LinkedHashSet,有序的</p>
</li>
<li><p>两个对象的hashcode()相同，equals不一定是true<br>equals相同，hashcode一定相同</p>
</li>
</ul>
<h2 id="Map-键值对"><a href="#Map-键值对" class="headerlink" title="Map 键值对"></a>Map 键值对</h2><ul>
<li>增强for不能遍历map的，没有实现iterable接口</li>
<li>LinkedHashCode</li>
<li><p>HashMap<br>put，当传入重复的键时，会覆盖原有的值，并反回新的值。否则总是返回null</p>
<p>entrySet()  存储的是关系</p>
<h2 id="集合工具类"><a href="#集合工具类" class="headerlink" title="集合工具类"></a>集合工具类</h2></li>
<li><p>Collections</p>
</li>
</ul>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul>
<li>void GetSum(int…a)</li>
</ul>
<h2 id="异常-Throwable"><a href="#异常-Throwable" class="headerlink" title="异常  Throwable"></a>异常  Throwable</h2><ul>
<li><p>Error</p>
</li>
<li><p>Exception</p>
</li>
</ul>
<p>public void check() throws ，NullPinterException,Exception{}</p>
<ul>
<li><p>多catch  捕获，注意异常的层次关系，父类放到最后</p>
</li>
<li><p>RunTimeException  运行时期异常<br>如果是运行时异常，方法上可以不写throws</p>
</li>
</ul>
<h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ul>
<li>File<br>delete();<br>mkdirs();<br>getName();//文件或文件夹名字<br>longth();<br>list();<br>listFiles();</li>
</ul>
<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ABP and Angular]]></title>
      <url>http://ccccccmd.rootu.cn/2017/01/12/abp-angular/</url>
      <content type="html"><![CDATA[<ul>
<li><p>下载 abp angular 项目模板<br>先装yarn<br>然后yarn install<br>npm start<br>ng serve</p>
</li>
<li><p>菜单配置 在layout/sidebar-nav.component.ts</p>
</li>
<li><p>然后在客户端运行nswag / refresh.bat文件以重新生成服务代理类（它们用于调用服务器端服务方法）。</p>
</li>
<li><p>service-proxy.module.ts  添加   ApiServiceProxies.LotteryServiceProxy</p>
</li>
</ul>
<p>更换语言</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.module.ts</span><br><span class="line">import localeZhHans from <span class="string">'@angular/common/locales/zh-Hans'</span>;</span><br><span class="line">import &#123; registerLocaleData &#125; from <span class="string">'@angular/common'</span>;</span><br><span class="line">registerLocaleData(localeZhHans);</span><br></pre></td></tr></table></figure>
<ul>
<li>组件，指定都用要用angular-cli生成，需要注意修改：</li>
</ul>
<p>子组件的selector</p>
<p>form 的id</p>
<ul>
<li>代码生成器生成的字段_id要去掉</li>
</ul>
<p>指令写法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, Input, ElementRef, OnInit &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line">import moment from <span class="string">'moment'</span>;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: <span class="string">'[cnode-from-now]'</span> // Attribute selector</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">export</span> class CnodeFromNowDirective implements OnInit &#123;</span><br><span class="line"></span><br><span class="line">    @Input(<span class="string">'cnode-from-now'</span>) dateTime: Date;</span><br><span class="line">    constructor(private ele: ElementRef) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ngOnInit(): void &#123;</span><br><span class="line">        (&lt;HTMLElement&gt;this.ele.nativeElement).innerText = moment(this.dateTime).locale(<span class="string">'zh-cn'</span>).fromNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ABP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ABP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[identityserver]]></title>
      <url>http://ccccccmd.rootu.cn/2017/01/12/identityserver/</url>
      <content type="html"><![CDATA[<p>center identityserver</p>
<p>api IdentityServer4.AccessTokenValidation</p>
<p>client identity.model</p>
]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker]]></title>
      <url>http://ccccccmd.rootu.cn/2017/01/12/docker/</url>
      <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul>
<li>docker的安装</li>
</ul>
<p><a href="https://yeasy.gitbooks.io/docker_practice/content/install/centos.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/install/centos.html</a></p>
<p>systemctl enable docker</p>
<p>usermod -aG docker $USER</p>
<p>systemctl start docker</p>
<p>docker run hello-world</p>
<ul>
<li>镜像加速器</li>
</ul>
<p>/etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>$ sudo systemctl daemon-reload<br>$ sudo systemctl restart docker</p>
<p><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p>
<ul>
<li>安装 docker-compose   </li>
</ul>
<p>sudo curl -L <a href="https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$</a>(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</p>
<p>chmod +x /usr/local/bin/docker-compose</p>
<p>docker-compose –version</p>
<ul>
<li>depends_on 和 links 区别</li>
</ul>
<p><a href="https://stackoverflow.com/questions/35832095/difference-between-links-and-depends-on-in-docker-compose-yml" target="_blank" rel="noopener">https://stackoverflow.com/questions/35832095/difference-between-links-and-depends-on-in-docker-compose-yml</a></p>
<p><a href="http://einverne.github.io/post/2018/03/docker-compose-links-vs-depends-on-differences.html" target="_blank" rel="noopener">http://einverne.github.io/post/2018/03/docker-compose-links-vs-depends-on-differences.html</a></p>
<ul>
<li>在后台启动并运行所有的容器</li>
</ul>
<p>docker-compose up -d</p>
<p>docker container ls</p>
<p>docker container logs</p>
<p>docker-compose logs<br>docker-compose ps</p>
<p>docker container exec -it 334762bf6ca7 /bin/bash</p>
<p>docker-compose ps –services</p>
<ul>
<li>基于内核虚拟化技术  KVM 硬件虚拟化</li>
</ul>
<p><code>yum install docker</code></p>
<p><code>docker pull centos</code></p>
<p><code>docker images</code></p>
<p><code>docker save centos &gt; /home/centos.tar.gz</code></p>
<p><code>docker load &lt; /home/centos.tar.gz</code></p>
<p><code>docker run -name ccccccmd -t -i centos /bin/bash</code></p>
<p><code>docker ps -a</code></p>
<p><code>docker start containerid</code></p>
<p><code>docker attach</code>  重新进入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format <span class="string">"&#123;&#123;.State.Pid&#125;&#125; containerid"</span>`</span><br></pre></td></tr></table></figure>
<p><code>nsenter -t pid -i -u -p -n</code></p>
<a id="more"></a>
<h2 id="网络访问"><a href="#网络访问" class="headerlink" title="网络访问"></a>网络访问</h2><p><code>docker run -P -d nginx</code></p>
<p><code>docker run -p 121:80 -d nginx</code></p>
<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p><code>docker run -it -v /code:/dockercode centos</code>  把本机的/code 目录挂载到docker里</p>
<h2 id="容器构建"><a href="#容器构建" class="headerlink" title="容器构建"></a>容器构建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mynginx -it centos</span><br><span class="line">yum install -y nginx</span><br><span class="line">docker commit -m <span class="string">"my nginx"</span> containerid rootu.cn/mynginx:v1</span><br><span class="line">docker run -d -P 123:80 rootu.cn/mynginx:v1</span><br></pre></td></tr></table></figure>
<h2 id="Dockerfile-构建"><a href="#Dockerfile-构建" class="headerlink" title="Dockerfile 构建"></a>Dockerfile 构建</h2><p>to be continued..</p>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angular.js]]></title>
      <url>http://ccccccmd.rootu.cn/2017/01/02/%E6%8E%A2%E7%B4%A2angular/</url>
      <content type="html"><![CDATA[<h2 id="angular-js-体验"><a href="#angular-js-体验" class="headerlink" title="angular.js 体验"></a>angular.js 体验</h2><ul>
<li>SPA 单页面应用</li>
</ul>
<p><code>http://www.rootu.cn:8000/get/users?openid=xx#tab</code></p>
<p>pathname:/get/users<br>search:?openid=xx<br>hash:#tab<br>hostname：<a href="http://www.rootu.cn" target="_blank" rel="noopener">www.rootu.cn</a></p>
<ul>
<li><p>通过指令扩展了html</p>
</li>
<li><p>更少的代码，实现更劲爆的功能</p>
</li>
</ul>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><ul>
<li>用 <code>bower</code> 维护angular</li>
</ul>
<blockquote>
<p>bower init</p>
</blockquote>
<blockquote>
<p>bower install angular –save</p>
</blockquote>
<a id="more"></a>
<h2 id="指令-directive"><a href="#指令-directive" class="headerlink" title="指令 directive"></a>指令 directive</h2><ul>
<li>ng-model  双向绑定</li>
</ul>
<h2 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块 Module"></a>模块 Module</h2><blockquote>
<p>var app=angular.module(‘myApp’,[]);</p>
</blockquote>
<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><h2 id="scope"><a href="#scope" class="headerlink" title="$scope"></a>$scope</h2><p>上下文模型，暴露数据，暴露行为，数据监视</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var App=angular.module(<span class="string">'myapp'</span>,[]);</span><br><span class="line"></span><br><span class="line">App.controller(<span class="string">'mycontroller'</span>,[<span class="string">'$scope'</span>,<span class="keyword">function</span>(<span class="variable">$scope</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>
<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><ul>
<li>一个页面可以有多个模块，但是不能嵌套<h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2></li>
<li>ng-repeat=”(key,v) in dics”</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng-bind    &#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>ng-if=”1”   控制元素是否存在</p>
</li>
<li><p>ng-show=”true”  控制元素是否显示</p>
</li>
<li><p>ng-src</p>
</li>
<li><p>ng-class=”{myclass:true}”</p>
</li>
<li><p>ng-href</p>
</li>
<li><p>ng-include=”‘head.html’”</p>
</li>
</ul>
<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">App.directive(<span class="string">'mytag'</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line"></span><br><span class="line">    restrict: <span class="string">'EA'</span>,</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;hello world&lt;/h1&gt;'</span>,</span><br><span class="line">    templateUrl=<span class="string">'mytmp.html'</span>,</span><br><span class="line">    replace:<span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// E： 元素</span><br><span class="line">// A:  属性</span><br><span class="line">// C:  类名</span><br><span class="line">// M:  备注或注释</span><br></pre></td></tr></table></figure>
<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><ul>
<li>ng-bind=’name’ 不会闪</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;name&#125;&#125;   ng-cloak</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng-bind-template=<span class="string">"&#123;&#123;name&#125;&#125;&#123;&#123;age&#125;&#125;"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>ng-model</p>
</li>
<li><p>ng-dblclick</p>
</li>
<li><p>ng-blur</p>
</li>
<li><p>ng-switch on=””  ng-switch-when=””</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> angular.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[表达式树(一)]]></title>
      <url>http://ccccccmd.rootu.cn/2017/01/02/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>用最原始的方式构造表达式树：</p>
<p><code>1.-a</code>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ParameterExpression expDoubleA = Expression.Parameter(typeof(double), <span class="string">"a"</span>);</span><br><span class="line">UnaryExpression unaryExp = Expression.Negate(expDoubleA);</span><br><span class="line">Console.WriteLine(unaryExp.ToString());</span><br></pre></td></tr></table></figure></p>
<p><code>2.a+b*2</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ParameterExpression expDoubleB = Expression.Parameter(typeof(double), <span class="string">"b"</span>);</span><br><span class="line">BinaryExpression exp2MuliplyB = Expression.Multiply(expDoubleB, Expression.Constant(2.0));</span><br><span class="line">BinaryExpression aAdd2MultiplyB = Expression.Add(expDoubleA, exp2MuliplyB);</span><br><span class="line">Console.WriteLine(aAdd2MultiplyB.ToString());</span><br></pre></td></tr></table></figure>
<p><code>3.Math.Sin(a) + Math.Cos(b)</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MethodCallExpression m1 = Expression.Call(null, typeof(Math).GetMethod(<span class="string">"Sin"</span>, BindingFlags.Public | BindingFlags.Static), expDoubleA);</span><br><span class="line">MethodCallExpression m2 = Expression.Call(null, typeof(Math).GetMethod(<span class="string">"Cos"</span>, BindingFlags.Public | BindingFlags.Static), expDoubleB);</span><br><span class="line">BinaryExpression sinAddCos = Expression.Add(m1, m2);</span><br><span class="line">Console.WriteLine(sinAddCos.ToString());</span><br></pre></td></tr></table></figure>
<p><code>4.new StringBuilder(“Hello”)</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NewExpression newExp = Expression.New(typeof(StringBuilder)</span><br><span class="line">.GetConstructor(new Type[] &#123; typeof(string) &#125;),</span><br><span class="line"> Expression.Constant(<span class="string">"hello"</span>));</span><br><span class="line">Console.WriteLine(newExp.ToString());</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>5.new double[] { a, b, a + b}</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NewArrayExpression arrayExp = Expression.NewArrayInit(typeof(double), expDoubleA, expDoubleB, Expression.Add(expDoubleA, expDoubleB));</span><br><span class="line">Console.WriteLine(arrayExp);</span><br></pre></td></tr></table></figure>
<p><code>6.a[i – 1] * i</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ParameterExpression arrayIntExp = Expression.Parameter(typeof(int[]), <span class="string">"a"</span>);</span><br><span class="line">ParameterExpression intIExp = Expression.Parameter(typeof(int), <span class="string">"i"</span>);</span><br><span class="line">IndexExpression indexExp = Expression.ArrayAccess(arrayIntExp, new Expression[] &#123; Expression.Subtract(intIExp, Expression.Constant(1)) &#125;)</span><br><span class="line">    ;</span><br><span class="line">BinaryExpression b = Expression.Multiply(indexExp, intIExp);//保证前后两个表达式里的<span class="built_in">type</span>相同</span><br><span class="line">Console.WriteLine(b.ToString());</span><br></pre></td></tr></table></figure>
<p><code>7.a.Length &gt; b | b &gt;= 0</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ParameterExpression paraa = Expression.Parameter(typeof(string), <span class="string">"a"</span>);</span><br><span class="line">ParameterExpression parab = Expression.Parameter(typeof(int), <span class="string">"b"</span>);</span><br><span class="line">BinaryExpression orExp = Expression.Or(Expression.GreaterThan(Expression.Property(paraa, <span class="string">"Length"</span>), parab), Expression.GreaterThan(parab, Expression.Constant(0)));</span><br><span class="line">Console.WriteLine(orExp.ToString());</span><br></pre></td></tr></table></figure>
<p><code>8.new System.Windows.Point() { X = Math.Sin(a), Y = Math.Cos(a) }</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MemberInitExpression pot = Expression.MemberInit(Expression.New(typeof(Point)), new MemberBinding[]</span><br><span class="line">&#123;</span><br><span class="line">Expression.Bind(typeof(Point).GetProperty(<span class="string">"X"</span>), Expression.Call(null,typeof(Math).GetMethod(<span class="string">"Sin"</span>,BindingFlags.Public | BindingFlags.Static),expDoubleA )),</span><br><span class="line">    Expression.Bind(typeof(Point).GetProperty(<span class="string">"Y"</span>),Expression.Call(null,typeof(Math).GetMethod(<span class="string">"Cos"</span>,BindingFlags.Public | BindingFlags.Static),expDoubleA )),</span><br><span class="line">&#125;);</span><br><span class="line">var x = Expression.Lambda(pot);</span><br><span class="line">//注意点，Point是结构体，值类型</span><br><span class="line">Console.WriteLine(x);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Expression&lt;Func&lt;double, Point&gt;&gt; k = (kk) =&gt;  new Point() {X = Math.Sin(kk),Y=Math.Cos(kk)} ;</p>
</blockquote>
<p>最后，缅怀<code>装配脑袋</code>老师</p>
]]></content>
      
        <categories>
            
            <category> Expression Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Expression Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信支付]]></title>
      <url>http://ccccccmd.rootu.cn/2016/12/15/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
      <content type="html"><![CDATA[<h2 id="一-公众号支付"><a href="#一-公众号支付" class="headerlink" title="(一)公众号支付"></a>(一)公众号支付</h2><p>服务号已经开通微信支付。<br>然后在开发配置中，添加好支付授权目录和测试授权目录。</p>
<p>注意：只有在这两个目录下的<code>action</code>才允许进行微信支付相关的操作。</p>
<p><strong>坑：</strong> 这个目录是<code>区分大小写</code>的！所以，在<code>统一下单</code>接口中指定时候<code>notify_url</code>（支付结果通知url），要注意大小写统一。</p>
<p>1.带着<code>openid</code> 和 <code>支付金额</code> 提交支付时候，首先进行<code>统一下单处理</code>,接口和参数<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_1" target="_blank" rel="noopener">详情</a>。</p>
<p>这里面有几个重要的参数：<br><code>out_trade_no</code> 由商户自定义生成，微信支付要求商户订单号保持唯一性（建议根据当前系统时间加随机序列来生成订单号）。重新发起一笔支付要使用原订单号，避免重复支付；已支付过或已调用关单、撤销（的订单号不能重新发起支付。</p>
<p><code>trade_type</code> 交易类型，此时就是<code>JSAPI</code> 了。</p>
<p><code>total_fee</code> 支付金额，单位是分。</p>
<p><code>mch_id</code> 商户号。</p>
<p><code>notify_url</code> 支付结果通知回调url，用于商户接收支付结果<br><a id="more"></a></p>
<p>2.<code>统一下单</code>成功后，会返回一个重要的字段 <code>prepay_id:预支付交易会话标识</code> .</p>
<p>然后网页端调起支付API,<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6" target="_blank" rel="noopener">具体操作看这里</a>。这里面 <code>package</code> 就会用到预支付返回的 <code>prepay_id</code> .</p>
<p>js掉起支付，成功后，如果返回<code>get_brand_wcpay_request：ok</code> 则证明支付完毕。但结果要以会掉url收到的为准。</p>
<p>3.支付完成后，微信会把相关支付结果和用户信息发送给商户，商户需要接收处理，并返回应答。</p>
<p>推送过来的<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_7" target="_blank" rel="noopener">数据</a>.</p>
<p>其中会有：<br><code>transaction_id</code> 微信支付订单号</p>
<p><code>out_trade_no</code> 商户订单号</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">支付成功后推荐关注栏目规则：</span><br><span class="line"></span><br><span class="line">1.      刷卡支付默认有推荐关注。</span><br><span class="line">2.      扫码支付默认有推荐关注。</span><br><span class="line">3.      公众号支付需要5元以上才有推荐关注。</span><br><span class="line">4.      APP支付默认没有，需要申请配置，需要有一定用户规模才可以申请</span><br><span class="line">5.      已经关注的不展示推荐栏</span><br><span class="line">6.      服务号未设置头像的在IOS不展示推荐关注栏</span><br><span class="line">7.      用户取消过关注的默认不勾选</span><br><span class="line">8.      服务商模式的，需要在特约商户开发配置页设置推荐关注appid</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信支付 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MiniProfiler]]></title>
      <url>http://ccccccmd.rootu.cn/2016/12/01/MiniProfiler/</url>
      <content type="html"><![CDATA[<h2 id="MiniProfiler简介"><a href="#MiniProfiler简介" class="headerlink" title="MiniProfiler简介"></a>MiniProfiler简介</h2><p>MiniProfiler是<strong>StarkOverFlow</strong>开源的一款小工具，最惊艳的是可以用来分析<code>EF.linq</code>生成的sql，并可以简洁明了的展示在页面上。</p>
<p>我们可以用 <code>SQLserver profiler</code> 来检测生成的sql，不过有点重，不方便。还可以用<code>Entity Framework Profile</code>,只是这东西收费。</p>
<p>最后选择了 MiniProfiler,<br><a href="https://github.com/MiniProfiler/dotnet" target="_blank" rel="noopener">github上地址</a>，他有很多功能包：</p>
<blockquote>
<p>MiniProfiler - The core functionality</p>
</blockquote>
<blockquote>
<p>MiniProfiler.EF6 - Entity Framework 6+ Integration</p>
</blockquote>
<blockquote>
<p>MiniProfiler.MVC4 - ASP.net MVC 4 and 5 Integration</p>
</blockquote>
<blockquote>
<p>MiniProfiler.Raven - RavenDb Integration</p>
</blockquote>
<blockquote>
<p>MiniProfiler.WCF - WCF Integration</p>
</blockquote>
<blockquote>
<p>MiniProfiler.MongoDb - MongoDB Integration</p>
</blockquote>
<blockquote>
<p>MiniProfiler.EF5 - Entity Framework 4 and 5 Integration</p>
</blockquote>
<p>每个东西是干什么用的，可以看<a href="http://miniprofiler.com/" target="_blank" rel="noopener">官网</a>.</p>
<a id="more"></a>
<h2 id="在EF-Asp-net-MVC使用-MiniProfiler-进行性能监控"><a href="#在EF-Asp-net-MVC使用-MiniProfiler-进行性能监控" class="headerlink" title="在EF+Asp.net MVC使用 MiniProfiler 进行性能监控"></a>在EF+Asp.net MVC使用 MiniProfiler 进行性能监控</h2><p>我在Ef+asp.net mvc的项目中部署 MiniProfiler:<br>首先，先安装他的主要功能模块:</p>
<p>1.<code>Install-Package MiniProfiler</code></p>
<p>2.<code>Install-Package MiniProfiler.EF6</code> 用来监控EF</p>
<p>3.<code>Install-Package MiniProfiler.MVC4</code> 支持MVC4及以上</p>
<p>用nuget装好包之后，我们需要在<strong>Blobal</strong>中启动 MiniProfiler</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protected void Application_BeginRequest()</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (Request.IsLocal)</span><br><span class="line">     &#123;</span><br><span class="line">         MiniProfiler.Start();    </span><br><span class="line">         </span><br><span class="line">         MiniProfilerEF6.Initialize();          </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> protected void Application_EndRequest()</span><br><span class="line"> &#123;</span><br><span class="line">     MiniProfiler.Stop();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>另外，还要在web.config 中增加如下配置节点：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">    &lt;validation validateIntegratedModeConfiguration=<span class="string">"false"</span> /&gt;</span><br><span class="line">    &lt;handlers&gt;</span><br><span class="line">      &lt;add name=<span class="string">"MiniProfiler"</span> path=<span class="string">"mini-profiler-resources/*"</span> verb=<span class="string">"*"</span> <span class="built_in">type</span>=<span class="string">"System.Web.Routing.UrlRoutingModule"</span> resourceType=<span class="string">"Unspecified"</span> preCondition=<span class="string">"integratedMode"</span> /&gt;</span><br><span class="line">    &lt;/handlers&gt;</span><br><span class="line">  &lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure>
<p>最后一步，在_Layout.cshtml中加入：</p>
<blockquote>
<p>@MiniProfiler.RenderIncludes()</p>
</blockquote>
<p>这个是 MiniProfiler的一段脚本文件。这样，就完成了，有EF查询的页面，都会在页面上显示SQL的选项，点开，就可以看到此次EF生成的SQL了。</p>
<p>另外可能在配置完成，打开页面的时候，抛出如下异常</p>
<blockquote>
<p>在尝试添加“Loaded”事件处理程序前，实体框架已在使用一个 DbConfiguration 实例。在使用实体框架前，“Loaded”事件处理程序只能作为应用程序的一部分添加。有关详细信息，请参阅 <a href="http://go.microsoft.com/fwlink/?LinkId=260883。" target="_blank" rel="noopener">http://go.microsoft.com/fwlink/?LinkId=260883。</a></p>
</blockquote>
<p>这要求你要在用Db上下文的之前，初始化<code>MiniProfilerEF6</code>,尝试了几次，可以这样初始化：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void Application_Start()</span><br><span class="line">&#123;</span><br><span class="line">    MiniProfilerEF6.Initialize();</span><br><span class="line">    AreaRegistration.RegisterAllAreas();</span><br><span class="line">    FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br><span class="line">    RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">    BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>基本配置已经完成了，其他用法我们后面在研究。</p>
]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MiniProfiler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cdn-image-cqrs]]></title>
      <url>http://ccccccmd.rootu.cn/2016/11/17/cdn-image-cqrs/</url>
      <content type="html"><![CDATA[<p>用 <code>create.js</code> 动画可能涉及 <code>xhr</code> get请求 cdn 图片，这样，可能会造成跨域请求失败。</p>
<p>可以加  <code>httpresponse Headers</code> 的方式解决 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">    &lt;httpProtocol&gt;</span><br><span class="line">      &lt;customHeaders&gt;</span><br><span class="line">        &lt;add name=<span class="string">"Access-Control-Allow-Origin"</span> value=<span class="string">"*"</span>/&gt;</span><br><span class="line">        &lt;add name=<span class="string">"Access-Control-Allow-Methods"</span> value=<span class="string">"GET,POST,OPTION"</span>/&gt;</span><br><span class="line">        &lt;add name=<span class="string">"Access-Control-Allow-Headers"</span> value=<span class="string">"Content-Type,soapaction"</span>/&gt;</span><br><span class="line">      &lt;/customHeaders&gt;</span><br><span class="line">    &lt;/httpProtocol&gt;</span><br><span class="line">&lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cqrs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webclient-timeout]]></title>
      <url>http://ccccccmd.rootu.cn/2016/11/17/webclient-timeout/</url>
      <content type="html"><![CDATA[<p>在用 <code>webclient</code> 请求下载文件，需要设定请求超时时间。</p>
<p><code>webclient</code> 用的是默认的timeout值，我们可以重写<code>GetWebRequest</code>该方法，<br>自定义timeout的值。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class DownloadFile:WebClient</span><br><span class="line">   &#123;</span><br><span class="line">       private int _timeout = 5000;</span><br><span class="line">       public DownloadFile(int timeout)</span><br><span class="line">       &#123;</span><br><span class="line">           _timeout = timeout;</span><br><span class="line">       &#125;</span><br><span class="line">       protected override WebRequest GetWebRequest(Uri address)</span><br><span class="line">       &#123;</span><br><span class="line">           HttpWebRequest request = (HttpWebRequest)base.GetWebRequest(address);</span><br><span class="line">           request.Timeout = _timeout;</span><br><span class="line">           <span class="built_in">return</span> request;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var wc = new DownloadFile(4000);</span><br><span class="line">wc.DownloadFile(url, x);</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webclient </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EF中的Attach和Entry]]></title>
      <url>http://ccccccmd.rootu.cn/2016/10/24/EF%E4%B8%AD%E7%9A%84Attach%E5%92%8CEntry/</url>
      <content type="html"><![CDATA[<p>看一下两者对state的影响：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DbContext db = new DbContext();</span><br><span class="line">           var car = new <span class="function"><span class="title">Cars</span></span>() &#123; Id = 4, Name = <span class="string">"保时捷"</span> &#125;;</span><br><span class="line">           var en = db.Entry(car);//Detached</span><br><span class="line">           db.Carses.Attach(car);//Unchanged</span><br></pre></td></tr></table></figure>
<p>这里，看下Entry：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DbContext db = new DbContext();</span><br><span class="line">            var car = new <span class="function"><span class="title">Cars</span></span>() &#123; Id = 4, Name = <span class="string">"保时捷"</span> &#125;;</span><br><span class="line">            var en = db.Entry(car);//Detached</span><br><span class="line">            en.State = EntityState.Modified;</span><br><span class="line">            db.SaveChanges();//每个字段都会被更新</span><br><span class="line"></span><br><span class="line">   var car = new <span class="function"><span class="title">Cars</span></span>() &#123; Id = 4 ,Name =<span class="string">"911"</span>&#125;;</span><br><span class="line"></span><br><span class="line">            var en = db.Entry(car);//Detached</span><br><span class="line">            en.State = EntityState.Unchanged;</span><br><span class="line">            car.Name = <span class="string">"xxxx1"</span>;</span><br><span class="line">            db.SaveChanges();//只更新Name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  var car = new <span class="function"><span class="title">Cars</span></span>() &#123; Id = 4 ,Name =<span class="string">"911"</span>&#125;;</span><br><span class="line">            var en = db.Entry(car);//Detached</span><br><span class="line">            en.State = EntityState.Unchanged;</span><br><span class="line">          en.Property(<span class="string">"Name"</span>).IsModified = <span class="literal">true</span>;</span><br><span class="line">            db.SaveChanges();//只更新Name</span><br></pre></td></tr></table></figure></p>
<p>看attach：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var car = new <span class="function"><span class="title">Cars</span></span>() &#123; Id = 4 ,Name =<span class="string">"911"</span>&#125;;</span><br><span class="line">           db.Carses.Attach(car);//Unchanged</span><br><span class="line">           db.SaveChanges();//不会更新</span><br><span class="line"></span><br><span class="line">var car = new <span class="function"><span class="title">Cars</span></span>() &#123; Id = 4&#125;;</span><br><span class="line">           db.Carses.Attach(car);//Unchanged</span><br><span class="line">           car.Name =<span class="string">"911"</span>;</span><br><span class="line">           db.SaveChanges();//只会更新Name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var car = new <span class="function"><span class="title">Cars</span></span>() &#123; Id = 4 ,Name =<span class="string">"911"</span>&#125;;</span><br><span class="line">           var c = db.Carses.FirstOrDefault(x =&gt; x.Id == 4);</span><br><span class="line">           var en = db.Entry(car);//Detached</span><br><span class="line">           db.Carses.Attach(car); //error</span><br></pre></td></tr></table></figure>
<p>看下面的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.var car = db.Carses.FirstOrDefault(x =&gt; x.Id == 4);</span><br><span class="line">            var en = db.Entry(car);//Unchanged  --步骤一</span><br><span class="line">            car.Name = <span class="string">"918"</span>;</span><br><span class="line">            car.CreateTime = DateTime.Now;</span><br><span class="line">            en.State = EntityState.Unchanged;   --步骤四      </span><br><span class="line">            db.SaveChanges();//两个都更新</span><br><span class="line"></span><br><span class="line">2.var car = db.Carses.FirstOrDefault(x =&gt; x.Id == 4);</span><br><span class="line">            var en = db.Entry(car);//Unchanged   --步骤一</span><br><span class="line">            car.Name = <span class="string">"918"</span>;</span><br><span class="line">            car.CreateTime = DateTime.Now;</span><br><span class="line">             var en2 = db.Entry(car);//难道要触发一下？--步骤三</span><br><span class="line">            en.State = EntityState.Unchanged;    --步骤四    </span><br><span class="line">            db.SaveChanges();//两个都不更新</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.var car = db.Carses.FirstOrDefault(x =&gt; x.Id == 4);</span><br><span class="line">            car.Name = <span class="string">"918"</span>;</span><br><span class="line">            car.CreateTime = DateTime.Now;</span><br><span class="line">            var en = db.Entry(car); </span><br><span class="line">            en.State = EntityState.Unchanged;        </span><br><span class="line">            db.SaveChanges();//两个都不更新</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.var car = db.Carses.FirstOrDefault(x =&gt; x.Id == 4);</span><br><span class="line">            var en = db.Entry(car);</span><br><span class="line">            car.Name = <span class="string">"911"</span>;</span><br><span class="line">            car.CreateTime = DateTime.Now;</span><br><span class="line">            var en2 = db.Entry(car);//Modified </span><br><span class="line">            en.State = EntityState.Unchanged;</span><br><span class="line">            car.Name = <span class="string">"918"</span>;</span><br><span class="line">            db.SaveChanges();//只更新Name</span><br></pre></td></tr></table></figure>
<p>看了下SaveChanges()的源码，</p>
<pre><code class="bash">Ef在调用SaveChanges的时候，会调用  this.PrepareToSaveChanges(options);
里面会调用this.ObjectStateManager.DetectChanges();
里面调用this.GetEntityEntriesForDetectChanges();
然后， this.GetEntityEntriesForDetectChanges(this._modifiedEntityStore, ref entries);

**_modifiedEntityStore** 里面放了更改的“对象”。

然后，internal virtual void ChangeState(RelationshipEntry entry, EntityState oldState, EntityState newState)
这个方法里面有个M：private void RemoveObjectStateEntryFromDictionary(EntityEntry entry, EntityState state)
这个方法里有操作_modifiedEntityStore。
internal virtual void ReplaceKeyWithTemporaryKey(EntityEntry entry)中会调用M,
private void AddEntityEntryToDictionary(EntityEntry entry, EntityState state)
最终 this.AlignChangesInRelationships(forDetectChanges);
中间会有很多地方触发ChangeState()方法。

</code></pre>
<p>  弱，没发现什么，推测 <strong>1</strong>中：</p>
<blockquote>
<p> 步骤四状态去比较步骤一，比较状态相同，并没有触发修改（_modifiedEntityStore），但是，修改字段，model已经进入了（_modifiedEntityStore）</p>
</blockquote>
<blockquote>
<p>在4中，中间有触发了一次Entry,这样，三和四的状态不一样，触发更改。</p>
</blockquote>
<p>乱猜的，不知道谁有更好的见解。</p>
]]></content>
      
        <categories>
            
            <category> EntityFramework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> EF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ghost升级]]></title>
      <url>http://ccccccmd.rootu.cn/2016/10/16/ghost%E5%8D%87%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p>升级<strong>Ghost</strong>博客程序的时候，遇到几个坑,我们的环境是<code>阿里云 Centos 7</code>, ghost的版本是<code>0.7</code>，数据存储是<code>mysql</code>：</p>
<h2 id="Node-js的版本："><a href="#Node-js的版本：" class="headerlink" title="Node.js的版本："></a><strong>Node.js</strong>的版本：</h2><p>ghost官方有说明：</p>
<blockquote>
<p>Ghost currently supports Node versions 0.10.x, 0.12.x and 4.2+ only.</p>
</blockquote>
<blockquote>
<p>Ghost is following Node’s LTS plan, only supporting LTS versions of Node </p>
</blockquote>
<p>开始时候把Npm  和 Node.js都升级了，Node.js直接上了6。</p>
<blockquote>
<p>npm install -g n  安装Node.js版本工具<br>n 4.6.0  降级node.js<br><a id="more"></a><br>Npm的升级</p>
</blockquote>
<blockquote>
<p>/usr/lib/node_modules: npm update npm </p>
</blockquote>
<h2 id="Npm的源"><a href="#Npm的源" class="headerlink" title="Npm的源"></a><strong>Npm的源</strong></h2><p>还原包的时候，各种错误：</p>
<blockquote>
<p>npm WARN cannot run in wd</p>
</blockquote>
<p>可以这样：</p>
<blockquote>
<p>GHOST_NODE_VERSION_CHECK=false &amp;&amp; sudo npm install –production</p>
</blockquote>
<blockquote>
<p>Cannot find module ‘moment-timezone’</p>
</blockquote>
<blockquote>
<p>…</p>
</blockquote>
<p>试了官方的方案，也没生效。<a href="http://support.ghost.org/troubleshooting/" target="_blank" rel="noopener">列表在这里</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean</span><br><span class="line">rm -rf node_modules</span><br><span class="line">npm install --production</span><br></pre></td></tr></table></figure></p>
<p>在本地升级，也不行。最后，直接换上淘宝的源，还原成功,MD啥都墙</p>
<blockquote>
<p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>
</blockquote>
<p>然后执行</p>
<blockquote>
<p>cnpm install –production</p>
</blockquote>
<blockquote>
<p>cnpm start   可以完美启动</p>
</blockquote>
<blockquote>
<p>NODE_ENV=production forever start index.js</p>
</blockquote>
<p>Ghost可以继续浪了。</p>
<h2 id="vsftp"><a href="#vsftp" class="headerlink" title="vsftp"></a><strong>vsftp</strong></h2><p>把系统的防火墙换成 <code>iptables</code>后，被动模式总是被挡在外面，无法列目录</p>
<p>在<code>vsftp.confg</code>后面加上这段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pasv_min_port=30000   </span><br><span class="line">pasv_max_port=30005</span><br></pre></td></tr></table></figure></p>
<p>然后修改/etc/sysconf/iptables,出了通过21，22端口后:</p>
<blockquote>
<p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 30000:30005 -j ACCEPT</p>
</blockquote>
<p>官方的升级文档在<a href="http://support.ghost.org/how-to-upgrade/#command-guide" target="_blank" rel="noopener">这里</a></p>
<p>可以从<code>0.7</code>直接整到<code>.11</code>版本的，小于0.7的要一步步升级。</p>
]]></content>
      
        <categories>
            
            <category> Ghost </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ghost </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Exceptionless 本地部署]]></title>
      <url>http://ccccccmd.rootu.cn/2016/10/15/Exceptionless-%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>今天尝试了下在本地部署 <code>Exceptionless</code>，前段过程进展的很顺利，后面在发送邮件的时候出现了一个诡异的问题，先抛在这，<a href="http://stackoverflow.com/questions/20441979/error-in-application-the-specified-string-is-not-in-the-form-required-for-an-e" target="_blank" rel="noopener">这个问题好像有时候不能重现</a>。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Exceptionless</strong> 也是开源项目，老样子，直接上<a href="https://github.com/exceptionless/Exceptionless" target="_blank" rel="noopener">github地址</a>。这是一个开源的分布式日志框架，集成了如日中天的 <code>Elasticsearch</code>, 精致的UI，完美。</p>
<h2 id="本地部署过程"><a href="#本地部署过程" class="headerlink" title="本地部署过程"></a>本地部署过程</h2><p>一种是用官方的发布包直接部署，还有一个是用源码部署，因为中间出了点小问题，我也拖下来源码了，两种方式我都试过了。</p>
<p>这里有本地部署的<a href="https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting" target="_blank" rel="noopener">文档</a> .<br>相应的这些鬼东西<code>.Net 4.6.1</code>, <a href="http://download.oracle.com/otn-pub/java/jdk/8u101-b13/jdk-8u101-windows-x64.exe?AuthParam=1476500757_f264f76c5edce4346dd865f9081fd52a" target="_blank" rel="noopener">Java JDK1.8+</a>,</p>
<p>文档上说说要配置环境变量，jdk装好后，环境变量是加好的，但是在Exceptionless的配置文件中，明确用到了<strong>JAVA_HOME</strong>这个path，所以还是要老老实实的去加。就是在系统变量里新建 <code>JAVA_HOME</code>的节点，值就是你jdk的目录，像这样<code>C:\Program Files\Java\jdk1.8.0_101</code>，然后在用户<code>PATH</code>中补上<code>%JAVA_HOME%\bin;</code><br><a id="more"></a><br>IIS 我是7.5版本，也可以部署成功，powershell 3+要装。</p>
<p>然后就是下载EL的发布包,<a href="https://github.com/exceptionless/Exceptionless/releases" target="_blank" rel="noopener">地址</a>,<br>下载1.7.5的<code>Elasticsearch</code>，明确说明了，还不支持2.x.</p>
<p>两个解压后，把发布包里的<code>elasticsearch.yml</code>复制到<strong>Elasticsearch</strong>的bin下。然后双击<code>elasticsearch.bat</code>启动Elasticsearch的服务，访问<code>http://localhost:9200/</code>如果有返回200的json就说明Elasticsearch服务启动成功了，这个9200端口就是在yml指定的，后面会有用到。</p>
<p>然后看Expressionless的配置了，把他加载到iis上，然后看<code>web.config</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;add name=<span class="string">"ElasticSearchConnectionString"</span> connectionString=<span class="string">"http://localhost:9200"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>这个就是访问Elasticsearch的地址,然后看<code>appSettings</code>节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;add key=<span class="string">"BaseURL"</span> value=<span class="string">"http://localhost:50000/#"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>这个使我们Expressionless的接口地址，到时候，UI会去这个地址调用接口的，所以，也就是文档中说修改<code>app.config.xx.js</code>中的地址和这个统一，<br>他是前后端分离的。</p>
<p>不出意外的话，网站就能启动了，然后就是注册账号，这块涉及到email的激活，还有重置密码发email。</p>
<p>我们还要对Email这块做相应的配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.net&gt;</span><br><span class="line">  &lt;mailSettings&gt;</span><br><span class="line">    &lt;smtp from=<span class="string">"ccccccmd@163.com"</span>&gt;</span><br><span class="line">      &lt;!--&lt;network host=<span class="string">"localhost"</span> port=<span class="string">"25"</span> /&gt;--&gt;</span><br><span class="line">      &lt;network host=<span class="string">"smtp.163.com"</span> port=<span class="string">"25"</span> userName=<span class="string">"ccccccmd@163.com"</span> password=<span class="string">"xxxxx"</span>/&gt;</span><br><span class="line">    &lt;/smtp&gt;</span><br><span class="line">  &lt;/mailSettings&gt;</span><br><span class="line">  &lt;defaultProxy enabled=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/system.net&gt;</span><br></pre></td></tr></table></figure></p>
<p>配置文件中还有个地方:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;add key=<span class="string">"WebsiteMode"</span> value=<span class="string">"Production"</span>/&gt;</span><br><span class="line">&lt;!-- Email addresses that match this comma delimited list of domains and email addresses will be allowed to be sent out <span class="keyword">in</span> Dev and QA mode --&gt;</span><br><span class="line">&lt;add key=<span class="string">"AllowedOutboundAddresses"</span> value=<span class="string">"rootu.cn,163.com"</span>/&gt;</span><br><span class="line">&lt;!-- All emails that <span class="keyword">do</span> not match the AllowedOutboundAddresses will be sent to this address <span class="keyword">in</span> Dev and QA mode --&gt;</span><br><span class="line">&lt;add key=<span class="string">"TestEmailAddress"</span> value=<span class="string">"admin@rootu.cn"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果你的WebsiteMode 是Dev的话，下面两个要做相应设定。</p>
<p>这样配置好的话，已经可以发送邮件了，但是我就出现了最开始出现的问题，说什么也找不到原因，只能希望能在源码里能找到些信息。所以有了下面的源码部署.</p>
<h2 id="源码部署"><a href="#源码部署" class="headerlink" title="源码部署"></a>源码部署</h2><p>Elasticsearch还是以用刚才配置启动的那货。</p>
<p>Clone下来Exceptionless的源码<code>https://github.com/exceptionless/Exceptionless.git</code>,还原NuGet包，编译，修改web.config.</p>
<p>api好像是用的swagger ui弄的。</p>
<p>Clone下来Exceptionless　UI <code>https://github.com/exceptionless/Exceptionless.UI.git</code></p>
<p>他是用bower管理的js，css等，所以，没有node.js环境的，要配置node.js环境，装NPM管理工具。<br>全局安装bower,还原各种依赖：</p>
<blockquote>
<p>npm install -g grunt-cli –save-dev<br>bower install</p>
</blockquote>
<p>前端UI使用grunt部署的，相应的安装grunt，初始化task：</p>
<blockquote>
<p>npm install -g bower –save-dev</p>
</blockquote>
<p>然后执行：</p>
<blockquote>
<p>grunt serve</p>
</blockquote>
<p>启动UI的web 服务器，这样，就可以本地调试了。</p>
<p>调试了半天，最开始以为是邮件的配置信息没加载进去，网站在启动的时候，会掉用<code>Exceptionless.Core 里Settings.cs</code>的初始化方法，加载配置文件里的appsetting里所有的配置节点。但是我们没有配置，所以，smtpclient的配置就是加载system.net里的配置，和我们预想的一样。</p>
<p>后来发现，在<code>RezorEmailGenerator.cs</code>里这个方法</p>
<blockquote>
<p>public MailMessage GenerateMessage(TemplatedEmail templatedEmail) {}</p>
</blockquote>
<p>里面这个地方异常了：</p>
<blockquote>
<p>var mailMessage = new MailMessage { Subject = templatedEmail.Subject};</p>
</blockquote>
<p>这是framework的构造函数啊。</p>
<p><a href="http://stackoverflow.com/questions/20441979/error-in-application-the-specified-string-is-not-in-the-form-required-for-an-e" target="_blank" rel="noopener">这个问题好像有时候不能重现</a>。</p>
<p>后来，他自己好了，我试了好几次，都不能重现。。。。放弃了</p>
<p>环境部署ok了，后面该去尝试在项目中用这个框架了。还要把Elasticsearch放到服务中，不然每次都要跑下脚本。</p>
]]></content>
      
        <categories>
            
            <category> .Net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Exceptionless </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Quartz.net（一）]]></title>
      <url>http://ccccccmd.rootu.cn/2016/10/03/Quartz-net/</url>
      <content type="html"><![CDATA[<h2 id="Quartz-net简介"><a href="#Quartz-net简介" class="headerlink" title="Quartz.net简介"></a>Quartz.net简介</h2><p>Quartz.net是一个很成熟的开源任务调度框架，<a href="‘https://github.com/quartznet/quartznet">开源地址在这里</a>。现在在Nuget上的稳定版本是<code>2.4.1</code>.</p>
<p>Quartz.net中定义了几个重要的角色：</p>
<h3 id="Scheduler-调度器"><a href="#Scheduler-调度器" class="headerlink" title="Scheduler 调度器"></a>Scheduler 调度器</h3><p>他负责整个任务的调度，我们通过<code>StdSchedulerFactory</code>获得一个调度器。</p>
<blockquote>
<p>  ISchedulerFactory schedFact = new StdSchedulerFactory();<br>IScheduler sched = schedFact.GetScheduler();</p>
</blockquote>
<p>调度器创建好了之后，可以添加，移除<code>Job</code> <code>Trigger</code>等，但是，只有他<code>start()</code>了之后，才会真的起作用。</p>
<h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>Job就是我们具体要进行的任务，我们需要自己创建一个<code>class</code>实现<code>Ijob</code>接口里的<code>Execute</code>方法。</p>
<h3 id="JobBuilder"><a href="#JobBuilder" class="headerlink" title="JobBuilder"></a>JobBuilder</h3><p>Quartz.net提供了一个<code>JobBuilder</code>的class帮我们把刚才定义好的的job <code>bulid</code>成<code>JobDetail</code>的实例，在此过程总，我可以指定job的组，标识等。</p>
<blockquote>
<p>var job = JobBuilder.Create<testjob>().WithIdentity(“testjob”,”group1”).Build() ;</testjob></p>
</blockquote>
<h3 id="Trigger"><a href="#Trigger" class="headerlink" title="Trigger"></a>Trigger</h3><p>定义了任务，然后就是要确定，任务在什么时间执行，执行多少次，这就是<code>Trigger</code>要做的事情。</p>
<h3 id="TriggerBuilder"><a href="#TriggerBuilder" class="headerlink" title="TriggerBuilder"></a>TriggerBuilder</h3><p>我们用<code>TriggerBuilder</code>去创建触发器，里面提供了这几个方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WithCalendarIntervalSchedule</span><br><span class="line">WithCronSchedule</span><br><span class="line">WithDailyTimeIntervalSchedule</span><br><span class="line">WithSimpleSchedule</span><br></pre></td></tr></table></figure></p>
<p><code>WithCronSchedule</code>是最实用的，他允许我们用<code>Cron</code>的方式去定义任务的执行规则。<br><a id="more"></a></p>
<h3 id="Common-Logging"><a href="#Common-Logging" class="headerlink" title="Common.Logging"></a>Common.Logging</h3><p>Quartz.net依赖了Common.Logging，可以方便的进行debug，在下面的demo中，我用Commmo.Logging+Nlog的方式，进行日志的记录。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>1.首先，先自定义自己的任务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class TestJob : IJob</span><br><span class="line">&#123;</span><br><span class="line">    private ILog logger = LogManager.GetLogger(typeof(TestJob));</span><br><span class="line">    public void Execute(IJobExecutionContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            logger.Info(<span class="string">"Test_job_开始任务"</span>);</span><br><span class="line">            using (var db=new DbContext() )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (int i = 0; i &lt; 4; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    var car = new Cars()</span><br><span class="line">                    &#123;</span><br><span class="line">                         CreateTime =DateTime.Now , Name =<span class="string">"test_job_car_"</span>+i</span><br><span class="line">                    &#125;;</span><br><span class="line">                    db.Configuration.AutoDetectChangesEnabled = <span class="literal">false</span>;</span><br><span class="line">                    db.Carses.Add(car);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                db.SaveChanges();</span><br><span class="line">                db.Configuration.AutoDetectChangesEnabled = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            logger.Info(<span class="string">"Test_job_任务完成"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">          </span><br><span class="line">           logger.Error(<span class="string">"Test_job_异常"</span>,ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.实现任务调度<br>每隔20秒执行一次：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void QuartzTest()</span><br><span class="line">       &#123;</span><br><span class="line">           StdSchedulerFactory sf = new StdSchedulerFactory();</span><br><span class="line">           var sc = sf.GetScheduler();</span><br><span class="line">           var job = JobBuilder.Create&lt;TestJob&gt;().WithIdentity(<span class="string">"testjob"</span>, <span class="string">"group1"</span>).Build();</span><br><span class="line">           var trigger = TriggerBuilder.Create().WithIdentity(<span class="string">"trigger_test_job"</span>, <span class="string">"group1"</span>).WithSimpleSchedule(c =&gt; c.RepeatForever().WithIntervalInSeconds(20)).StartNow().Build();</span><br><span class="line">           sc.ScheduleJob(job, trigger);</span><br><span class="line">           sc.Start();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>
<p>还可以指定这样的一个任务，在每小时的第<code>16</code>,<code>20</code>分钟的第<code>10,20,30,40,50</code>秒的时候执行任务：</p>
<blockquote>
<p>var trigger = TriggerBuilder.Create().WithIdentity(“trigger_test_job”, “group1”).WithCronSchedule(“10,20,30,40,50 16,20 <em> </em> * ? “).Build();</p>
</blockquote>
<h2 id="关于Common-Logging和Nlog的组合"><a href="#关于Common-Logging和Nlog的组合" class="headerlink" title="关于Common.Logging和Nlog的组合"></a>关于Common.Logging和Nlog的组合</h2><p>1.Nuget安装<code>NLog，Common.Logging.Nlog40(注意，这个版本是和Nlog的版本保持一致的)</code>。</p>
<p>2.最重要的是配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configSections&gt;</span><br><span class="line">  &lt;sectionGroup name=<span class="string">"common"</span>&gt;</span><br><span class="line">    &lt;section name=<span class="string">"logging"</span> <span class="built_in">type</span>=<span class="string">"Common.Logging.ConfigurationSectionHandler, Common.Logging"</span> /&gt;</span><br><span class="line">  &lt;/sectionGroup&gt;</span><br><span class="line">  &lt;section name=<span class="string">"nlog"</span> <span class="built_in">type</span>=<span class="string">"NLog.Config.ConfigSectionHandler, NLog"</span> /&gt;</span><br><span class="line">&lt;/configSections&gt;</span><br></pre></td></tr></table></figure></p>
<p>指定log由Nlog处理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;common&gt;</span><br><span class="line">  &lt;logging&gt;</span><br><span class="line">    &lt;factoryAdapter <span class="built_in">type</span>=<span class="string">"Common.Logging.NLog.NLogLoggerFactoryAdapter, Common.Logging.NLog40"</span>&gt;</span><br><span class="line">      &lt;arg key=<span class="string">"configType"</span> value=<span class="string">"INLINE"</span> /&gt;</span><br><span class="line">    &lt;/factoryAdapter&gt;</span><br><span class="line">  &lt;/logging&gt;</span><br><span class="line">&lt;/common&gt;</span><br></pre></td></tr></table></figure></p>
<p>Nlog的节点配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;nlog xmlns=<span class="string">"http://www.nlog-project.org/schemas/NLog.xsd"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span><br><span class="line">    &lt;targets&gt;</span><br><span class="line">      &lt;target name=<span class="string">"logfile"</span> xsi:<span class="built_in">type</span>=<span class="string">"file"</span> filename=<span class="string">"e:\ccccccmd.txt"</span> layout=<span class="string">"<span class="variable">$&#123;date:format=yyyy/MM/dd HH:mm:ss&#125;</span> <span class="variable">$&#123;message&#125;</span>"</span> /&gt;</span><br><span class="line">    &lt;/targets&gt;</span><br><span class="line">    &lt;rules&gt;</span><br><span class="line">      &lt;logger name=<span class="string">"*"</span> minlevel=<span class="string">"Trace"</span> writeTo=<span class="string">"logfile"</span> /&gt;</span><br><span class="line">    &lt;/rules&gt;</span><br><span class="line">  &lt;/nlog&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/net-commons/common-logging" target="_blank" rel="noopener">common.logging</a></li>
<li><a href="https://github.com/NLog/NLog" target="_blank" rel="noopener">NLog</a></li>
<li><a href="https://github.com/quartznet/quartznet" target="_blank" rel="noopener">quartznet</a></li>
<li><a href="cnblog.com">cnblog前辈文章</a></li>
<li><a href="http://git.oschina.net/chejiangyi/Dyd.BaseService.TaskManager" target="_blank" rel="noopener">车大开源的任务调度框架</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .Net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Quartz.Net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysqlfirst]]></title>
      <url>http://ccccccmd.rootu.cn/2016/08/01/mysqlfirst/</url>
      <content type="html"><![CDATA[<p>1.如果数据库名是关键字和特殊字符要报错.解决：在特殊字符、关键字行加上反引号</p>
<p>2.数据库文件的保存路径可以在<code>my.ini</code>中配置：</p>
<blockquote>
<p>datadir=”d:/mysql/database”;</p>
</blockquote>
<p>3.创建一个数据库，就对应一个文件夹，在文件夹中有一个<code>db.opt</code>文件。在此文件中设置数据库的字符集和校对集</p>
<a id="more"></a>
<p>4.create table 新表 select 字段 from 旧表</p>
<blockquote>
<p>复制表数据</p>
</blockquote>
<p>create table 新表 like 旧表</p>
<blockquote>
<p>复制表结构</p>
</blockquote>
<p>5.客户端编码、<code>character_set_client</code>、<code>character_set_results</code>三个编码的值一致即可操作中文.<br>只要设置<code>“set names 字符编码”</code>，就可以更改<code>character_set_client</code>、<code>character_set_results</code>的值。</p>
<p>6.如果要给自动增长列插入数据，使用null关键字。</p>
<p>7.<code>on duplicate key update</code><br>在插入数据的时候，如果插入的数据不满足主键约束或唯一约束则执行更新操作。</p>
<p>8.因为视图是一个表结构，所以创建视图后，会在数据库文件夹中多一个与视图名同名的.frm文件.</p>
]]></content>
      
        <categories>
            
            <category> MySql </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[EF的One to Zero,One关系]]></title>
      <url>http://ccccccmd.rootu.cn/2016/07/24/EF%E7%9A%84One%20to%20Zero,One%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>Ef到底是怎么实现<code>1--0，1</code>关系的？<br>看下面一个实验：</p>
<p>这里有两个实体，一个是<strong>Cars</strong>,一个是<strong>Users</strong>，关系是Users对应0，1个Cars.<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class Cars</span><br><span class="line">    &#123;</span><br><span class="line">        public int Id &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        [MaxLength (20), Required ]</span><br><span class="line">        public string Name &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">        [Required]</span><br><span class="line">        public DateTime  CreateTime &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        public Cars()</span><br><span class="line">        &#123;</span><br><span class="line">            CreateTime  = DateTime.Now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  public class Users</span><br><span class="line">    &#123;</span><br><span class="line">        public int Id &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">        [MaxLength(50), Required(ErrorMessage = <span class="string">"不能为空"</span>)]</span><br><span class="line">        public string UserName &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">        [Required ]</span><br><span class="line">        public int Age &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        public int? InterestCarId &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        [ForeignKey(<span class="string">"InterestCarId"</span>)]</span><br><span class="line">        public virtual Cars InterestCar &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        public Users()</span><br><span class="line">        &#123;</span><br><span class="line">            InterestCarId = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>如果我们开启数据库迁移，会在Users表中得到一个可以为空的外键值。看下你面这段linq</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DbContext db = new DbContext();</span><br><span class="line">var x = from u <span class="keyword">in</span> db.Userses</span><br><span class="line">        join c <span class="keyword">in</span> db.Carses on u.InterestCarId equals c.Id into f</span><br><span class="line">        from k <span class="keyword">in</span> f.DefaultIfEmpty()</span><br><span class="line">        select new &#123; name = u.UserName, car = k == null ? <span class="string">"空的"</span> : k.Name &#125;;</span><br><span class="line"></span><br><span class="line">var b = x.ToList();</span><br></pre></td></tr></table></figure>
<p>生成的sql是这样的:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    1 AS [C1], </span><br><span class="line">    [Extent1].[UserName] AS [UserName], </span><br><span class="line">    CASE WHEN ([Extent2].[Id] IS NULL) THEN N<span class="string">'空的'</span> ELSE [Extent2].[Name] END AS [C2]</span><br><span class="line">    FROM  [dbo].[Users] AS [Extent1]</span><br><span class="line">    LEFT OUTER JOIN [dbo].[Cars] AS [Extent2] ON [Extent1].[InterestCarId] = [Extent2].[Id]</span><br></pre></td></tr></table></figure>
<p>然后看这段lambda</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = db.Userses.Where(c =&gt; c.Age &gt; 10).Select(c =&gt; new</span><br><span class="line">            &#123;</span><br><span class="line">                name = c.UserName,</span><br><span class="line">                car = c.InterestCar == null ? <span class="string">""</span> : c.InterestCar.Name</span><br><span class="line">            &#125;).ToList();</span><br></pre></td></tr></table></figure>
<p>生成的sql是是这样子的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    [Extent1].[Age] AS [Age], </span><br><span class="line">    [Extent1].[UserName] AS [UserName], </span><br><span class="line">    CASE WHEN ([Extent2].[Id] IS NULL) THEN N<span class="string">''</span> ELSE [Extent2].[Name] END AS [C1]</span><br><span class="line">    FROM  [dbo].[Users] AS [Extent1]</span><br><span class="line">    LEFT OUTER JOIN [dbo].[Cars] AS [Extent2] ON [Extent1].[InterestCarId] = [Extent2].[Id]</span><br><span class="line">    WHERE [Extent1].[Age] &gt; 10</span><br></pre></td></tr></table></figure>
<p>这两个结果都是我们想要的，但是如果将<strong>Users</strong>中的InterestCarId的类型变成Int,生成的sql就很不一样了，所有的<code>left outer join</code>不变成<code>inner join</code>；</p>
<p>如果用fluentApi怎么实现呢？首先要把<strong>[ForeignKey(‘’)]</strong>去掉。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected override void OnModelCreating(DbModelBuilder modelBuilder)</span><br><span class="line">       &#123;</span><br><span class="line">           modelBuilder.Entity&lt;Users&gt;()</span><br><span class="line">               .HasOptional( c=&gt;c.InterestCar ).WithOptionalDependent().Map(c=&gt;c.MapKey(<span class="string">"InterestCarId"</span>));</span><br><span class="line">           base.OnModelCreating(modelBuilder);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>上面的约定中，用到了<strong>Map</strong>里的<strong>MapKey</strong>;Map方法很特殊，他负责映射没有在Entity实体中的属性。所以，用到了<code>Map(c=&gt;c.MapKey(&quot;InterestCarId&quot;))</code>,InterestCarId这个属性就必须从Model中干掉他,不然：</p>
<blockquote>
<p>模型生成过程中检测到一个或多个验证错误:InterestCarId: Name: 类型中的每个属性名必须唯一。已定义属性名“InterestCarId”。</p>
</blockquote>
<p>如果不用他，EF会默认用InterestCar_Id作为外键值。数据库中确实没有这个字段的。</p>
<p>如果这个字段是实体中必须包含的，就要用到<strong>HasForeignKey</strong>这个方法，但是，这个好像只有在<code>WithMany()</code>中会看到，很怪异。</p>
<p>但是指定WithMany(),会有这个错误</p>
<blockquote>
<p>模型生成过程中检测到一个或多个验证错误:EFTest.Users_InterestCar: : 多重性与关系“Users_InterestCar”中 Role“Users_InterestCar_Target”中的引用约束冲突。因为 Dependent Role 中的所有属性都不可以为 null，Principal Role 的多重性必须为“1”。</p>
</blockquote>
<p>结论：如果指定了1–0，1的关系，则外键需要设置成<code>int？</code>并且<code>ForeignKey()</code>方式指定导航属性。这时候，如果迁移了，会生成一个可以为null的外键属性。</p>
<p>还有一定插入的说明：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cars c = new <span class="function"><span class="title">Cars</span></span>() &#123;Name = <span class="string">"宝马"</span>&#125;;</span><br><span class="line">Users u1 = new <span class="function"><span class="title">Users</span></span>() &#123; Age = 18, UserName = <span class="string">"guest"</span>,InterestCarId  =0&#125;;</span><br><span class="line">db.Carses.Add(c);</span><br><span class="line">db.Us</span><br><span class="line">erses.Add(u1);</span><br><span class="line">db.SaveChanges();</span><br></pre></td></tr></table></figure>
<p>当Users的外键给的是0的时候，会发现，插入到数据库的u1的InterestCarId的值是c的Id；</p>
<p>但是如果这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cars c = new <span class="function"><span class="title">Cars</span></span>() &#123;Name = <span class="string">"宝马"</span>&#125;;</span><br><span class="line">Cars c1 = new <span class="function"><span class="title">Cars</span></span>() &#123; Name = <span class="string">"保时捷"</span> &#125;;</span><br><span class="line">Users u1 = new <span class="function"><span class="title">Users</span></span>() &#123; Age = 18, UserName = <span class="string">"guest"</span>,InterestCarId  =0&#125;;</span><br><span class="line">db.Carses.Add(c);</span><br><span class="line">db.Carses.Add(c1);        </span><br><span class="line">db.Userses.Add(u1);</span><br><span class="line">db.SaveChanges();</span><br></pre></td></tr></table></figure>
<p>就会有一个这样的错误，具体原因可以自己分析下：</p>
<blockquote>
<p>无法确定“EFTest.Users_InterestCar”关系的主体端。添加的多个实体可能主键相同。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> EntityFramework </category>
            
            <category> .Net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> EF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP]]></title>
      <url>http://ccccccmd.rootu.cn/2016/07/17/phpfirst/</url>
      <content type="html"><![CDATA[<h2 id="Apache的配置"><a href="#Apache的配置" class="headerlink" title="Apache的配置"></a>Apache的配置</h2><p>1.监听的端口 Listen 80</p>
<p>2.网站的路径 DocumentRoot</p>
<p>3.网站的安全 <directory "web="" path"=""></directory></p>
<p>4.ServerName<br><a id="more"></a><br>5.虚拟主机  NameVirtualPath*:80 指定所有从80过来的请求又虚拟主机解析。<br>添加一个虚拟主机</p>
<p><virtualhost *:80=""><br> ServerName <a href="http://www.php.com" target="_blank" rel="noopener">www.php.com</a></virtualhost></p>
<virtualhost>

<h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>round() 四舍五入</p>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>desc table_name 查看表结构；</p>
<p>show create table table_name 查看创建表语句</p>
<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><p>httpd.conf 中</p>
<p>1.LoadModule php5_module “d:/php/php5apache2_2.dll”</p>
<p>2.PHPIniDir “d:/php”</p>
<p>3.AddType application/x-httpd-php .php</p>
<h2 id="未完"><a href="#未完" class="headerlink" title="未完"></a>未完</h2></virtualhost>]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP入门 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EF的实体追踪/动态代理]]></title>
      <url>http://ccccccmd.rootu.cn/2016/07/03/eftrackingandstate/</url>
      <content type="html"><![CDATA[<h2 id="0x01-EF状态改变自动检测机制"><a href="#0x01-EF状态改变自动检测机制" class="headerlink" title="0x01 EF状态改变自动检测机制"></a>0x01 EF状态改变自动检测机制</h2><p>1.基于快照的状态改变追踪，当调用以下方法时<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DbSet.Find</span><br><span class="line">DbSet.Local</span><br><span class="line">DbSet.Remove</span><br><span class="line">DbSet.Add</span><br><span class="line">DbSet.Attach</span><br><span class="line">DbContext.SaveChanges</span><br><span class="line">DbContext.GetValidationErrors</span><br><span class="line">DbContext.Entry</span><br><span class="line">DbChangeTracker.Entries</span><br></pre></td></tr></table></figure></p>
<p>EF会比较各个属性当前值和快照中的值是否有发生改变。<code>EF调用DetectChanges()来查找发生的变更</code>再循环中多次调用<code>add()</code>时候，可以先关闭这个特性，调用<code>savechanges()</code>的时候，又会去检测这个变化的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using (var context = new BloggingContext()) </span><br><span class="line">&#123; </span><br><span class="line">    try </span><br><span class="line">    &#123; </span><br><span class="line">        context.Configuration.AutoDetectChangesEnabled = <span class="literal">false</span>; </span><br><span class="line">        foreach (var blog <span class="keyword">in</span> aLotOfBlogs) </span><br><span class="line">        &#123; </span><br><span class="line">            context.Blogs.Add(blog); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    finally </span><br><span class="line">    &#123; </span><br><span class="line">        context.Configuration.AutoDetectChangesEnabled = <span class="literal">true</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当前上下文被销毁后，这个追踪状态也就没有了。EF的追踪，要求实体上指定主键，或者手动指定复杂类型。<br><a id="more"></a><br>2.基于动态代理的变化追踪</p>
<p>POCO Proxy提供了延时加载和动态变化追踪。他是POCO实体类的一个派生类，相当于对实体类进行了一次包装。<code>动态代理</code>技术后面介绍;</p>
<blockquote>
<p>POCO entity should meet the following requirements to become a POCO proxy:<br>A POCO class must be declared with public access.<br>A POCO class must not be sealed (NotInheritable in Visual Basic)<br>A POCO class must not be abstract (MustInherit in Visual Basic).<br>Each navigation property must be declared as public, virtual<br>Each collection property must be ICollection<t><br>ProxyCreationEnabled option must NOT be false (default is true) in context class</t></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">显式创建代理实例</span><br><span class="line"></span><br><span class="line">如果使用 new 运算符创建实体的实例，则不会创建代理实例。这可能不会成为问题，但如果需要创建代理实例（例如，为了启用延迟加载或代理更改跟踪），则可通过使用 DbSet 的 Create 方法执行此操作。例如：</span><br><span class="line"></span><br><span class="line">using (var context = new BloggingContext()) </span><br><span class="line">&#123; </span><br><span class="line">    var blog = context.Blogs.Create(); </span><br><span class="line">&#125;</span><br><span class="line">如果要创建派生实体类型的实例，可使用 Create 的通用版本。例如：</span><br><span class="line"></span><br><span class="line">using (var context = new BloggingContext()) </span><br><span class="line">&#123; </span><br><span class="line">    var admin = context.Users.Create&lt;Administrator&gt;(); </span><br><span class="line">&#125;</span><br><span class="line">请注意，Create 方法不将已创建的实体添加或附加到上下文。</span><br><span class="line"></span><br><span class="line">请注意，如果因为实体代理类型不执行任何操作而导致创建的实体代理类型不包含任何值，Create 方法将仅创建实体类型本身的实例。例如，如果实体类型已封装和/或没有虚拟属性，则 Create 将仅创建实体类型的实例。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">从代理类型获取实际实体类型</span><br><span class="line"></span><br><span class="line">代理类型的名称类似如下所示：</span><br><span class="line"></span><br><span class="line">System.Data.Entity.DynamicProxies</span><br><span class="line">.Blog_5E43C6C196972BF0754973E48C9C941092D86818CD94005E9A759B70BF6E48E6</span><br><span class="line"></span><br><span class="line">可通过使用 ObjectContext 中的 GetObjectType 方法，查找此代理类型的实体类型。例如：</span><br><span class="line"></span><br><span class="line">using (var context = new BloggingContext()) </span><br><span class="line">&#123; </span><br><span class="line">    var blog = context.Blogs.Find(1); </span><br><span class="line">    var entityType = ObjectContext.GetObjectType(blog.GetType()); </span><br><span class="line">&#125;</span><br><span class="line">请注意，如果传递给 GetObjectType 的类型是非代理类型的实体类型的实例，则仍将返回实体的类型。这意味着，始终可以使用此方法获取实际的实体类型，而不用再检查类型是否是代理类型。</span><br></pre></td></tr></table></figure>
<h2 id="0x02-Entity-Framework-No-Tracking-Queries"><a href="#0x02-Entity-Framework-No-Tracking-Queries" class="headerlink" title="0x02 Entity Framework No-Tracking Queries"></a>0x02 Entity Framework No-Tracking Queries</h2><p>查询数据是调用<code>AsNoTracking()</code>方法时，会指定查询出的这些实体不会被上下文追踪，如果这些实体是只读的，不会用做更新，修改，这样做会有很大的性能改观。</p>
<blockquote>
<p>var xxx = dbContext.Orders.AsNoTracking();<br>var kk = dbContext.Orders.Where(c =&gt; c.Id &gt; 0).AsNoTracking().ToList();</p>
</blockquote>
<h2 id="0x03-什么是动态代理-POCO-Proxy"><a href="#0x03-什么是动态代理-POCO-Proxy" class="headerlink" title="0x03 什么是动态代理(POCO Proxy)"></a>0x03 什么是动态代理(POCO Proxy)</h2><p>POCO分离了关注点，他只做实体用，因为不能直接访问数据库，这样，POCO的功能被弱化了，所以选择<code>POCO Proxy</code>是简单的方法来获得额外的功能，如延迟加载和更改跟踪，同时仍然保持实体类的定义和简单操作。</p>
<blockquote>
<p>代理是一种形式的依赖注入地方附加功能注入到实体。在 POCO 实体的情况下他们有没有依赖性对 EF 所以不能创建或执行查询或讲变化状态管理器。在 EF，代理是动态生成的派生的类型的重写的各种属性，以便可以运行额外的代码实体。在延迟加载，这是要执行导航属性加载的代码。在下面的简化示例，EF 创建派生的类型”EFCustomerProxy”，和重写订单属性。在订单 getter，DoLazyLoad() 要执行的命令集合加载，如果尚未加载到执行额外的方法调用。</p>
</blockquote>
<blockquote>
<p>When proxy creation is enabled and a particular entity type fulfills the requirements to create proxies, queries with that result type will automatically return POCO proxy instances. However, if you use the “new” operator to create a new entity of the same type, you will obtain a regular POCO instance.<br>In order to obtain a new proxy instance without querying the database, for instance to attach it or add it to the ObjectContext, you can use the CreateObject<t> factory method.</t></p>
</blockquote>
<h2 id="0x04-引用"><a href="#0x04-引用" class="headerlink" title="0x04 引用"></a>0x04 引用</h2><p><a href="https://msdn.microsoft.com/zh-cn/data/jj592886" target="_blank" rel="noopener">msdn</a></p>
<p><a href="http://www.entityframeworktutorial.net/Types-of-Entities.aspx" target="_blank" rel="noopener">Types-of-Entities</a></p>
<p><a href="http://www.tutorialspoint.com/entity_framework/entity_framework_types.htm" target="_blank" rel="noopener">entity_framework_types</a></p>
<p><a href="http://www.cnblogs.com/VolcanoCloud/p/4549225.html" target="_blank" rel="noopener">VolcanoCloud</a></p>
]]></content>
      
        <categories>
            
            <category> .Net </category>
            
            <category> EntityFramework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DataTracking </tag>
            
            <tag> POCO </tag>
            
            <tag> Proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用EF的本地数据]]></title>
      <url>http://ccccccmd.rootu.cn/2016/07/02/eflocaldata/</url>
      <content type="html"><![CDATA[<p>EF中直接使用<code>DbSet</code>查询实体，总会生成查询语句，执行一次数据库查询。但是EF提供了<br><code>DbSet.Local</code>去当前上下文的对应的内存中拖数据。只要这些实体被EF追踪了，且没有被标记为deleted状态，用<code>Local</code>就可以不触发数据库查询取出内存中的数据。</p>
<p>看<strong>MSDN</strong>上的一段实例代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dbContext.Orders.Load();</span><br><span class="line">var o = dbContext.Orders.Find(1);</span><br><span class="line">dbContext.Orders.Add(new <span class="function"><span class="title">Order</span></span>() &#123; No = <span class="string">"hellohello"</span> &#125;);</span><br><span class="line">dbContext.Orders.Remove(o);</span><br><span class="line">//var o2 = dbContext.Orders.Find(2);</span><br><span class="line">var o2 = dbContext.Orders.Local.FirstOrDefault(c =&gt; c.Id == 2);</span><br><span class="line">//这两种修改都会造成<span class="built_in">local</span>和及时查询的集合中的o2状态变为Modified</span><br><span class="line">o2.No = <span class="string">"ccccccmd"</span>;</span><br><span class="line">foreach (var l <span class="keyword">in</span> dbContext.Orders.Local)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(string.Format(<span class="string">"ID:&#123;0&#125;---NO:&#123;1&#125;---state:&#123;2&#125;"</span>, l.Id, l.No, dbContext.Entry(l).State));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">"----------------------------"</span>);</span><br><span class="line"></span><br><span class="line">foreach (var l <span class="keyword">in</span> dbContext.Orders)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(string.Format(<span class="string">"ID:&#123;0&#125;---NO:&#123;1&#125;---state:&#123;2&#125;"</span>, l.Id, l.No, dbContext.Entry(l).State));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>下面是输出：</p>
<blockquote>
<p><code>ID:0</code>—NO:hellohello—state:Added//没有保存到数据库，但是已经在local中了,它没有<code>在实时dbContext.Orders的查询结果集中</code>，因为这个结果集总是<code>反应database中的数据</code>情况。</p>
</blockquote>
<blockquote>
<p>ID:2—NO:11111—state:Modified</p>
</blockquote>
<blockquote>
<p>ID:3—NO:xxxxxx—state:Unchanged</p>
</blockquote>
<blockquote>
<p>ID:4—NO:xxxxxx—state:Unchanged</p>
</blockquote>
<blockquote>
<p>ID:5—NO:11111—state:Unchanged</p>
</blockquote>
<blockquote>
<p>ID:1—NO:asdgasdgasdg—state:Deleted//被标记为deleted状态，还没有savechanges，没有从数据库中删除，但是在local中移除掉了,虽然<code>他仍然被上下文追踪着</code>，但是前面已经提过，local中不要<code>deleted</code>状态的。</p>
</blockquote>
<blockquote>
<p>ID:2—NO:11111—state:Modified</p>
</blockquote>
<blockquote>
<p>ID:3—NO:xxxxxx—state:Unchanged</p>
</blockquote>
<blockquote>
<p>ID:4—NO:xxxxxx—state:Unchanged</p>
</blockquote>
<blockquote>
<p>ID:5—NO:11111—state:Unchanged</p>
</blockquote>
<p>上面可以看出，针对local集合的操作，也会被上下文追踪的。</p>
<blockquote>
<p>MD好难，待续。。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> EntityFramework </category>
            
            <category> .Net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> EF </tag>
            
            <tag> Local Data </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EF加载实体的三种模式]]></title>
      <url>http://ccccccmd.rootu.cn/2016/07/01/EntityFramework/</url>
      <content type="html"><![CDATA[<h2 id="0x01-预加载-Eagerly-Loading"><a href="#0x01-预加载-Eagerly-Loading" class="headerlink" title="0x01 预加载(Eagerly Loading)"></a>0x01 预加载(Eagerly Loading)</h2><p>这种模式是查找到一个实体后，也会自动的查询加载和他相关的实体，<code>导航属性</code>等。这种模式用<strong>Include</strong>方法实现。不管导航属性上有没有<code>virtual</code>关键字。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Load one blogs and its related posts </span><br><span class="line">    var blog1 = context.Blogs </span><br><span class="line">                        .Where(b =&gt; b.Name == <span class="string">"ADO.NET Blog"</span>) </span><br><span class="line">                        .Include(b =&gt; b.Posts) </span><br><span class="line">                        .FirstOrDefault(); </span><br><span class="line"></span><br><span class="line">    // Load all blogs and related posts  </span><br><span class="line">    // using a string to specify the relationship </span><br><span class="line">    var blogs2 = context.Blogs </span><br><span class="line">                          .Include(<span class="string">"Posts"</span>) </span><br><span class="line">                          .ToList();</span><br></pre></td></tr></table></figure></p>
<p>预加载模式可以进行多级加载，既可以加载导航属性的导航属性：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Load all blogs, all related posts, and all related comments </span><br><span class="line">    var blogs1 = context.Blogs </span><br><span class="line">                       .Include(b =&gt; b.Posts.Select(p =&gt; p.Comments)) </span><br><span class="line">                       .ToList(); </span><br><span class="line"> </span><br><span class="line">    // Load all users their related profiles, and related avatar </span><br><span class="line">    var users1 = context.Users </span><br><span class="line">                        .Include(u =&gt; u.Profile.Avatar) </span><br><span class="line">                        .ToList();</span><br></pre></td></tr></table></figure></p>
<h2 id="0x02-延时加载，懒加载"><a href="#0x02-延时加载，懒加载" class="headerlink" title="0x02 延时加载，懒加载"></a>0x02 延时加载，懒加载</h2><p>这种模式就是用到的时候去加载相应的实体。就是在导航属性上加<strong>virtual</strong>关键字。</p>
<p>可以去掉<strong>virtual</strong>关键字关闭，或者在上下文的构造函数中关闭。</p>
<blockquote>
<p>public class BloggingContext : DbContext<br>{<br>   public BloggingContext()<br>   {<br>       this.Configuration.LazyLoadingEnabled = false;<br>   }<br>}</p>
</blockquote>
<h2 id="0x03-显示加载模式"><a href="#0x03-显示加载模式" class="headerlink" title="0x03 显示加载模式"></a>0x03 显示加载模式</h2><p>这个是你关闭了延时加载的情况下，你还要去加载和他有关的实体，你就需要采用直接加载的方式。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dbContext .Configuration.LazyLoadingEnabled = <span class="literal">false</span>;</span><br><span class="line">           var x2 = dbContext.Orders.Find(1);</span><br><span class="line"></span><br><span class="line">           foreach (var ite <span class="keyword">in</span> x2.Items )</span><br><span class="line">           &#123;</span><br><span class="line">               Console.WriteLine(ite.Id);**//什么都不输出**</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           dbContext.Entry(x2).Collection(x =&gt; x.Items).Load();</span><br><span class="line"></span><br><span class="line">           foreach (var ite <span class="keyword">in</span> x2.Items)</span><br><span class="line">           &#123;</span><br><span class="line">               Console.WriteLine(ite.Id);**//会输出**</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>
<p>显示加载会有这两种写法，针对导航属性是集合，和单一实体：</p>
<blockquote>
<p>var x2 = dbContext.Orders.Find(1);<br>dbContext.Entry(x2).Collection(x =&gt; x.Items).Load();<br>var item = dbContext.OrderItems.Find(1);<br>dbContext.Entry(item).Reference(c=&gt;c.Order ).Load();</p>
</blockquote>
<p>如果想在显示加载的时候在执行sql之前添加<strong>过滤条件</strong>，就要用到<strong>Query</strong>的方法。</p>
<blockquote>
<p> dbContext.Entry(x2).Collection(x =&gt; x.Items).Query() .Where( c=&gt;c.Id &gt;10).Load();</p>
</blockquote>
<p>关于<code>Load()</code>这个方法，他产生的效果和我们平时用的<code>ToList()</code>产生的效果是一样的，只是他避免了去再次创建一个集合。只是他要和<code>Local Data</code>配合使用。</p>
<blockquote>
<p>There are several scenarios where you may want to load entities from the database into the context without immediately doing anything with those entities. A good example of this is loading entities for data binding as described in Local Data. One common way to do this is to write a LINQ query and then call ToList on it, only to immediately discard the created list. The Load extension method works just like ToList except that it avoids the creation of the list altogether.</p>
</blockquote>
<h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><strong><a href="http://www.tutorialspoint.com/entity_framework/entity_framework_explicit_loading.htm" target="_blank" rel="noopener">tutorialspoint.com</a></strong></p>
<p><strong><a href="http://www.entityframeworktutorial.net/EntityFramework4.3/eager-loading-with-dbcontext.aspx" target="_blank" rel="noopener">entityframeworktutorial.net</a></strong></p>
<p><strong><a href="https://msdn.microsoft.com/zh-cn/data/jj574232" target="_blank" rel="noopener">MSDN</a></strong></p>
]]></content>
      
        <categories>
            
            <category> EntityFramework </category>
            
            <category> .Net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> EF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ABP起步]]></title>
      <url>http://ccccccmd.rootu.cn/2016/06/29/abp-begin/</url>
      <content type="html"><![CDATA[<h2 id="0x00-ABP简介"><a href="#0x00-ABP简介" class="headerlink" title="0x00 ABP简介"></a>0x00 ABP简介</h2><p>ABP是土耳其大牛开源的一套.Net框架，<a href="http://www.aspnetboilerplate.com/" target="_blank" rel="noopener">aspnetboilerplate官网</a>。</p>
<p>源码开源在<a href="https://github.com/aspnetboilerplate" target="_blank" rel="noopener">github</a>上，现在已经支持 <strong>.Net Core</strong> 了。</p>
<p>ABP现在在.Net社区已经很成熟，已经有很多成熟的案例。资源资料都比较多了，有了很多先驱和布道者。<br><a id="more"></a></p>
<h2 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h2><p>ABP是N层结构，实现部分 <strong>DDD</strong> 思想。</p>
<p>1.表现层，用户访问的入口，像web api,asp.net mvc，SignalR</p>
<p>2.应用层，介于表现层和领域层之间，负责处理业务逻辑，services，DTOs,DTO Mappers.</p>
<p>3.领域层（Domain/Core），应用的核心，包括UOW，Domain Event,Repository,实体对象</p>
<blockquote>
<p>领域层是所有的业务规则实现的地方。</p>
</blockquote>
<p>实体代表了业务领域的数据和操作。在实践中，它们一般会映射到数据库的表中。</p>
<blockquote>
<p>仓储是跟集合很像的对象，使用仓储可以检索数据源（数据库）上的实体，并将实体持久化到数据源上。<strong>领域层只是定义了仓储</strong>，但是并没有实现它们，它们是在基础设施层实现的。</p>
</blockquote>
<blockquote>
<p>领域事件定义了领域特定的事件，也包括触发和处理这些事件。</p>
</blockquote>
<blockquote>
<p>领域服务借助实体运行，并实现了不属于单个实体的业务规则。当处理的业务规则跨越两个（及以上）实体时，应该写在领域服务方法里面。</p>
</blockquote>
<blockquote>
<p>工作单元是一种管理实体的设计模式，这些实体受业务逻辑影响，并将状态持久化到数据存储中。<strong>领域层应该尽可能地独立于第三方的库</strong>。</p>
</blockquote>
<p>4.基础设施层（Infrastructure）,这部分提供ORM，数据库迁移部署应用等。</p>
<p>ABP通过Castle Windsor实现DI,用log4Net记录日志。也可以轻松的替换到其他工具上。</p>
<blockquote>
<p>ABP要求给所有应用服务提取接口，并且接口要继承自IApplicationService。只有继承了这个接口，ABP才会自动实现依赖注入。在UserTypeAppService类中，我们自动注入了UserTypeService这个领域服务和UserTypeRepository这个仓储。除了使用构造参数的注入方式外，您也可以使用属性注入，但构造参数注入显得更高大上一点。在作者理解，简单功能，应用服务直接调用仓储接口实现。复杂功能（尤指业务逻辑代码）在领域服务中实现（Core中的Service），然后应用服务调用领域服务的处理结果，返回给用户。其中，部分功能通过系统默认的仓储接口无法实现的，就自定义仓储然后根据情况，选择应用服务或是领域服务调用并返回。  From <a href="http://www.cnblogs.com/brucelee/p/6081890.html" target="_blank" rel="noopener">brucelee’s blog</a></p>
</blockquote>
<h2 id="0x02-ABP中的模块系统"><a href="#0x02-ABP中的模块系统" class="headerlink" title="0x02 ABP中的模块系统"></a>0x02 ABP中的模块系统</h2><p>ABP提供了构建模块并将这些模块组合起来创建应用的基础设施。一个模块可以依赖另一个模块。一般来说，一个程序集可以认为是一个模块。一个模块是由一个派生了<code>AbpModule</code>的类定义的。</p>
<p>To be continued…</p>
]]></content>
      
        <categories>
            
            <category> ABP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DDD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ModelFirstInExistDb]]></title>
      <url>http://ccccccmd.rootu.cn/2016/06/19/ModelFirstInExistDb/</url>
      <content type="html"><![CDATA[<h2 id="数据库存在的情况下使用ModelFirst"><a href="#数据库存在的情况下使用ModelFirst" class="headerlink" title="数据库存在的情况下使用ModelFirst"></a>数据库存在的情况下使用ModelFirst</h2><p>这个应用的时候很简单，不用手动的添加数据库上下文，和Model，新建<code>ADO.NET Entity Data Model</code>,</p>
<p>选择<code>Code First from Database</code> 这样，就会自动根据已有数据库的约束等有<code>EF 设计器</code>自动帮我们生成Entity和DbContext。</p>
<p>当我们的数据库有变化时，开发人员可以手动的去更改Entity，或者在重新用<code>设计器</code>生成。<br><a id="more"></a></p>
<h2 id="自定义生成的Entity"><a href="#自定义生成的Entity" class="headerlink" title="自定义生成的Entity"></a>自定义生成的Entity</h2><p>我们可以自己定义生成Model的<code>模板</code>，我们需要安装<code>EntityFramework.CodeTemplates.CSharp</code> 在Nuget的控制台面板执行这个命令：</p>
<blockquote>
<p>Install-Package EntityFramework.CodeTemplates.CSharp</p>
</blockquote>
<p>完成后，会在我们的项目下生成一个<code>CodeTemplates\EFModelFromDatabase</code>的文件夹，<br>里面就有我们上线文模板<code>Context.cs.t4</code>和Model的模板<code>EntityType.cs.t4</code>,通过修改这两个文件，就可以达到自定义的效果。</p>
<p>T4模板的介绍在<a href="https://msdn.microsoft.com/en-us/library/bb126445.aspx" target="_blank" rel="noopener">这里</a>.</p>
<h2 id="已存在的数据库上进行Code-First-Migrations"><a href="#已存在的数据库上进行Code-First-Migrations" class="headerlink" title="已存在的数据库上进行Code First Migrations"></a>已存在的数据库上进行Code First Migrations</h2><p>对于Model First，我们可以直接进行数据库的迁移。<code>Add-Migration</code>生成迁移数据，里面会有两个重写的方法<code>UP</code>和<code>Down</code>,<code>Update-Database</code>会生成对应的迁移sql执行到指定的数据库。</p>
<p>在团队中多人进行数据库迁移，还是很麻烦的，所以，数据库的迁移工作，最好一个专门的人进行操作。具体可以看<a href="https://msdn.microsoft.com/zh-cn/data/dn481501" target="_blank" rel="noopener">这里</a>。</p>
<p>在发布的时候更新生产环境的数据库：<br>1.生产环境和本地环境的数据库是一样的<br>local –&gt;</p>
<blockquote>
<p>Add-Migration one –IgnoreChanges</p>
<p>Update-Database</p>
<p>Add-Migration two</p>
<p>Update-Database</p>
</blockquote>
<p>2.生产环境的数据库是空的：<br>local –&gt;</p>
<blockquote>
<p>Add-Migration one  //注释掉UP()和Down()</p>
<p>Update-Database</p>
<p>Add-Migration two</p>
<p>Update-Database</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参考(<code>vs code 才是 Windows 平台下最好用的 Markdown 编辑器</code>)：</p>
<p><a href="https://channel9.msdn.com/blogs/ef/migrations-existing-databases" target="_blank" rel="noopener">对远程数据库的迁移</a></p>
<p><a href="https://msdn.microsoft.com/zh-cn/data/dn579398" target="_blank" rel="noopener">Code First Migrations with an existing database</a></p>
]]></content>
      
        <categories>
            
            <category> EntityFramework </category>
            
            <category> .Net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> EF </tag>
            
            <tag> ModelFirst </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentAPI]]></title>
      <url>http://ccccccmd.rootu.cn/2016/06/18/FluentAPI/</url>
      <content type="html"><![CDATA[<h2 id="FluentAPI-简介"><a href="#FluentAPI-简介" class="headerlink" title="FluentAPI 简介"></a>FluentAPI 简介</h2><p> Code Frist模式中，EF提供了很多不同<code>DataAnnotations</code>的特性来让我们重写默认的<code>Conventions</code>约定，比如，默认<strong>ID</strong>字段或<strong>ClassName+Id</strong>字段是表的<strong>Primary key</strong>。</p>
<p><code>FluentAI</code> 是另外一种方式来配置我们的Entity，他最中产生的效果和<code>DataAnnotations</code>的注解是一样的，<a id="more"></a>但是<code>FluentAPI</code> 可以提供更灵活，更强大的配置方式。</p>
<h2 id="FluentAPI-使用"><a href="#FluentAPI-使用" class="headerlink" title="FluentAPI 使用"></a>FluentAPI 使用</h2><p>实验环境：<strong>vs 2015 update2/   Entity Fromework 6.1.3/  C# 6.0/Sql Server 2008 r2</strong></p>
<p>我们是通过重写<code>OnModelCreating</code>这个方法得到FluentApi的入口的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class SchoolContext: DbContext </span><br><span class="line">&#123;</span><br><span class="line">    public SchoolDBContext(): base() </span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DbSet&lt;Student&gt; Students &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">    public DbSet&lt;Standard&gt; Standards &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    protected override void OnModelCreating(DbModelBuilder modelBuilder)</span><br><span class="line">    &#123;</span><br><span class="line">        //我们可以通过modelBuilder来配置我们的class了</span><br><span class="line"></span><br><span class="line">        base.OnModelCreating(modelBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是一些具体的配置，我只记录一些常用的，比较重要的，高级还没有研究透，详细可到<a href="https://msdn.microsoft.com/zh-cn/data/ee712907" target="_blank" rel="noopener">这里</a>查看。</p>
<h3 id="Map-Entity-to-Table-改变实体类到数据库的表映射关系"><a href="#Map-Entity-to-Table-改变实体类到数据库的表映射关系" class="headerlink" title="Map Entity to Table 改变实体类到数据库的表映射关系"></a>Map Entity to Table 改变实体类到数据库的表映射关系</h3><blockquote>
<p> modelBuilder.Entity<student>().ToTable(“StudentData”);//<strong>Student</strong>迁移时，在数据库生成的表名就是<strong>StudentData</strong><br>   modelBuilder.Entity<course>().ToTable(“CourseDetail”);<br> modelBuilder.HasDefaultSchema(“Admin”);//生成的表，都有一个默认的前缀<strong>Admin</strong></course></student></p>
</blockquote>
<p>若果用到的领域模型，在Domain的映射中，还可以这么玩：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//Map entity to table</span><br><span class="line"> modelBuilder.Entity&lt;Student&gt;().Map(sd ⇒ &#123;</span><br><span class="line">    sd.Properties(p ⇒ new &#123; p.ID, p.FirstMidName, p.LastName &#125;);</span><br><span class="line">    sd.ToTable(<span class="string">"StudentData"</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> .Map(si ⇒ &#123;</span><br><span class="line">    si.Properties(p ⇒ new &#123; p.ID, p.EnrollmentDate &#125;);</span><br><span class="line">    si.ToTable(<span class="string">"StudentEnrollmentInfo"</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Properties-Mapping-类字段的约束"><a href="#Properties-Mapping-类字段的约束" class="headerlink" title="Properties Mapping 类字段的约束"></a>Properties Mapping 类字段的约束</h3><p>设置主键：</p>
<blockquote>
<p>modelBuilder.Entity<student>().HasKey<int>(s ⇒ s.StdntID);</int></student></p>
</blockquote>
<p>配置组合主键：</p>
<blockquote>
<p>modelBuilder.Entity<department>().HasKey(t =&gt; new { t.DepartmentID, t.Name });</department></p>
</blockquote>
<p>指定字段名字，长度，是否必填,字段类型等等：</p>
<blockquote>
<p>modelBuilder.Entity<syscity>().Property(c =&gt; c.EnglishName).HasColumnName(“ct”).HasMaxLength(200).HasColumnType(“varchar”).IsOptional(); </syscity></p>
</blockquote>
<p>其他稀奇古怪的，直接搬example:</p>
<p>1.关闭自增：</p>
<blockquote>
<p>modelBuilder.Entity<department>().Property(t =&gt; t.DepartmentID).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);</department></p>
</blockquote>
<p>2.指定不映射到数据库中的列，这个列可能是我们自己定义的:  不解：<code>DataAnnotations</code>中我们好像没有标记？</p>
<blockquote>
<p>modelBuilder.Entity<department>().Ignore(t =&gt; t.Budget);</department></p>
</blockquote>
<p>3.配置字符串属性是否支持 Unicode 内容,就是sql server 中的nvarchar。默认Unicode是存储为Nvarchar的</p>
<blockquote>
<p>modelBuilder.Entity<department>() .Property(t =&gt; t.Name) .IsUnicode(false);</department></p>
</blockquote>
<p>4.高级：后续研究</p>
<blockquote>
<p>将属性配置为用作乐观并发令牌</p>
<p>将类指定为复杂类型(没有指定主键的都是复杂类型)</p>
<p>映射“每个层次结构一张表 (TPH)”继承</p>
<p>映射“每个类型一张表 (TPT)”继承</p>
<p>映射“每个具体类一张表 (TPC)”继承</p>
<p>将多个实体类型映射到数据库中的一个表（表拆分）</p>
</blockquote>
<h2 id="FluentAPI中的关系操作"><a href="#FluentAPI中的关系操作" class="headerlink" title="FluentAPI中的关系操作"></a>FluentAPI中的关系操作</h2><h3 id="1对0或1"><a href="#1对0或1" class="headerlink" title="1对0或1"></a>1对0或1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">               .HasOptional(s =&gt; s.Address) </span><br><span class="line">               .WithRequired(ad =&gt; ad.Student);//此时的主键生成在Id_Id</span><br></pre></td></tr></table></figure>
<p>此时生成的foreign key的关系是两个Id</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modelBuilder.Entity&lt;Author&gt;().HasOptional(c =&gt; c.Address).WithOptionalPrincipal(c =&gt; c.Author).WillCascadeOnDelete(<span class="literal">false</span> );//此时的主键生成在 Address 上</span><br></pre></td></tr></table></figure>
<p>这样，也会发现<code>WithOptionalPrincipal</code> 和 <code>WithOptionalDependent</code>的区别了</p>
<p>迁移数据是这样的：自动生成Author_Id<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> CreateTable(</span><br><span class="line">                <span class="string">"dbo.Addresses"</span>,</span><br><span class="line">                c =&gt; new</span><br><span class="line">                    &#123;</span><br><span class="line">                        Id = c.Int(nullable: <span class="literal">false</span>, identity: <span class="literal">true</span>),</span><br><span class="line">                        Location = c.String(),</span><br><span class="line">                        Author_Id = c.Int(),</span><br><span class="line">                    &#125;)</span><br><span class="line">                .PrimaryKey(t =&gt; t.Id)</span><br><span class="line">                .ForeignKey(<span class="string">"dbo.Authors"</span>, t =&gt; t.Author_Id)</span><br><span class="line">                .Index(t =&gt; t.Author_Id);</span><br><span class="line"></span><br><span class="line">当然也可以改foreign key 的名字</span><br><span class="line"> modelBuilder.Entity&lt;Author&gt;().HasOptional(c =&gt; c.Address).WithOptionalPrincipal(c =&gt; c.Author).Map( c=&gt;c.MapKey( <span class="string">"AuthorId"</span>)).WillCascadeOnDelete(<span class="literal">false</span> );</span><br><span class="line">但是Model中不应该有AuthorId这个字段</span><br></pre></td></tr></table></figure></p>
<h3 id="1对1"><a href="#1对1" class="headerlink" title="1对1"></a>1对1</h3><p>用的不多，测试下，也要指定外键。<strong>我认为</strong>本来这种一对一的关系sql server是根本不能实现的，相当于双外键，矛盾了.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modelBuilder.Entity&lt;Author&gt;().HasRequired(c =&gt; c.Address).WithRequiredPrincipal(c=&gt;c.Author).Map( c=&gt;c.MapKey( <span class="string">"AuthorId"</span>)).WillCascadeOnDelete(<span class="literal">false</span> );</span><br></pre></td></tr></table></figure></p>
<p>如果想删除一个话：<code>“Author_Address”AssociationSet 中的关系处于“Deleted”状态。如果有多重性约束，则相应的“Author_Address_Source”也必须处于“Deleted”状态。</code></p>
<p>删除的话，应该这样做：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var au = ef.Authors.Find(1);</span><br><span class="line">var k = au.Address;</span><br><span class="line">ef.Authors.Remove(au);</span><br><span class="line">ef.Addresses.Remove(k);</span><br></pre></td></tr></table></figure></p>
<p><strong>我认为</strong>：这个约束是EF帮我们约束的，因为我们发现1对1和 1对0或1生成的迁移数据都是一样的。</p>
<p>1对<em>的两个测试Model,可以很明显的区别于</em>to Many</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Address</span><br><span class="line">    &#123;</span><br><span class="line">        public int Id &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">        public string Location &#123; get; <span class="built_in">set</span>; &#125;=<span class="string">""</span>;</span><br><span class="line">        public virtual Author Author  &#123;get; <span class="built_in">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class Author</span><br><span class="line">    &#123;</span><br><span class="line">        public int Id &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">        public string Name &#123; get; <span class="built_in">set</span>; &#125; = <span class="string">""</span>;</span><br><span class="line">        public virtual List&lt; Article &gt; Articles &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">        public virtual Address Address &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="1对多"><a href="#1对多" class="headerlink" title="1对多"></a>1对多</h3><p>一对多就很简单了，不会和上面两种那样绕：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modelBuilder.Entity&lt;Article&gt;()</span><br><span class="line">                .HasRequired(c =&gt; c.Author)</span><br><span class="line">                .WithMany(c =&gt; c.Articles)</span><br><span class="line">                .HasForeignKey(c =&gt; c.AuthorId).WillCascadeOnDelete(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>多对多会生成一个新的关联表</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modelBuilder.Entity&lt;Blog&gt;().HasMany(c =&gt; c.Authors).WithMany(c =&gt; c.Blogs).Map( c=&gt;c.ToTable( <span class="string">"Blogs_Authors"</span>));</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>FluentAPI</code>的操作方式确实是很方便，但是比<code>DataAnnotations</code>的方式难理解。</p>
<p><code>FluentAPI</code>在数据库迁移，和领域驱动里的Model First中应用最为广泛。</p>
<p>EF的数据库迁移功能非常强大，本次FluentAPI的变动都是直接迁移对比的。</p>
<p>部分参考地址，英语不好就是完蛋：</p>
<p><a href="http://www.entityframeworktutorial.net/EntityFramework5/entity-framework5-introduction.aspx" target="_blank" rel="noopener">entityframeworktutorial</a> </p>
<p><a href="https://msdn.microsoft.com/en-US/data/jj679962.aspx" target="_blank" rel="noopener">微软MSDN</a> </p>
<p> <a href="http://www.tutorialspoint.com/entity_framework/entity_framework_fluent_api.htm" target="_blank" rel="noopener">tutorialspoint</a></p>
<p><a href="http://stackoverflow.com/search?q=FluentAPi" target="_blank" rel="noopener">Stackoverflow</a></p>
<h2 id="待续。。。"><a href="#待续。。。" class="headerlink" title="待续。。。:)"></a>待续。。。:)</h2>]]></content>
      
        <categories>
            
            <category> EntityFramework </category>
            
            <category> .Net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> EF </tag>
            
            <tag> FluentAPI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 博客搭建]]></title>
      <url>http://ccccccmd.rootu.cn/2016/06/11/Heox-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>发现大家的博客都迁移到 <a href="github.com">github</a> 上了，好处是可以实时的备份，不用怕辛苦写的博客不小心都丢了，尤其是用vps搭的个人博客，一个操作不小心，数据就丢了。</p>
<p>还有一个好处就是<code>github pages</code> 完全是静态页面，浏览的速度相对来说快些，但是由于github的服务器在国外，静态页面的优势好像没有体现出来，但是没有关系，国内的<a href="www.coding.net">coding.net</a> 和开源中国的<a href="git.oschina.net">码云</a>都提供了类似github pages这种服务。</p>
<p>之前用的<a href="ghost.org">Ghost</a>，这个博客平台个人感觉也很好，免费开源，theme也很多。<br><a id="more"></a></p>
<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p> Hexo出自台湾大学生<a href="https://twitter.com/tommy351" target="_blank" rel="noopener">tommy351</a>之手，是一个基于Node.js的静态博客程序，文章支持<a href="http://www.markdown.cn/" target="_blank" rel="noopener">Markdown</a>语法。</p>
<blockquote>
<p><strong><a href="hexo.i0">官网</a>介绍：快速、简洁且高效的博客框架</strong>  </p>
</blockquote>
<h2 id="Hexo环境部署"><a href="#Hexo环境部署" class="headerlink" title="Hexo环境部署"></a>Hexo环境部署</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>Hexo是基于Node.js，首先要安装Node。Windows系统直接去<a href="node.org">官网</a>下载对应的安装包就可以了，linux系统直接用包管理工具 <code>yum</code>或者<code>apt-get</code>等安装即可；</p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>我装的是<a href="https://git-scm.com/download" target="_blank" rel="noopener">git-scm</a>，git的相关资料可以看大神<a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a>的博客。</p>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>用了Markdown直接就喜欢上它了，现在，<code>简书</code> <code>有道云笔记</code> <code>印象笔记的mark飞象</code> <code>博客园</code>都很好的支持Markdown语法了。</p>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>完全可以参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方的文档</a>进行操作。</p>
<h3 id="init-hexo"><a href="#init-hexo" class="headerlink" title="init hexo"></a>init hexo</h3><p>装完node.js和git后，就可以去安装hexo了,打开<strong>git bash</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<p>在你想初始化是文件夹下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hexo init</span><br></pre></td></tr></table></figure></p>
<h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hexo s</span><br></pre></td></tr></table></figure>
<p>会看到：<br><code>[info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code><br>此时端口4000被打开，打开浏览器，输入上面所示网址，会发现，博客就这么简单的建立起来了。</p>
<h3 id="Hexo的具体配置"><a href="#Hexo的具体配置" class="headerlink" title="Hexo的具体配置"></a>Hexo的具体配置</h3><p>hexo的配置都在根目录下的<strong>_config.yml</strong>里，资料很多就不详细的说了。</p>
<h3 id="hexo的theme"><a href="#hexo的theme" class="headerlink" title="hexo的theme"></a>hexo的theme</h3><p>hexo的主题很多，具体可以看<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网</a></p>
<p>我这里用的是<a href="http://github.com/MOxFIVE" target="_blank" rel="noopener">MOxFIVE</a>的主题，<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a>这个主题也是相当不错的。</p>
<p><code>主题直接 git clone theme仓库地址</code>到<strong>themes</strong>文件夹就可以了，每一个theme都有一个个性化的<code>_config.yml</code>，具体配置请看对应的readme.md</p>
<h3 id="hexo关联github"><a href="#hexo关联github" class="headerlink" title="hexo关联github"></a>hexo关联github</h3><p>具体可以看这里<a href="https://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="noopener">使用GitHub和Hexo搭建免费静态Blog</a>,或者<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo你的博客</a>.</p>
<p>我说下我遇到的问题：</p>
<blockquote>
<p>1.域名的话，直接绑定一个CNAME即可,比如，我是将<a href="ccccccmd.rootu.cn">ccccccmd.rootu.cn</a>指向记录<a href="ccccccmd.github.io">ccccccmd.github.io</a>;</p>
</blockquote>
<blockquote>
<p>2.出现<code>GitHub - failed to connect to github 443 windows/ Failed to connect to gitHub</code>这个问题时，重新设定http.proxy  : <code>git config --global http.proxy &quot;&quot;</code></p>
</blockquote>
<blockquote>
<p>3.hexo d自动部署的时候，会把CNAME，favicon.png等清掉，只需要把这两个放到<strong>source</strong>里即可。</p>
</blockquote>
<blockquote>
<p>4.删除文章时候，要先<code>hexo clean</code> 然后删除<code>_posts下的的.md文件</code>，然后<code>hexo g</code>，然后<code>hexo d</code>自动push到github上.</p>
</blockquote>
<blockquote>
<p>5.如果之前你的git仓储是<code>https:</code>的形式，你可以在<code>.git下的config</code>修改url：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">    url = git@github.com:ccccccmd/ccccccmd.github.io.git</span><br></pre></td></tr></table></figure>
<h2 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a>待续…</h2>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
